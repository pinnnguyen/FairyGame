import { computed, unref, inject, provide } from "vue";
const PROVIDED_NAMESPACE = "__vxp-provided-namespace";
const globalNamespace = computed(() => "vxp");
function configNamespace(sourceNamespace, app) {
  if (app) {
    const namespace = computed(() => {
      const namespace2 = unref(sourceNamespace);
      return namespace2 || globalNamespace.value;
    });
    app.provide(PROVIDED_NAMESPACE, namespace);
  } else {
    const upstreamNamespace = inject(PROVIDED_NAMESPACE, null);
    const namespace = computed(() => {
      return unref(sourceNamespace) || (upstreamNamespace == null ? void 0 : upstreamNamespace.value) || globalNamespace.value;
    });
    provide(PROVIDED_NAMESPACE, namespace);
  }
}
function useNamespace() {
  return inject(PROVIDED_NAMESPACE, globalNamespace);
}
function useNameHelper(block, namespace = useNamespace()) {
  const b = () => `${unref(namespace)}-${block}`;
  const be = (element) => `${b()}__${element}`;
  const bm = (modifier) => `${b()}--${modifier}`;
  const bem = (element, modifier) => `${b()}__${element}--${modifier}`;
  const bs = (suffix) => `${b()}-${suffix}`;
  const ns = (suffix) => `${unref(namespace)}-${suffix}`;
  const cv = (name) => `--vxp-${block}-${name}`;
  const cvm = (map, style = {}) => {
    Object.keys(map).forEach((name) => {
      style[cv(name)] = map[name];
    });
    return style;
  };
  const gcv = (name) => `var(--vxp-${block}-${name})`;
  const nv = (name) => `--vxp-${name}`;
  const gnv = (name) => `var(--vxp-${name})`;
  return {
    b,
    be,
    bm,
    bem,
    bs,
    ns,
    cv,
    cvm,
    gcv,
    nv,
    gnv
  };
}
export { PROVIDED_NAMESPACE, configNamespace, globalNamespace, useNameHelper, useNamespace };
