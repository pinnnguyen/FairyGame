import { computed, unref, inject, provide } from "vue";
import { mergeObjects } from "@vexip-ui/utils";
import { zhCNLocale } from "./zh-CN.mjs";
export { zhCNLocale } from "./zh-CN.mjs";
import { enUSLocale } from "./en-US.mjs";
export { enUSLocale } from "./en-US.mjs";
export { defineLocale, defineLocaleConfig } from "./helper.mjs";
const PROVIDED_LOCALE = "__vxp-provided-locale";
const globalLocal = computed(() => zhCNLocale());
function getDefaultLocaleConfig(locale) {
  if (!locale) {
    return globalLocal.value;
  }
  switch (locale) {
    case "en-US":
      return enUSLocale();
    default:
      return zhCNLocale();
  }
}
function configLocale(sourceLocale, app) {
  if (app) {
    const locale = computed(() => {
      const locale2 = unref(sourceLocale);
      return mergeObjects(getDefaultLocaleConfig(locale2.locale), locale2, false);
    });
    app.provide(PROVIDED_LOCALE, locale);
  } else {
    const upstreamLocale = inject(PROVIDED_LOCALE, null);
    const locale = computed(() => {
      const locale2 = unref(sourceLocale);
      const providedLocale = mergeObjects(getDefaultLocaleConfig(locale2.locale), locale2);
      if (!(upstreamLocale == null ? void 0 : upstreamLocale.value)) {
        return providedLocale;
      }
      return mergeObjects(upstreamLocale.value, providedLocale);
    });
    provide(PROVIDED_LOCALE, locale);
  }
}
function useLocale(name) {
  const locale = inject(PROVIDED_LOCALE, globalLocal);
  if (!name) {
    return locale;
  }
  return computed(() => {
    var _a, _b;
    return (_b = (_a = locale.value) == null ? void 0 : _a[name]) != null ? _b : {};
  });
}
function getCountWord(wordTemplate, count) {
  const words = wordTemplate.split("|");
  if (words.length === 1)
    return `${count} ${wordTemplate}`;
  return `${count} ${count > 1 ? words[1].trim() : words[0].trim()}`;
}
function getCountWordOnly(wordTemplate, count) {
  const words = wordTemplate.split("|");
  if (words.length === 1)
    return wordTemplate;
  return count > 1 ? words[1].trim() : words[0].trim();
}
function makeSentence(words, wordSpace = ((_a) => (_a = useLocale()) == null ? void 0 : _a.value.wordSpace)() || false) {
  return !wordSpace ? words.replace(/\s+/g, "") : words;
}
export { PROVIDED_LOCALE, configLocale, getCountWord, getCountWordOnly, getDefaultLocaleConfig, globalLocal, makeSentence, useLocale };
