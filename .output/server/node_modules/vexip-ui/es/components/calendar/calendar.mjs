import { defineComponent, ref, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot, createVNode, createElementVNode, toDisplayString, withKeys, withModifiers } from "vue";
import CalendarPanel from "./calendar-panel.mjs";
import "../column/index.mjs";
import "../number-input/index.mjs";
import "../row/index.mjs";
import "../../common/config/src/index.mjs";
import { calendarProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Column from "../row/column.mjs";
import NumberInput from "../number-input/number-input.mjs";
import Row from "../row/row.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const _sfc_main = defineComponent({
  name: "Calendar",
  components: {
    CalendarPanel,
    Column,
    NumberInput,
    Row
  },
  props: calendarProps,
  emits: ["update:value"],
  setup(_props, { emit }) {
    const props = useProps("calendar", _props, {
      value: {
        default: null,
        static: true
      },
      year: () => new Date().getFullYear(),
      month: {
        default: () => new Date().getMonth() + 1,
        validator: (value) => value > 0 && value <= 12
      },
      weekDays: {
        default: null,
        validator: (value) => !value || value.length === 0 || value.length === 7
      },
      weekStart: {
        default: 0,
        validator: (value) => value >= 0 && value < 7
      },
      today: {
        default: () => new Date(),
        validator: (value) => !Number.isNaN(+new Date(value))
      },
      disabledDate: {
        default: () => false,
        isFunc: true
      }
    });
    const nh = useNameHelper("calendar");
    const locale = useLocale("calendar");
    const calendarValue = ref(props.value);
    const calendarYear = ref(props.year);
    const calendarMonth = ref(props.month);
    function formatYearInput(value) {
      return `${value}${locale.value.year}`;
    }
    function formatMonthInput(value) {
      return `${value}${locale.value.month}`;
    }
    function isDisabled(date) {
      if (typeof props.disabledDate !== "function") {
        return true;
      }
      return props.disabledDate(date);
    }
    function handleClick(date) {
      if (!isDisabled(date)) {
        calendarValue.value = date;
      }
      emitEvent(props.onSelect, date);
      emit("update:value", date);
    }
    return {
      props,
      nh,
      calendarValue,
      calendarYear,
      calendarMonth,
      formatYearInput,
      formatMonthInput,
      handleClick
    };
  }
});
const _hoisted_1 = ["onClick", "onKeydown"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Column = resolveComponent("Column");
  const _component_NumberInput = resolveComponent("NumberInput");
  const _component_Row = resolveComponent("Row");
  const _component_CalendarPanel = resolveComponent("CalendarPanel");
  return openBlock(), createBlock(_component_CalendarPanel, {
    value: _ctx.calendarValue,
    "onUpdate:value": _cache[2] || (_cache[2] = ($event) => _ctx.calendarValue = $event),
    inherit: _ctx.props.inherit,
    class: normalizeClass([_ctx.nh.b()]),
    year: _ctx.calendarYear,
    month: _ctx.calendarMonth,
    "week-start": _ctx.props.weekStart,
    today: _ctx.props.today,
    "disabled-date": _ctx.props.disabledDate
  }, {
    header: withCtx(() => [
      renderSlot(_ctx.$slots, "header", {}, () => [
        createVNode(_component_Row, {
          inherit: "",
          class: normalizeClass(_ctx.nh.be("header")),
          align: "middle"
        }, {
          default: withCtx(() => [
            createVNode(_component_Column, { flex: "auto" }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "title")
              ]),
              _: 3
            }),
            createVNode(_component_Column, {
              class: normalizeClass(_ctx.nh.be("actions")),
              flex: "0"
            }, {
              default: withCtx(() => [
                createVNode(_component_NumberInput, {
                  value: _ctx.calendarYear,
                  "onUpdate:value": _cache[0] || (_cache[0] = ($event) => _ctx.calendarYear = $event),
                  inherit: "",
                  class: normalizeClass(_ctx.nh.be("year-input")),
                  range: [1970, 2300],
                  formatter: _ctx.formatYearInput
                }, null, 8, ["value", "class", "formatter"]),
                createVNode(_component_NumberInput, {
                  value: _ctx.calendarMonth,
                  "onUpdate:value": _cache[1] || (_cache[1] = ($event) => _ctx.calendarMonth = $event),
                  inherit: "",
                  class: normalizeClass(_ctx.nh.be("month-input")),
                  range: [1, 12],
                  formatter: _ctx.formatMonthInput
                }, null, 8, ["value", "class", "formatter"])
              ]),
              _: 1
            }, 8, ["class"])
          ]),
          _: 3
        }, 8, ["class"])
      ])
    ]),
    week: withCtx(({ label, index, week }) => [
      createElementVNode("div", {
        class: normalizeClass(_ctx.nh.be("week"))
      }, [
        renderSlot(_ctx.$slots, "week", {
          label,
          index,
          week
        }, () => [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("week-value"))
          }, toDisplayString(label), 3)
        ])
      ], 2)
    ]),
    item: withCtx(({ selected, date, isPrev, isNext, isToday, disabled }) => [
      createElementVNode("div", {
        class: normalizeClass({
          [_ctx.nh.be("date")]: true,
          [_ctx.nh.bem("date", "selected")]: selected,
          [_ctx.nh.bem("date", "prev")]: isPrev,
          [_ctx.nh.bem("date", "next")]: isNext,
          [_ctx.nh.bem("date", "today")]: isToday,
          [_ctx.nh.bem("date", "disabled")]: disabled
        }),
        tabindex: "0",
        onClick: ($event) => _ctx.handleClick(date),
        onKeydown: [
          withKeys(withModifiers(($event) => _ctx.handleClick(date), ["prevent"]), ["enter"]),
          withKeys(withModifiers(($event) => _ctx.handleClick(date), ["prevent"]), ["space"])
        ]
      }, [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("date-header"))
        }, [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("date-value"))
          }, toDisplayString(date.getDate()), 3)
        ], 2),
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("date-content"))
        }, [
          renderSlot(_ctx.$slots, "content", {
            selected,
            date,
            isPrev,
            isNext,
            isToday,
            disabled
          })
        ], 2)
      ], 42, _hoisted_1)
    ]),
    _: 3
  }, 8, ["value", "inherit", "class", "year", "month", "week-start", "today", "disabled-date"]);
}
var Calendar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Calendar as default };
