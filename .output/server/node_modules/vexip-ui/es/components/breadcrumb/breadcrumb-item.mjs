import { defineComponent, inject, ref, watch, reactive, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withKeys, renderSlot, createTextVNode, toDisplayString, createBlock, Fragment } from "vue";
import "../renderer/index.mjs";
import "../../common/config/src/index.mjs";
import { isFunction } from "@vexip-ui/utils";
import { BREADCRUMB_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Renderer from "../renderer/renderer.mjs";
import { eventProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "BreadcrumbItem",
  components: {
    Renderer
  },
  props: {
    label: {
      type: [String, Number],
      default: null
    },
    onSelect: eventProp(),
    onSeparatorClick: eventProp()
  },
  emits: [],
  setup(props) {
    const breadcrumbState = inject(BREADCRUMB_STATE, null);
    const currentLabel = ref(props.label);
    const separator = ref("/");
    const separatorRenderer = ref(null);
    watch(
      () => props.label,
      (value) => {
        currentLabel.value = value;
        breadcrumbState == null ? void 0 : breadcrumbState.refreshLabels();
      }
    );
    if (breadcrumbState) {
      const state = reactive({
        label: currentLabel
      });
      watch(
        () => breadcrumbState.separator,
        (value) => {
          separator.value = value;
        },
        { immediate: true }
      );
      watch(
        () => breadcrumbState.separatorRenderer,
        (value) => {
          separatorRenderer.value = value;
        },
        { immediate: true }
      );
      breadcrumbState.increaseItem(state);
      onBeforeUnmount(() => {
        breadcrumbState.decreaseItem(state);
      });
    }
    function handleClick() {
      emitEvent(props.onSelect, currentLabel.value);
      breadcrumbState == null ? void 0 : breadcrumbState.handleSelect(currentLabel.value);
    }
    function handleSeparatorClick() {
      emitEvent(props.onSeparatorClick, currentLabel.value);
      breadcrumbState == null ? void 0 : breadcrumbState.handleSeparatorClick(currentLabel.value);
    }
    return {
      nh: useNameHelper("breadcrumb"),
      currentLabel,
      separator,
      separatorRenderer,
      isFunction,
      handleClick,
      handleSeparatorClick
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  return openBlock(), createElementBlock("li", {
    class: normalizeClass(_ctx.nh.be("item"))
  }, [
    createElementVNode("a", {
      class: normalizeClass(_ctx.nh.be("label")),
      tabindex: "0",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),
      onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["enter"]))
    }, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.label), 1)
      ])
    ], 34),
    createElementVNode("span", {
      class: normalizeClass(_ctx.nh.be("separator")),
      role: "separator",
      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleSeparatorClick && _ctx.handleSeparatorClick(...args))
    }, [
      renderSlot(_ctx.$slots, "separator", {}, () => [
        _ctx.isFunction(_ctx.separatorRenderer) ? (openBlock(), createBlock(_component_Renderer, {
          key: 0,
          renderer: _ctx.separatorRenderer,
          data: { label: _ctx.currentLabel }
        }, null, 8, ["renderer", "data"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString(_ctx.separator), 1)
        ], 64))
      ])
    ], 2)
  ], 2);
}
var BreadcrumbItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { BreadcrumbItem as default };
