import { defineComponent, ref, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, createTextVNode, toDisplayString, createVNode, createBlock, createCommentVNode } from "vue";
import "../icon/index.mjs";
import "../form/index.mjs";
import "../../common/config/src/index.mjs";
import { isPromise } from "@vexip-ui/utils";
import { Spinner } from "@vexip-ui/icons";
import { switchProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import { useFieldStore } from "../form/helper.mjs";
import { useProps, createSizeProp, createStateProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Switch",
  components: {
    Icon
  },
  props: switchProps,
  emits: ["update:value"],
  setup(_props, { emit }) {
    const { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } = useFieldStore(() => {
      var _a;
      return (_a = input.value) == null ? void 0 : _a.focus();
    });
    const props = useProps("switch", _props, {
      size: createSizeProp(size),
      state: createStateProp(state),
      value: {
        default: () => getFieldValue(false),
        static: true
      },
      disabled: () => disabled.value,
      openColor: "",
      closeColor: "",
      loading: () => loading.value,
      loadingIcon: Spinner,
      loadingSpin: false,
      openIcon: null,
      closeIcon: null,
      openText: "",
      closeText: "",
      onBeforeChange: {
        default: null,
        isFunc: true
      }
    });
    const nh = useNameHelper("switch");
    const currentValue = ref(props.value);
    const input = ref();
    const className = computed(() => {
      return [
        nh.b(),
        nh.bs("vars"),
        {
          [nh.bm("inherit")]: props.inherit,
          [nh.bm("open")]: currentValue.value,
          [nh.bm(props.size)]: props.size !== "default",
          [nh.bm(props.state)]: props.state !== "default",
          [nh.bm("disabled")]: props.disabled,
          [nh.bm("loading")]: props.loading
        }
      ];
    });
    const style = computed(() => {
      return {
        backgroundColor: currentValue.value ? props.openColor : props.closeColor
      };
    });
    const signalStyle = computed(() => {
      return {
        color: currentValue.value ? props.openColor : props.closeColor
      };
    });
    const isDisabled = computed(() => {
      return props.disabled || props.loading;
    });
    watch(
      () => props.value,
      (value) => {
        currentValue.value = value;
      }
    );
    watch(currentValue, (value) => {
      setFieldValue(value);
      emitEvent(props.onChange, value);
      emit("update:value", value);
      validateField();
    });
    async function handleChange(checked = !currentValue.value) {
      if (checked === currentValue.value)
        return;
      let result = true;
      if (typeof props.onBeforeChange === "function") {
        result = props.onBeforeChange(checked);
        if (isPromise(result)) {
          result = await result;
        }
      }
      if (result !== false) {
        currentValue.value = checked;
      }
    }
    return {
      props,
      nh,
      idFor,
      currentValue,
      className,
      style,
      signalStyle,
      isDisabled,
      input,
      handleChange
    };
  }
});
const _hoisted_1 = ["id", "aria-checked"];
const _hoisted_2 = ["checked", "disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Icon = resolveComponent("Icon");
  return openBlock(), createElementBlock("label", {
    id: _ctx.idFor,
    class: normalizeClass(_ctx.className),
    role: "switch",
    "aria-checked": _ctx.currentValue,
    style: normalizeStyle(_ctx.style)
  }, [
    createElementVNode("span", {
      class: normalizeClass(_ctx.nh.be("placeholder"))
    }, [
      createElementVNode("span", {
        class: normalizeClass(_ctx.nh.be("open-text"))
      }, [
        renderSlot(_ctx.$slots, "open", {}, () => [
          createTextVNode(toDisplayString(_ctx.props.openText), 1)
        ])
      ], 2),
      createElementVNode("span", {
        class: normalizeClass(_ctx.nh.be("close-text"))
      }, [
        renderSlot(_ctx.$slots, "close", {}, () => [
          createTextVNode(toDisplayString(_ctx.props.closeText), 1)
        ])
      ], 2)
    ], 2),
    createElementVNode("span", {
      class: normalizeClass(_ctx.nh.be("signal")),
      style: normalizeStyle(_ctx.signalStyle)
    }, [
      _ctx.props.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }, () => [
        createVNode(_component_Icon, {
          spin: _ctx.props.loadingSpin,
          pulse: !_ctx.props.loadingSpin,
          icon: _ctx.props.loadingIcon
        }, null, 8, ["spin", "pulse", "icon"])
      ]) : renderSlot(_ctx.$slots, "icon", {
        key: 1,
        value: _ctx.currentValue
      }, () => [
        _ctx.currentValue && _ctx.props.openIcon ? (openBlock(), createBlock(_component_Icon, {
          key: 0,
          icon: _ctx.props.openIcon
        }, null, 8, ["icon"])) : !_ctx.currentValue && _ctx.props.closeIcon ? (openBlock(), createBlock(_component_Icon, {
          key: 1,
          icon: _ctx.props.closeIcon
        }, null, 8, ["icon"])) : createCommentVNode("", true)
      ])
    ], 6),
    createElementVNode("span", {
      class: normalizeClass(_ctx.nh.be("label"))
    }, [
      _ctx.currentValue ? (openBlock(), createElementBlock("span", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("open-text"))
      }, [
        renderSlot(_ctx.$slots, "open", {}, () => [
          createTextVNode(toDisplayString(_ctx.props.openText), 1)
        ])
      ], 2)) : (openBlock(), createElementBlock("span", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("close-text"))
      }, [
        renderSlot(_ctx.$slots, "close", {}, () => [
          createTextVNode(toDisplayString(_ctx.props.closeText), 1)
        ])
      ], 2))
    ], 2),
    createElementVNode("input", {
      ref: "input",
      type: "checkbox",
      class: normalizeClass(_ctx.nh.be("input")),
      checked: _ctx.currentValue,
      disabled: _ctx.isDisabled,
      onChange: _cache[0] || (_cache[0] = ($event) => _ctx.handleChange())
    }, null, 42, _hoisted_2)
  ], 14, _hoisted_1);
}
var Switch = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Switch as default };
