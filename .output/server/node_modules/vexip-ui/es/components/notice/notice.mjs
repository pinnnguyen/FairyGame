import { defineComponent, ref, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, createElementBlock, createCommentVNode, Fragment, toDisplayString, createVNode } from "vue";
import "../icon/index.mjs";
import "../renderer/index.mjs";
import "../popup/index.mjs";
import { Xmark } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import Renderer from "../renderer/renderer.mjs";
import Popup from "../popup/popup.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Notice",
  components: {
    Icon,
    Renderer,
    Popup,
    Xmark
  },
  setup() {
    const placement = ref("top-right");
    const popup = ref();
    async function add(options) {
      return popup.value ? await popup.value.add(options) : null;
    }
    async function remove(key) {
      return !!popup.value && await popup.value.remove(key);
    }
    function clear() {
      popup.value && popup.value.clear();
    }
    return {
      nh: useNameHelper("notice"),
      effectiveTypes: ["info", "success", "warning", "error"],
      assertiveTypes: ["success", "warning", "error"],
      placement,
      popup,
      add,
      remove,
      clear
    };
  }
});
const _hoisted_1 = ["aria-live"];
const _hoisted_2 = ["innerHTML"];
const _hoisted_3 = ["innerHTML"];
const _hoisted_4 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  const _component_Icon = resolveComponent("Icon");
  const _component_Xmark = resolveComponent("Xmark");
  const _component_Popup = resolveComponent("Popup");
  return openBlock(), createBlock(_component_Popup, {
    ref: "popup",
    class: normalizeClass(_ctx.nh.b()),
    "transition-name": _ctx.nh.ns(`popup-${_ctx.placement.split("-")[1]}`),
    placement: _ctx.placement
  }, {
    item: withCtx(({ item }) => [
      createElementVNode("div", {
        class: normalizeClass([
          {
            [_ctx.nh.be("item")]: true,
            [_ctx.nh.bs("vars")]: true,
            [_ctx.nh.bem("item", "title-only")]: !item.content && typeof item.renderer !== "function",
            [_ctx.nh.bem("item", "has-icon")]: item.icon,
            [_ctx.nh.bem("item", "content-only")]: !item.title,
            [_ctx.nh.bem("item", item.type)]: item.type && _ctx.effectiveTypes.includes(item.type),
            [_ctx.nh.bem("item", "background")]: item.background,
            [_ctx.nh.bem("item", "color")]: item.background && item.color,
            [_ctx.nh.bem("item", "color-only")]: !item.background && item.color,
            [_ctx.nh.bem("item", "marker")]: item.marker
          },
          item.className
        ]),
        role: "alert",
        style: normalizeStyle([
          {
            color: typeof item.color === "string" ? item.color : void 0,
            backgroundColor: typeof item.background === "string" ? item.background : void 0
          },
          item.style || {}
        ]),
        "aria-atomic": "true",
        "aria-live": item.type && _ctx.assertiveTypes.includes(item.type) ? "assertive" : "polite"
      }, [
        item.icon ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("icon")),
          style: normalizeStyle({ color: item.iconColor })
        }, [
          typeof item.icon === "function" ? (openBlock(), createBlock(_component_Renderer, {
            key: 0,
            renderer: item.icon,
            data: item
          }, null, 8, ["renderer", "data"])) : item.icon ? (openBlock(), createBlock(_component_Icon, {
            key: 1,
            icon: item.icon,
            scale: !item.content && typeof item.renderer !== "function" ? 1 : 2,
            style: normalizeStyle([{ color: item.iconColor }, item.icon.style])
          }, null, 8, ["icon", "scale", "style"])) : createCommentVNode("", true)
        ], 6)) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("wrapper"))
        }, [
          typeof item.renderer === "function" ? (openBlock(), createBlock(_component_Renderer, {
            key: 0,
            renderer: item.renderer,
            data: item
          }, null, 8, ["renderer", "data"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            item.title ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              item.parseHtml ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(_ctx.nh.be("title")),
                style: normalizeStyle({
                  color: typeof item.titleColor === "string" ? item.titleColor : void 0
                }),
                innerHTML: item.title
              }, null, 14, _hoisted_2)) : (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(_ctx.nh.be("title")),
                style: normalizeStyle({
                  color: typeof item.titleColor === "string" ? item.titleColor : void 0
                })
              }, toDisplayString(item.title || ""), 7))
            ], 64)) : createCommentVNode("", true),
            item.content ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              item.parseHtml ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(_ctx.nh.be("content")),
                innerHTML: item.content
              }, null, 10, _hoisted_3)) : (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(_ctx.nh.be("content"))
              }, toDisplayString(item.content || ""), 3))
            ], 64)) : createCommentVNode("", true)
          ], 64))
        ], 2),
        item.closable ? (openBlock(), createElementBlock("button", {
          key: 1,
          class: normalizeClass(_ctx.nh.be("close")),
          onClick: ($event) => _ctx.remove(item.key)
        }, [
          createVNode(_component_Icon, { label: "close" }, {
            default: withCtx(() => [
              createVNode(_component_Xmark)
            ]),
            _: 1
          })
        ], 10, _hoisted_4)) : createCommentVNode("", true)
      ], 14, _hoisted_1)
    ]),
    _: 1
  }, 8, ["class", "transition-name", "placement"]);
}
var Component = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Component as default };
