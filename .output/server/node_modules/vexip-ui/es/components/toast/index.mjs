import { render, createVNode, markRaw } from "vue";
import Component from "./toast.mjs";
import { toNumber, destroyObject, isClient, noop } from "@vexip-ui/utils";
import { Check, Exclamation, Xmark, Spinner } from "@vexip-ui/icons";
const conveniences = {
  success: {
    icon: Check
  },
  warning: {
    icon: Exclamation
  },
  error: {
    icon: Xmark
  },
  loading: {
    icon: Spinner,
    showMask: true,
    iconProps: {
      pulse: true
    }
  }
};
class ToastManager {
  constructor(options = {}) {
    options = {
      ...options,
      duration: options.duration ? toNumber(options.duration) : 2e3
    };
    this._mountedApp = null;
    this._instance = null;
    this._container = null;
    this._timer = null;
    this.name = "Toast";
    this.defaults = {};
    this.config(options);
    this.open = (content, duration) => {
      return this._open(null, content, duration);
    };
    this.success = (content, duration) => {
      return this._open("success", content, duration);
    };
    this.warning = (content, duration) => {
      return this._open("warning", content, duration);
    };
    this.error = (content, duration) => {
      return this._open("error", content, duration);
    };
    this.loading = (content, duration) => {
      return this._open("loading", content, duration);
    };
  }
  close() {
    var _a;
    this._timer && clearTimeout(this._timer);
    (_a = this._getInstance()) == null ? void 0 : _a.cloasToast();
  }
  config(options) {
    this.defaults = { ...this.defaults, ...options };
  }
  clone() {
    return new ToastManager(this.defaults);
  }
  destroy() {
    this._container && render(null, this._container);
    destroyObject(this);
  }
  isDestroyed() {
    return false;
  }
  install(app, options = {}) {
    const { property, ...others } = options;
    this.config(others);
    app.config.globalProperties[property || "$toast"] = this;
    this._mountedApp = app;
  }
  _getInstance() {
    if (!this._mountedApp) {
      console.warn("[vexip-ui:Toast]: App missing, the plugin maybe not installed.");
      return null;
    }
    if (!this._instance) {
      const vnode = createVNode(Component, null, null);
      this._container = document.createElement("div");
      vnode.appContext = this._mountedApp._context;
      render(vnode, this._container, false);
      document.body.appendChild(this._container.firstElementChild);
      this._instance = vnode.component.proxy;
    }
    return this._instance;
  }
  _open(type, content, _duration) {
    var _a;
    if (!isClient) {
      return noop;
    }
    this._timer && clearTimeout(this._timer);
    const options = typeof content === "string" ? { content, duration: _duration } : content;
    const convenienceOptions = type ? (_a = conveniences[type]) != null ? _a : {} : {};
    const userCloseFn = options.onClose;
    const onClose = () => {
      this._timer && clearTimeout(this._timer);
      if (typeof userCloseFn === "function") {
        return userCloseFn();
      }
    };
    const toast = this._getInstance();
    const item = { ...this.defaults, ...convenienceOptions, ...options, onClose };
    if (item.icon && typeof item.icon !== "function") {
      item.icon = markRaw(item.icon);
    }
    toast == null ? void 0 : toast.openToast(item);
    const duration = typeof item.duration === "number" ? item.duration : 2e3;
    if (duration >= 500) {
      this._timer = setTimeout(() => {
        toast == null ? void 0 : toast.cloasToast();
      }, duration);
    }
    return () => {
      this._timer && clearTimeout(this._timer);
      toast == null ? void 0 : toast.cloasToast();
    };
  }
}
const Toast = new ToastManager();
export { Toast, ToastManager };
