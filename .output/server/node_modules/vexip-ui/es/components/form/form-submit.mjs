import { defineComponent, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot, createTextVNode, toDisplayString, createElementBlock, withModifiers, createCommentVNode } from "vue";
import "../button/index.mjs";
import "../../common/config/src/index.mjs";
import { isPromise } from "@vexip-ui/utils";
import { formSubmitProps } from "./props.mjs";
import { FORM_PROPS, FORM_ACTIONS } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Button from "../button/button.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const _sfc_main = defineComponent({
  name: "FormSubmit",
  components: {
    Button
  },
  props: formSubmitProps,
  emits: [],
  setup(_props) {
    const props = useProps("form-submit", _props, {
      size: null,
      type: "primary",
      label: null,
      dashed: null,
      text: null,
      simple: null,
      ghost: null,
      disabled: null,
      circle: null,
      loadingIcon: null,
      loadingSpin: null,
      icon: null,
      color: null,
      buttonType: null,
      block: null,
      onBeforeSubmit: {
        default: null,
        isFunc: true
      }
    });
    const formProps = inject(FORM_PROPS, {});
    const actions = inject(FORM_ACTIONS, null);
    const loading = ref(false);
    const submit = ref();
    const isNative = computed(() => formProps.method && formProps.action);
    const isInherit = computed(() => !!actions || props.inherit);
    async function handleSubmit() {
      var _a;
      if (props.disabled || !actions)
        return;
      loading.value = true;
      const errors = await actions.validate();
      if (errors.length) {
        emitEvent(props.onError, errors);
      } else {
        let result = true;
        if (typeof props.onBeforeSubmit === "function") {
          result = props.onBeforeSubmit();
          if (isPromise(result)) {
            result = await result;
          }
        }
        if (result !== false) {
          emitEvent(props.onSubmit);
          if (isNative.value) {
            (_a = submit.value) == null ? void 0 : _a.click();
          }
        }
      }
      loading.value = false;
    }
    return {
      props,
      nh: useNameHelper("form"),
      locale: useLocale("form"),
      loading,
      submit,
      isNative,
      isInherit,
      handleSubmit
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Button = resolveComponent("Button");
  return openBlock(), createBlock(_component_Button, {
    inherit: _ctx.isInherit,
    class: normalizeClass(_ctx.nh.be("submit")),
    size: _ctx.props.size,
    type: _ctx.props.type,
    simple: _ctx.props.simple,
    ghost: _ctx.props.ghost,
    dashed: _ctx.props.dashed,
    text: _ctx.props.text,
    disabled: _ctx.props.disabled,
    loading: _ctx.loading,
    circle: _ctx.props.circle,
    "loading-icon": _ctx.props.loadingIcon,
    "loading-spin": _ctx.props.loadingSpin,
    icon: _ctx.props.icon,
    color: _ctx.props.color,
    "button-type": _ctx.props.buttonType,
    block: _ctx.props.block,
    tag: _ctx.props.tag,
    onClick: _ctx.handleSubmit
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.props.label || _ctx.locale.submit), 1)
      ]),
      _ctx.isNative ? (openBlock(), createElementBlock("button", {
        key: 0,
        ref: "submit",
        type: "submit",
        style: { "display": "none" },
        onClick: _cache[0] || (_cache[0] = withModifiers(() => {
        }, ["stop"]))
      }, null, 512)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["inherit", "class", "size", "type", "simple", "ghost", "dashed", "text", "disabled", "loading", "circle", "loading-icon", "loading-spin", "icon", "color", "button-type", "block", "tag", "onClick"]);
}
var FormSubmit = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { FormSubmit as default };
