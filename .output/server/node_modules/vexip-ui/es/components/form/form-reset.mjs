import { defineComponent, inject, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot, createTextVNode, toDisplayString } from "vue";
import "../button/index.mjs";
import "../../common/config/src/index.mjs";
import { isPromise } from "@vexip-ui/utils";
import { formResetProps } from "./props.mjs";
import { FORM_ACTIONS } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Button from "../button/button.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const _sfc_main = defineComponent({
  name: "FormReset",
  components: {
    Button
  },
  props: formResetProps,
  emits: [],
  setup(_props) {
    const props = useProps("formReset", _props, {
      size: null,
      type: "default",
      label: null,
      dashed: null,
      text: null,
      simple: null,
      ghost: null,
      disabled: null,
      loading: null,
      circle: null,
      loadingIcon: null,
      loadingSpin: null,
      icon: null,
      color: null,
      buttonType: null,
      block: null,
      onBeforeReset: {
        default: null,
        isFunc: true
      }
    });
    const actions = inject(FORM_ACTIONS, null);
    const isInherit = computed(() => !!actions || props.inherit);
    async function handleReset() {
      if (props.disabled)
        return;
      let result = true;
      if (typeof props.onBeforeReset === "function") {
        result = props.onBeforeReset();
        if (isPromise(result)) {
          result = await result;
        }
      }
      if (result !== false) {
        actions == null ? void 0 : actions.reset();
        emitEvent(props.onReset);
      }
    }
    return {
      props,
      nh: useNameHelper("form"),
      locale: useLocale("form"),
      isInherit,
      handleReset
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Button = resolveComponent("Button");
  return openBlock(), createBlock(_component_Button, {
    inherit: _ctx.isInherit,
    class: normalizeClass(_ctx.nh.be("reset")),
    size: _ctx.props.size,
    type: _ctx.props.type,
    simple: _ctx.props.simple,
    ghost: _ctx.props.ghost,
    dashed: _ctx.props.dashed,
    text: _ctx.props.text,
    disabled: _ctx.props.disabled,
    loading: _ctx.props.loading,
    circle: _ctx.props.circle,
    "loading-icon": _ctx.props.loadingIcon,
    "loading-spin": _ctx.props.loadingSpin,
    icon: _ctx.props.icon,
    color: _ctx.props.color,
    "button-type": _ctx.props.buttonType,
    block: _ctx.props.block,
    tag: _ctx.props.tag,
    onClick: _ctx.handleReset
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.props.label || _ctx.locale.reset), 1)
      ])
    ]),
    _: 3
  }, 8, ["inherit", "class", "size", "type", "simple", "ghost", "dashed", "text", "disabled", "loading", "circle", "loading-icon", "loading-spin", "icon", "color", "button-type", "block", "tag", "onClick"]);
}
var FormReset = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { FormReset as default };
