import { createApp, markRaw } from "vue";
import Component from "./message.mjs";
import { toNumber, isNull, destroyObject, isClient, noop } from "@vexip-ui/utils";
import { CircleInfo, CircleCheck, CircleExclamation, CircleXmark } from "@vexip-ui/icons";
const conveniences = {
  info: {
    icon: CircleInfo
  },
  success: {
    icon: CircleCheck
  },
  warning: {
    icon: CircleExclamation
  },
  error: {
    icon: CircleXmark
  }
};
const placementWhiteList = ["top", "bottom"];
let count = 1;
function getKey() {
  return `message-${count++}`;
}
class MessageManager {
  constructor(options = {}) {
    options = {
      ...options,
      duration: options.duration ? toNumber(options.duration) : 3e3
    };
    this._instance = null;
    this._innerApp = null;
    this._container = null;
    this.name = "Message";
    this.defaults = {};
    this.config(options);
    this.open = (content, duration) => {
      return this._open(null, content, duration);
    };
    this.info = (content, duration) => {
      return this._open("info", content, duration);
    };
    this.success = (content, duration) => {
      return this._open("success", content, duration);
    };
    this.warning = (content, duration) => {
      return this._open("warning", content, duration);
    };
    this.error = (content, duration) => {
      return this._open("error", content, duration);
    };
  }
  judge(state, success, error, duration) {
    if (state) {
      this.success(success, duration);
    } else {
      this.error(error, duration);
    }
  }
  close(key) {
    if (isNull(key)) {
      this.clear();
    } else {
      this._getInstance().remove(key);
    }
  }
  config({ placement, ...others }) {
    if (placement) {
      this._getInstance().placement = placementWhiteList.includes(placement) ? placement : placementWhiteList[0];
    }
    this.defaults = { ...this.defaults, ...others };
  }
  clone() {
    return new MessageManager(this.defaults);
  }
  clear() {
    this._getInstance().clear();
  }
  destroy() {
    var _a;
    (_a = this._innerApp) == null ? void 0 : _a.unmount();
    destroyObject(this);
  }
  isDestroyed() {
    return false;
  }
  install(app, options = {}) {
    const { property, ...others } = options;
    this.config(others);
    app.config.globalProperties[property || "$message"] = this;
  }
  _getInstance() {
    if (!this._instance) {
      this._container = document.createElement("div");
      this._innerApp = createApp(Component);
      this._instance = this._innerApp.mount(this._container);
      document.body.appendChild(this._container.firstElementChild);
    }
    return this._instance;
  }
  _open(type, content, _duration) {
    var _a, _b;
    if (!isClient) {
      return noop;
    }
    const options = typeof content === "string" ? { content, duration: _duration } : content;
    const key = (_a = options.key) != null ? _a : getKey();
    const message = this._getInstance();
    const convenienceOptions = type ? (_b = conveniences[type]) != null ? _b : {} : {};
    let timer;
    const userCloseFn = options.onClose;
    const onClose = () => {
      clearTimeout(timer);
      if (typeof userCloseFn === "function") {
        return userCloseFn();
      }
    };
    const item = Object.assign({}, this.defaults, convenienceOptions, options, {
      key,
      type,
      onClose
    });
    if (item.icon && typeof item.icon !== "function") {
      item.icon = markRaw(item.icon);
    }
    message.add(item);
    const duration = typeof item.duration === "number" ? item.duration : 3e3;
    if (duration >= 500) {
      timer = setTimeout(() => {
        message.remove(key);
      }, duration);
    }
    return () => {
      clearTimeout(timer);
      message.remove(key);
    };
  }
}
const Message = new MessageManager();
export { Message, MessageManager };
