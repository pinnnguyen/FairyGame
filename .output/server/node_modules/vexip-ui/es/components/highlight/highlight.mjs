import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, Fragment, renderList, renderSlot, createTextVNode, toDisplayString } from "vue";
import "../../common/config/src/index.mjs";
import { highlightProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Highlight",
  props: highlightProps,
  setup(_props) {
    const props = useProps("highlight", _props, {
      content: {
        default: "",
        static: true
      },
      keyWords: {
        default: () => [],
        static: true
      },
      ignoreCase: false
    });
    const nh = useNameHelper("highlight");
    const splitRE = computed(() => {
      var _a;
      const keyWords = (_a = props.keyWords) == null ? void 0 : _a.filter(Boolean);
      if (!(keyWords == null ? void 0 : keyWords.length)) {
        return null;
      }
      return new RegExp(
        `(${keyWords.sort((p, n) => n.length - p.length).join("|")})`,
        `${props.ignoreCase ? "i" : ""}g`
      );
    });
    const renderTexts = computed(() => {
      if (!splitRE.value || !props.content) {
        return [{ isKey: false, text: props.content }];
      }
      return props.content.split(splitRE.value).map((text) => {
        return { isKey: splitRE.value.test(text), text };
      });
    });
    return {
      nh,
      props,
      renderTexts
    };
  }
});
const _hoisted_1 = { key: 1 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.nh.b(), _ctx.nh.bs("vars"), _ctx.props.inherit && _ctx.nh.bm("inherit")])
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.renderTexts, (item, index) => {
      return openBlock(), createElementBlock(Fragment, { key: index }, [
        item.isKey ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("key-word"))
        }, [
          renderSlot(_ctx.$slots, "light", {
            text: item.text
          }, () => [
            createTextVNode(toDisplayString(item.text), 1)
          ])
        ], 2)) : (openBlock(), createElementBlock("span", _hoisted_1, [
          renderSlot(_ctx.$slots, "default", {
            text: item.text
          }, () => [
            createTextVNode(toDisplayString(item.text), 1)
          ])
        ]))
      ], 64);
    }), 128))
  ], 2);
}
var Highlight = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Highlight as default };
