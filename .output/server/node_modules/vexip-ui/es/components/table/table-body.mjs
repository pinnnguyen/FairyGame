import { defineComponent, inject, computed, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, Fragment, renderList, createBlock, withCtx, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import TableCell from "./table-cell.mjs";
import TableRow from "./table-row.mjs";
import "../../common/config/src/index.mjs";
import { TABLE_STORE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TableBody",
  components: {
    TableCell,
    TableRow
  },
  props: {
    fixed: {
      type: String,
      default: null,
      validator: (value) => {
        return value === "left" || value === "right";
      }
    }
  },
  setup(props) {
    const { state, getters } = inject(TABLE_STORE);
    const currentColumns = computed(() => {
      if (props.fixed === "left") {
        return state.leftFixedColumns;
      }
      if (props.fixed === "right") {
        return state.rightFixedColumns;
      }
      return state.columns;
    });
    const renderData = computed(() => state.virtual ? state.virtualData : getters.processedData);
    const style = computed(() => {
      const { widths, totalHeight } = state;
      const columns = currentColumns.value;
      let width = 0;
      for (let i = 0, len = columns.length; i < len; ++i) {
        const column = columns[i];
        const key = column.key;
        const columnWidth = widths[key];
        width += columnWidth;
      }
      return {
        minWidth: `${width}px`,
        minHeight: `${totalHeight}px`
      };
    });
    const listStyle = computed(() => {
      return {
        transform: state.virtual ? `translate3d(0, ${state.padTop}px, 0)` : void 0
      };
    });
    const emptyStyle = computed(() => {
      const { rowHeight, rowMinHeight } = state;
      return {
        minHeight: `${rowHeight || rowMinHeight}px`
      };
    });
    return {
      nh: useNameHelper("table"),
      emptyText: toRef(state, "emptyText"),
      currentColumns,
      style,
      listStyle,
      emptyStyle,
      renderData
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_TableCell = resolveComponent("TableCell");
  const _component_TableRow = resolveComponent("TableRow");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.nh.be("body")),
    role: "rowgroup",
    style: normalizeStyle(_ctx.style)
  }, [
    _ctx.renderData.length ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(_ctx.nh.be("row-list")),
      style: normalizeStyle(_ctx.listStyle)
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.renderData, (row) => {
        return openBlock(), createBlock(_component_TableRow, {
          key: row.index,
          row,
          index: row.index,
          "is-fixed": !!_ctx.fixed
        }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.currentColumns, (column, columnIndex) => {
              return openBlock(), createBlock(_component_TableCell, {
                key: columnIndex,
                row,
                "row-index": row.index,
                column,
                "column-index": columnIndex
              }, null, 8, ["row", "row-index", "column", "column-index"]);
            }), 128))
          ]),
          _: 2
        }, 1032, ["row", "index", "is-fixed"]);
      }), 128))
    ], 6)) : (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(_ctx.nh.be("empty")),
      style: normalizeStyle(_ctx.emptyStyle)
    }, [
      renderSlot(_ctx.$slots, "empty", {
        isFixed: !!_ctx.fixed
      }, () => [
        !_ctx.fixed ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString(_ctx.emptyText), 1)
        ], 64)) : createCommentVNode("", true)
      ])
    ], 6))
  ], 6);
}
var TableBody = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TableBody as default };
