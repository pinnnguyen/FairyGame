import { defineComponent, inject, reactive, watch, onBeforeUnmount } from "vue";
import "../../common/config/src/index.mjs";
import { isNull } from "@vexip-ui/utils";
import { tableColumnProps } from "./props.mjs";
import { TABLE_ACTION } from "./symbol.mjs";
import { useProps, createSizeProp } from "../../common/config/src/props.mjs";
const propKeys = Object.keys(tableColumnProps);
const aliases = {
  idKey: "key"
};
const deepProps = ["className", "style", "attrs", "filter", "sorter", "metaData"];
const columnTypes = ["order", "selection", "expand"];
var TableColumn = defineComponent({
  name: "TableColumn",
  props: tableColumnProps,
  setup(_props, { slots }) {
    const props = useProps("tableColumn", _props, {
      idKey: {
        default: null,
        validator: (value) => !isNull(value),
        static: true
      },
      name: {
        default: "",
        static: true
      },
      accessor: {
        default: null,
        isFunc: true,
        static: true
      },
      fixed: {
        default: false,
        static: true
      },
      className: null,
      style: null,
      attrs: null,
      type: {
        default: null,
        validator: (value) => columnTypes.includes(value),
        static: true
      },
      width: null,
      filter: () => ({}),
      sorter: false,
      renderer: {
        default: null,
        isFunc: true,
        static: true
      },
      headRenderer: {
        default: null,
        isFunc: true,
        static: true
      },
      order: {
        default: 0,
        static: true
      },
      noEllipsis: false,
      checkboxSize: createSizeProp(),
      disableRow: {
        default: null,
        isFunc: true
      },
      truthIndex: false,
      orderLabel: {
        default: null,
        isFunc: true
      },
      metaData: {
        default: () => ({}),
        validator: (value) => !isNull(value)
      }
    });
    const tableAction = inject(TABLE_ACTION, null);
    const options = reactive({});
    for (const key of propKeys) {
      if (key === "renderer" || key === "headRenderer")
        continue;
      const aliasKey = aliases[key] || key;
      options[aliasKey] = props[key];
      if (key === "idKey") {
        watch(
          () => props[key],
          (value) => {
            if (isNull(value) && props.type) {
              options[aliasKey] = value = `__vxp_${props.type}`;
            } else {
              options[aliasKey] = value;
            }
          }
        );
      } else {
        watch(
          () => props[key],
          (value) => {
            options[aliasKey] = value;
          },
          { deep: deepProps.includes(key) }
        );
      }
    }
    watch(() => slots.default, setRenderer);
    watch(() => props.renderer, setRenderer);
    watch(() => slots.head, setHeadRenderer);
    watch(() => props.headRenderer, setHeadRenderer);
    setRenderer();
    setHeadRenderer();
    tableAction == null ? void 0 : tableAction.increaseColumn(options);
    onBeforeUnmount(() => {
      tableAction == null ? void 0 : tableAction.decreaseColumn(options);
    });
    function setRenderer() {
      options.renderer = (data) => {
        if (typeof slots.default === "function") {
          return slots.default(data);
        }
        if (typeof props.renderer === "function") {
          return props.renderer(data);
        }
        const row = data.row;
        const rowIndex = data.rowIndex;
        if (typeof props.accessor === "function") {
          const result2 = props.accessor(row, rowIndex);
          return isNull(result2) ? "" : String(result2);
        }
        const result = row[options.key];
        return isNull(result) ? "" : String(result);
      };
    }
    function setHeadRenderer() {
      options.headRenderer = (data) => {
        if (typeof slots.head === "function") {
          return slots.head(data);
        }
        if (typeof props.headRenderer === "function") {
          return props.headRenderer(data);
        }
        return props.name;
      };
    }
    return () => null;
  }
});
export { TableColumn as default };
