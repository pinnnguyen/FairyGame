import { defineComponent, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, withCtx, Fragment, renderList, createBlock } from "vue";
import TableHeadCell from "./table-head-cell.mjs";
import TableRow from "./table-row.mjs";
import "../../common/config/src/index.mjs";
import { TABLE_STORE, TABLE_HEAD_KEY } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TableHead",
  components: {
    TableHeadCell,
    TableRow
  },
  props: {
    fixed: {
      type: String,
      default: null,
      validator: (value) => {
        return value === "left" || value === "right";
      }
    }
  },
  setup(props) {
    const { state } = inject(TABLE_STORE);
    const currentColumns = computed(() => {
      if (props.fixed === "left") {
        return state.leftFixedColumns;
      }
      if (props.fixed === "right") {
        return state.rightFixedColumns;
      }
      return state.columns;
    });
    const style = computed(() => {
      const widths = state.widths;
      const columns = currentColumns.value;
      let width = 0;
      for (let i = 0, len = columns.length; i < len; ++i) {
        const column = columns[i];
        const key = column.key;
        const columnWidth = widths[key];
        width += columnWidth;
      }
      return {
        minWidth: `${width}px`
      };
    });
    const headRow = computed(() => state.dataMap[TABLE_HEAD_KEY] || { key: TABLE_HEAD_KEY });
    return {
      nh: useNameHelper("table"),
      currentColumns,
      style,
      headRow
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_TableHeadCell = resolveComponent("TableHeadCell");
  const _component_TableRow = resolveComponent("TableRow");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.nh.be("head")),
    role: "rowgroup",
    style: normalizeStyle(_ctx.style)
  }, [
    createVNode(_component_TableRow, {
      "is-head": "",
      row: _ctx.headRow
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.currentColumns, (item, index) => {
          return openBlock(), createBlock(_component_TableHeadCell, {
            key: index,
            column: item,
            index
          }, null, 8, ["column", "index"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["row"])
  ], 6);
}
var TableHead = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TableHead as default };
