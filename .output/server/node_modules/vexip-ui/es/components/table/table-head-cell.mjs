import { defineComponent, inject, ref, computed, onMounted, toRef, resolveComponent, openBlock, createElementBlock, mergeProps, createBlock, normalizeClass, withModifiers, Fragment, createTextVNode, toDisplayString, createElementVNode, createVNode, withCtx, createCommentVNode, createSlots, renderList } from "vue";
import "../button/index.mjs";
import "../checkbox/index.mjs";
import "../icon/index.mjs";
import "../renderer/index.mjs";
import "../tooltip/index.mjs";
import "../../common/config/src/index.mjs";
import { isFunction } from "@vexip-ui/utils";
import { CaretUp, CaretDown, Filter } from "@vexip-ui/icons";
import { TABLE_STORE, TABLE_ACTION } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Button from "../button/button.mjs";
import Checkbox from "../checkbox/checkbox.mjs";
import Icon from "../icon/icon.mjs";
import Renderer from "../renderer/renderer.mjs";
import Tooltip from "../tooltip/tooltip.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const columnTypes = ["order", "selection", "expand"];
const _sfc_main = defineComponent({
  name: "TableHeadCell",
  components: {
    Button,
    Checkbox,
    Icon,
    Renderer,
    Tooltip,
    CaretUp,
    CaretDown,
    Filter
  },
  props: {
    column: {
      type: Object,
      default: () => ({})
    },
    index: {
      type: Number,
      default: -1
    }
  },
  setup(props) {
    const { state, getters, mutations } = inject(TABLE_STORE);
    const tableAction = inject(TABLE_ACTION);
    const nh = useNameHelper("table");
    const filterVisible = ref(false);
    const wrapper = ref();
    const className = computed(() => {
      let customClass = null;
      if (typeof state.headClass === "function") {
        customClass = state.headClass(props.column, props.index);
      } else {
        customClass = state.headClass;
      }
      return [
        nh.be("head-cell"),
        {
          [nh.bem("head-cell", "center")]: columnTypes.includes(props.column.type)
        },
        props.column.className || null,
        customClass
      ];
    });
    const style = computed(() => {
      var _a;
      const width = state.widths[props.column.key];
      let customStyle = "";
      if (typeof state.headStyle === "function") {
        customStyle = state.headStyle(props.column, props.index);
      } else {
        customStyle = state.headStyle;
      }
      return [
        {
          flex: `${width} 0 auto`,
          width: `${(_a = props.column.width) != null ? _a : width}px`,
          maxWidth: `${props.column.width}px`
        },
        props.column.style || "",
        customStyle
      ];
    });
    const attrs = computed(() => {
      let customAttrs;
      if (typeof state.headAttrs === "function") {
        customAttrs = state.headAttrs(props.column, props.index);
      } else {
        customAttrs = state.headAttrs;
      }
      return { ...props.column.attrs || {}, ...customAttrs || {} };
    });
    const sorter = computed(() => {
      return state.sorters[props.column.key] || {};
    });
    const filter = computed(() => {
      return state.filters[props.column.key] || {};
    });
    const hasFilterActive = computed(() => {
      var _a;
      const options = (_a = filter.value.options) != null ? _a : [];
      for (let i = 0, len = options.length; i < len; ++i) {
        if (options[i].active) {
          return true;
        }
      }
      return false;
    });
    const checkboxDisabled = computed(() => {
      if (!isSelection(props.column)) {
        return false;
      }
      const records = Object.values(getters.disableCheckRows);
      return getters.processedData.length === records.length && !Object.values(getters.disableCheckRows).includes(false);
    });
    onMounted(() => {
      setTimeout(() => {
        if (wrapper.value) {
          mutations.setColumnWidth(props.column.key, wrapper.value.getBoundingClientRect().width);
        }
      }, 0);
    });
    function isSelection(column) {
      return column.type === "selection";
    }
    function buildEventPayload(event) {
      return {
        column: props.column,
        index: props.index,
        event
      };
    }
    function handleMouseEnter(event) {
      if (tableAction) {
        tableAction.emitHeadEnter(buildEventPayload(event));
      }
    }
    function handleMouseLeave(event) {
      if (tableAction) {
        tableAction.emitHeadLeave(buildEventPayload(event));
      }
    }
    function handleClick(event) {
      if (tableAction) {
        tableAction.emitHeadClick(buildEventPayload(event));
      }
    }
    function handleDblclick(event) {
      if (tableAction) {
        tableAction.emitHeadDblclick(buildEventPayload(event));
      }
    }
    function handleContextmenu(event) {
      if (tableAction) {
        tableAction.emitHeadContextmenu(buildEventPayload(event));
      }
    }
    function handleSortAsc() {
      const key = props.column.key;
      const type = sorter.value.type === "asc" ? null : "asc";
      mutations.handleSort(key, type);
      tableAction.emitRowSort();
    }
    function handleSortDesc() {
      const key = props.column.key;
      const type = sorter.value.type === "desc" ? null : "desc";
      mutations.handleSort(key, type);
      tableAction.emitRowSort();
    }
    function handleFilterItemSelect(value, active) {
      mutations.toggleFilterItemActive({
        key: props.column.key,
        value,
        active,
        disableOthers: true
      });
      mutations.handleFilter(props.column.key, value);
      filterVisible.value = false;
      tableAction.emitRowFilter();
    }
    function handleFilterCheck(value, checked) {
      mutations.toggleFilterItemActive({
        key: props.column.key,
        value,
        active: checked
      });
    }
    function handleFilterMutiple() {
      var _a;
      const options = (_a = filter.value.options) != null ? _a : [];
      const activeValues = [];
      for (let i = 0, len = options.length; i < len; ++i) {
        const option = options[i];
        if (option.active) {
          activeValues.push(option.value);
        }
      }
      mutations.handleFilter(props.column.key, activeValues);
      filterVisible.value = false;
      tableAction.emitRowFilter();
    }
    function handleResetFilter() {
      filterVisible.value = false;
      mutations.handleFilter(props.column.key, null);
      mutations.toggleFilterItemActive({
        key: props.column.key,
        value: null,
        disableOthers: true
      });
      tableAction.emitRowFilter();
    }
    function handleCheckAllRow() {
      mutations.handleCheckAll();
      tableAction.emitAllRowCheck(state.checkedAll, state.partial);
    }
    return {
      nh,
      locale: useLocale("table"),
      filterVisible,
      checkedAll: toRef(state, "checkedAll"),
      partial: toRef(state, "partial"),
      className,
      style,
      attrs,
      sorter,
      filter,
      hasFilterActive,
      checkboxDisabled,
      wrapper,
      isFunction,
      isSelection,
      handleMouseEnter,
      handleMouseLeave,
      handleClick,
      handleDblclick,
      handleContextmenu,
      handleSortAsc,
      handleSortDesc,
      handleFilterItemSelect,
      handleFilterCheck,
      handleFilterMutiple,
      handleResetFilter,
      handleCheckAllRow
    };
  }
});
const _hoisted_1 = ["aria-sort"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Checkbox = resolveComponent("Checkbox");
  const _component_Renderer = resolveComponent("Renderer");
  const _component_CaretUp = resolveComponent("CaretUp");
  const _component_Icon = resolveComponent("Icon");
  const _component_CaretDown = resolveComponent("CaretDown");
  const _component_Filter = resolveComponent("Filter");
  const _component_Button = resolveComponent("Button");
  const _component_Tooltip = resolveComponent("Tooltip");
  return openBlock(), createElementBlock("div", mergeProps({
    ref: "wrapper",
    class: _ctx.className,
    role: "columnheader",
    style: _ctx.style,
    "aria-sort": _ctx.sorter.type ? _ctx.sorter.type === "asc" ? "ascending" : "descending" : "none"
  }, _ctx.attrs, {
    onMouseenter: _cache[5] || (_cache[5] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),
    onMouseleave: _cache[6] || (_cache[6] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),
    onClick: _cache[7] || (_cache[7] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),
    onDblclick: _cache[8] || (_cache[8] = (...args) => _ctx.handleDblclick && _ctx.handleDblclick(...args)),
    onContextmenu: _cache[9] || (_cache[9] = (...args) => _ctx.handleContextmenu && _ctx.handleContextmenu(...args))
  }), [
    _ctx.isSelection(_ctx.column) ? (openBlock(), createBlock(_component_Checkbox, {
      key: 0,
      inherit: "",
      control: "",
      class: normalizeClass(_ctx.nh.be("selection")),
      checked: _ctx.checkedAll,
      partial: _ctx.partial,
      disabled: _ctx.checkboxDisabled,
      size: _ctx.column.checkboxSize || "default",
      onClick: withModifiers(_ctx.handleCheckAllRow, ["prevent"])
    }, null, 8, ["class", "checked", "partial", "disabled", "size", "onClick"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
      _ctx.isFunction(_ctx.column.headRenderer) ? (openBlock(), createBlock(_component_Renderer, {
        key: 0,
        renderer: _ctx.column.headRenderer,
        data: { column: _ctx.column, index: _ctx.index }
      }, null, 8, ["renderer", "data"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createTextVNode(toDisplayString(_ctx.column.name), 1)
      ], 64))
    ], 64)),
    _ctx.sorter.able ? (openBlock(), createElementBlock("div", {
      key: 2,
      class: normalizeClass(_ctx.nh.be("sorter"))
    }, [
      createElementVNode("span", {
        class: normalizeClass({
          [_ctx.nh.bem("sorter", "asc")]: true,
          [_ctx.nh.bem("sorter", "active")]: _ctx.sorter.type === "asc"
        }),
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleSortAsc())
      }, [
        createVNode(_component_Icon, null, {
          default: withCtx(() => [
            createVNode(_component_CaretUp)
          ]),
          _: 1
        })
      ], 2),
      createElementVNode("span", {
        class: normalizeClass({
          [_ctx.nh.bem("sorter", "desc")]: true,
          [_ctx.nh.bem("sorter", "active")]: _ctx.sorter.type === "desc"
        }),
        onClick: _cache[1] || (_cache[1] = ($event) => _ctx.handleSortDesc())
      }, [
        createVNode(_component_Icon, null, {
          default: withCtx(() => [
            createVNode(_component_CaretDown)
          ]),
          _: 1
        })
      ], 2)
    ], 2)) : createCommentVNode("", true),
    _ctx.filter.able ? (openBlock(), createBlock(_component_Tooltip, {
      key: 3,
      visible: _ctx.filterVisible,
      "onUpdate:visible": _cache[4] || (_cache[4] = ($event) => _ctx.filterVisible = $event),
      transfer: "",
      placement: "bottom",
      trigger: "click",
      class: normalizeClass({
        [_ctx.nh.be("filter")]: true,
        [_ctx.nh.bem("filter", "visible")]: _ctx.filterVisible,
        [_ctx.nh.bem("filter", "active")]: _ctx.filter.active
      }),
      "tip-class": {
        [_ctx.nh.be("filter-wrapper")]: true,
        [_ctx.nh.bs("vars")]: true,
        [_ctx.nh.bem("filter-wrapper", "multiple")]: _ctx.filter.multiple
      }
    }, createSlots({
      trigger: withCtx(() => [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("filter-trigger"))
        }, [
          createVNode(_component_Icon, null, {
            default: withCtx(() => [
              createVNode(_component_Filter)
            ]),
            _: 1
          })
        ], 2)
      ]),
      _: 2
    }, [
      _ctx.filter.multiple ? {
        name: "default",
        fn: withCtx(() => [
          createElementVNode("div", {
            vertical: "",
            class: normalizeClass(_ctx.nh.be("filter-group"))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filter.options, (item) => {
              return openBlock(), createBlock(_component_Checkbox, {
                key: item.value,
                inherit: "",
                checked: item.active,
                label: item.label,
                value: item.value,
                onChange: ($event) => _ctx.handleFilterCheck(item.value, $event)
              }, null, 8, ["checked", "label", "value", "onChange"]);
            }), 128))
          ], 2),
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("filter-actions"))
          }, [
            createVNode(_component_Button, {
              inherit: "",
              text: "",
              size: "small",
              disabled: !_ctx.hasFilterActive,
              onClick: _cache[2] || (_cache[2] = ($event) => _ctx.handleFilterMutiple())
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.locale.filterConfirm), 1)
              ]),
              _: 1
            }, 8, ["disabled"]),
            createVNode(_component_Button, {
              inherit: "",
              text: "",
              size: "small",
              onClick: _ctx.handleResetFilter
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.locale.filterReset), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ], 2)
        ]),
        key: "0"
      } : {
        name: "default",
        fn: withCtx(() => [
          createElementVNode("div", {
            class: normalizeClass({
              [_ctx.nh.be("filter-item")]: true,
              [_ctx.nh.bem("filter-item", "active")]: !_ctx.filter.active
            }),
            onClick: _cache[3] || (_cache[3] = (...args) => _ctx.handleResetFilter && _ctx.handleResetFilter(...args))
          }, toDisplayString(_ctx.locale.filterAll), 3),
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filter.options, (item) => {
            return openBlock(), createElementBlock("div", {
              key: item.value,
              class: normalizeClass({
                [_ctx.nh.be("filter-item")]: true,
                [_ctx.nh.bem("filter-item", "active")]: item.active
              }),
              onClick: ($event) => _ctx.handleFilterItemSelect(item.value, !item.active)
            }, toDisplayString(item.label), 11, ["onClick"]);
          }), 128))
        ]),
        key: "1"
      }
    ]), 1032, ["visible", "class", "tip-class"])) : createCommentVNode("", true)
  ], 16, _hoisted_1);
}
var TableHeadCell = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TableHeadCell as default };
