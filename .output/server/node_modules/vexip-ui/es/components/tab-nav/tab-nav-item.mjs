import { defineComponent, inject, ref, computed, watch, reactive, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withKeys, withModifiers, createBlock, createCommentVNode, renderSlot, createTextVNode, toDisplayString, createVNode, withCtx } from "vue";
import "../icon/index.mjs";
import "../../common/config/src/index.mjs";
import { Xmark } from "@vexip-ui/icons";
import { isDefined } from "@vexip-ui/utils";
import { TAB_NAV_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import { eventProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TabNavItem",
  components: {
    Icon,
    Xmark
  },
  props: {
    label: {
      type: [String, Number],
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    icon: {
      type: Object,
      default: null
    },
    closable: {
      type: Boolean,
      default: null
    },
    onToggle: eventProp()
  },
  emits: [],
  setup(props) {
    const tabNavState = inject(TAB_NAV_STATE, null);
    const nh = useNameHelper("tab-nav");
    const active = ref(false);
    const currentLabel = ref(props.label);
    const index = ref(0);
    const total = ref(0);
    const wrapper = ref();
    const contentClass = computed(() => {
      const baseClass = nh.be("content");
      return {
        [baseClass]: true,
        [`${baseClass}--disabled`]: props.disabled,
        [`${baseClass}--active`]: !props.disabled && active.value
      };
    });
    const isClosable = computed(() => {
      var _a;
      if (isDefined(props.closable)) {
        return props.closable;
      }
      return (_a = tabNavState == null ? void 0 : tabNavState.closable) != null ? _a : false;
    });
    watch(
      () => props.label,
      (value) => {
        currentLabel.value = value;
        tabNavState == null ? void 0 : tabNavState.refreshLabels();
      }
    );
    watch(active, (value) => {
      emitEvent(props.onToggle, value);
    });
    if (tabNavState) {
      const state = reactive({
        el: wrapper,
        label: currentLabel,
        index,
        total
      });
      watch(currentLabel, () => {
        active.value = currentLabel.value === tabNavState.currentActive;
      });
      watch(
        () => tabNavState.currentActive,
        (value) => {
          active.value = currentLabel.value === value;
        },
        { immediate: true }
      );
      tabNavState.increaseItem(state);
      onBeforeUnmount(() => {
        tabNavState.decreaseItem(state);
      });
    }
    function handleSelect() {
      if (props.disabled) {
        return;
      }
      tabNavState == null ? void 0 : tabNavState.handleActive(currentLabel.value);
    }
    function handleClose() {
      if (props.disabled) {
        return;
      }
      tabNavState == null ? void 0 : tabNavState.handleClose(currentLabel.value);
    }
    return {
      nh,
      index,
      total,
      contentClass,
      isClosable,
      wrapper,
      handleSelect,
      handleClose
    };
  }
});
const _hoisted_1 = ["aria-disabled", "aria-setsize", "aria-posinset"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Icon = resolveComponent("Icon");
  const _component_Xmark = resolveComponent("Xmark");
  return openBlock(), createElementBlock("li", {
    ref: "wrapper",
    class: normalizeClass(_ctx.nh.be("item")),
    role: "none"
  }, [
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("pad"))
    }, null, 2),
    createElementVNode("div", {
      class: normalizeClass(_ctx.contentClass),
      role: "tab",
      tabindex: "0",
      "aria-disabled": _ctx.disabled,
      "aria-setsize": _ctx.total || void 0,
      "aria-posinset": _ctx.index || void 0,
      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleSelect && _ctx.handleSelect(...args)),
      onKeydown: _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => _ctx.handleSelect && _ctx.handleSelect(...args), ["stop"]), ["enter"]))
    }, [
      _ctx.icon ? (openBlock(), createBlock(_component_Icon, {
        key: 0,
        class: normalizeClass(_ctx.nh.be("icon")),
        icon: _ctx.icon
      }, null, 8, ["class", "icon"])) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.label), 1)
      ]),
      _ctx.isClosable ? (openBlock(), createElementBlock("button", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("close")),
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.handleClose && _ctx.handleClose(...args), ["stop"]))
      }, [
        createVNode(_component_Icon, null, {
          default: withCtx(() => [
            createVNode(_component_Xmark)
          ]),
          _: 1
        })
      ], 2)) : createCommentVNode("", true)
    ], 42, _hoisted_1)
  ], 2);
}
var TabNavItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TabNavItem as default };
