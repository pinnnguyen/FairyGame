import { defineComponent, inject, ref, computed, createVNode } from "vue";
import "../badge/index.mjs";
import "../collapse-transition/index.mjs";
import "../icon/index.mjs";
import { FIELD_OPTIONS } from "../form/symbol.mjs";
import "../../common/config/src/index.mjs";
import { Spinner } from "@vexip-ui/icons";
import { parseColorToRgba, mixColor, adjustAlpha } from "@vexip-ui/utils";
import { buttonProps } from "./props.mjs";
import { buttonTypes, GROUP_STATE } from "./symbol.mjs";
import { useProps, createSizeProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import Icon from "../icon/icon.mjs";
import CollapseTransition from "../collapse/collapse-transition.mjs";
import Badge from "../badge/badge.mjs";
var Button = defineComponent({
  name: "Button",
  props: buttonProps,
  emits: [],
  setup(_props, {
    slots
  }) {
    const fieldActions = inject(FIELD_OPTIONS, null);
    const props = useProps("button", _props, {
      size: createSizeProp(fieldActions ? fieldActions.size : void 0),
      type: {
        default: null,
        validator: (value) => buttonTypes.includes(value)
      },
      dashed: false,
      text: false,
      simple: false,
      ghost: false,
      disabled: () => fieldActions ? fieldActions.disabled.value : false,
      loading: () => fieldActions ? fieldActions.loading.value : false,
      circle: false,
      loadingIcon: Spinner,
      loadingSpin: false,
      icon: null,
      color: null,
      buttonType: {
        default: "button",
        validator: (value) => ["button", "submit", "reset"].includes(value)
      },
      block: false,
      tag: "button",
      noPulse: false,
      badge: null
    });
    const groupState = inject(GROUP_STATE, null);
    const nh = useNameHelper("button");
    const pulsing = ref(false);
    const isIconOnly = computed(() => {
      return !slots.default;
    });
    const type = computed(() => {
      var _a, _b;
      return (_b = (_a = props.type) != null ? _a : groupState == null ? void 0 : groupState.type) != null ? _b : "default";
    });
    const size = computed(() => {
      var _a;
      return (_a = groupState == null ? void 0 : groupState.size) != null ? _a : props.size;
    });
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(type.value)]: type.value !== "default",
        [nh.bm("simple")]: !props.ghost && props.simple,
        [nh.bm("ghost")]: props.ghost,
        [nh.bm("text")]: props.text,
        [nh.bm("dashed")]: props.dashed,
        [nh.bm("disabled")]: props.disabled,
        [nh.bm("loading")]: props.loading,
        [nh.bm("circle")]: props.circle,
        [nh.bm("icon-only")]: isIconOnly.value,
        [nh.bm(size.value)]: size.value !== "default",
        [nh.bm("pulsing")]: pulsing.value
      };
    });
    const colorMap = computed(() => {
      if (props.color) {
        const rootStyle = getComputedStyle(document.documentElement);
        const black = parseColorToRgba(rootStyle.getPropertyValue(nh.nv("color-black")) || "#000");
        const white = parseColorToRgba(rootStyle.getPropertyValue(nh.nv("color-white")) || "#fff");
        const baseColor = parseColorToRgba(props.color);
        return {
          base: baseColor.toString(),
          light2: mixColor(white, baseColor, 0.2).toString(),
          dark1: mixColor(black, baseColor, 0.1).toString(),
          opacity1: adjustAlpha(baseColor, 0.9).toString(),
          opacity3: adjustAlpha(baseColor, 0.7).toString(),
          opacity4: adjustAlpha(baseColor, 0.6).toString(),
          opacity7: adjustAlpha(baseColor, 0.3).toString(),
          opacity8: adjustAlpha(baseColor, 0.2).toString(),
          white8: adjustAlpha(white, 0.2).toString(),
          white9: adjustAlpha(white, 0.1).toString()
        };
      }
      return null;
    });
    const style = computed(() => {
      if (colorMap.value) {
        const {
          base,
          light2,
          dark1,
          opacity1,
          opacity3,
          opacity4,
          opacity7,
          opacity8,
          white8,
          white9
        } = colorMap.value;
        const {
          cvm,
          gnv
        } = nh;
        if (props.ghost) {
          return cvm({
            color: base,
            "color-hover": base,
            "color-focus": base,
            "color-active": base,
            "color-disabled": base,
            "bg-color": "transparent",
            "bg-color-hover": white9,
            "bg-color-focus": white9,
            "bg-color-active": white8,
            "bg-color-disabled": "transparent",
            "b-color": base,
            "b-color-hover": light2,
            "b-color-focus": light2,
            "b-color-active": dark1,
            "b-color-disabled": gnv("content-color-disabled"),
            "pulse-s-color": dark1
          });
        }
        if (props.simple) {
          return cvm({
            color: base,
            "color-hover": base,
            "color-focus": gnv("color-white"),
            "color-active": gnv("color-white"),
            "color-disabled": gnv("content-color-disabled"),
            "bg-color": opacity8,
            "bg-color-hover": opacity7,
            "bg-color-focus": opacity1,
            "bg-color-active": opacity1,
            "bg-color-disabled": gnv("fill-color-background"),
            "b-color": opacity4,
            "b-color-hover": opacity4,
            "b-color-focus": opacity3,
            "b-color-active": opacity3,
            "b-color-disabled": gnv("border-color-light-1"),
            "pulse-s-color": dark1
          });
        }
        if (props.text || props.dashed) {
          return cvm({
            ...props.dashed ? {
              "b-color": base,
              "b-color-hover": light2,
              "b-color-focus": light2,
              "b-color-active": dark1,
              "pulse-s-color": dark1
            } : {},
            color: base,
            "color-hover": light2,
            "color-focus": light2,
            "color-active": dark1,
            "color-disabled": opacity4
          });
        }
        return cvm({
          color: gnv("color-white"),
          "color-hover": gnv("color-white"),
          "color-focus": gnv("color-white"),
          "color-active": gnv("color-white"),
          "color-disabled": gnv("content-color-disabled"),
          "bg-color": base,
          "bg-color-hover": light2,
          "bg-color-focus": light2,
          "bg-color-active": dark1,
          "bg-color-disabled": gnv("fill-color-background"),
          "b-color": base,
          "b-color-hover": light2,
          "b-color-focus": light2,
          "b-color-active": dark1,
          "b-color-disabled": gnv("border-color-light-1"),
          "pulse-s-color": dark1
        });
      }
      return {};
    });
    function handleClick(event) {
      if (props.disabled || props.loading || event.button)
        return;
      if (!props.noPulse) {
        pulsing.value = false;
        requestAnimationFrame(() => {
          pulsing.value = true;
        });
      }
      emitEvent(props.onClick, event);
    }
    function handleAnimationEnd() {
      pulsing.value = false;
    }
    function renderLoadingIcon() {
      return createVNode("div", {
        "class": [nh.be("icon"), nh.bem("icon", "loading")]
      }, [slots.loading ? slots.loading() : props.loadingSpin ? createVNode(Icon, {
        "spin": true,
        "icon": props.loadingIcon
      }, null) : createVNode(Icon, {
        "pulse": true,
        "icon": props.loadingIcon
      }, null)]);
    }
    function renderSingleIcon() {
      return props.loading ? renderLoadingIcon() : createVNode("div", {
        "class": nh.be("icon")
      }, [slots.icon ? slots.icon() : props.icon ? createVNode(Icon, {
        "icon": props.icon
      }, null) : null]);
    }
    function renderCollapseIcon() {
      if (props.icon || slots.icon) {
        return props.loading ? renderLoadingIcon() : createVNode("div", {
          "class": nh.be("icon")
        }, [slots.icon ? slots.icon() : createVNode(Icon, {
          "icon": props.icon
        }, null)]);
      }
      return createVNode(CollapseTransition, {
        "appear": true,
        "horizontal": true,
        "fade-effect": true
      }, {
        default: () => [props.loading && renderLoadingIcon()]
      });
    }
    function renderBadge() {
      const badgeType = props.disabled ? "disabled" : props.type === "default" ? "error" : props.type;
      return createVNode(Badge, {
        "inherit": true,
        "class": [nh.be("badge"), nh.bem("badge", badgeType)],
        "content": props.badge,
        "type": badgeType
      }, null);
    }
    return () => {
      const Button2 = props.tag || "button";
      return createVNode(Button2, {
        "type": props.buttonType,
        "class": className.value,
        "role": "button",
        "style": style.value,
        "disabled": props.disabled,
        "onClick": handleClick,
        "onAnimationend": handleAnimationEnd
      }, {
        default: () => [isIconOnly.value ? renderSingleIcon() : renderCollapseIcon(), !isIconOnly.value && slots.default ? slots.default() : null, !isIconOnly.value && (props.badge || props.badge === 0) ? renderBadge() : null]
      });
    };
  }
});
export { Button as default };
