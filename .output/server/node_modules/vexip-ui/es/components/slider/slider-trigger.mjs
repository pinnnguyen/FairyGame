import { defineComponent, ref, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, createElementVNode, renderSlot, createTextVNode, toDisplayString } from "vue";
import "../tooltip/index.mjs";
import "../../common/config/src/index.mjs";
import { useSetTimeout, useModifier } from "@vexip-ui/hooks";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Tooltip from "../tooltip/tooltip.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "SliderTrigger",
  components: {
    Tooltip
  },
  props: {
    value: {
      type: Number,
      default: 0
    },
    tipTransfer: {
      type: [Boolean, String],
      default: false
    },
    hideTip: {
      type: Boolean,
      default: false
    },
    vertical: {
      type: Boolean,
      default: false
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    disabled: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    reverse: {
      type: Boolean,
      default: false
    },
    sliding: {
      type: Boolean,
      default: false
    }
  },
  emits: ["key-minus", "key-plus"],
  setup(props, { emit }) {
    const isTipShow = ref(false);
    const tooltip = ref(null);
    const handler = ref();
    const { timer } = useSetTimeout();
    const { target: wrapper } = useModifier({
      passive: false,
      onKeyDown: (event, modifier) => {
        if (modifier.up || modifier.down || modifier.left || modifier.right) {
          disableEvent(event);
          const extraType = event.ctrlKey ? "ctrl" : event.shiftKey ? "shift" : event.altKey ? "alt" : void 0;
          if (modifier.up || modifier.left) {
            emit("key-minus", extraType);
          } else {
            emit("key-plus", extraType);
          }
        }
      }
    });
    function showTooltip() {
      clearTimeout(timer.hover);
      if (!props.disabled) {
        timer.hover = setTimeout(() => {
          isTipShow.value = true;
        }, 250);
      }
    }
    function hideTooltip() {
      clearTimeout(timer.hover);
      timer.hover = setTimeout(() => {
        isTipShow.value = false;
      }, 250);
    }
    function disableEvent(event) {
      if (event.cancelable) {
        event.stopPropagation();
        event.preventDefault();
      }
    }
    function updateTooltip() {
      if (tooltip.value) {
        tooltip.value.updatePopper();
      }
    }
    function focus() {
      var _a;
      (_a = handler.value) == null ? void 0 : _a.focus();
    }
    return {
      nh: useNameHelper("slider"),
      isTipShow,
      wrapper,
      tooltip,
      handler,
      showTooltip,
      hideTooltip,
      disableEvent,
      updateTooltip,
      focus
    };
  }
});
const _hoisted_1 = ["aria-valuenow", "aria-valuemin", "aria-valuemax", "aria-disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Tooltip = resolveComponent("Tooltip");
  return openBlock(), createElementBlock("div", {
    ref: "wrapper",
    class: normalizeClass(_ctx.nh.be("trigger")),
    tabindex: "-1",
    onTouchstart: _cache[2] || (_cache[2] = (...args) => _ctx.disableEvent && _ctx.disableEvent(...args))
  }, [
    createVNode(_component_Tooltip, {
      ref: "tooltip",
      theme: "dark",
      trigger: "custom",
      transfer: _ctx.tipTransfer,
      visible: _ctx.isTipShow || _ctx.sliding,
      "tip-class": _ctx.nh.be("tip"),
      disabled: _ctx.hideTip,
      placement: _ctx.vertical ? "right" : "top",
      onTipEnter: _ctx.showTooltip,
      onTipLeave: _ctx.hideTooltip
    }, {
      trigger: withCtx(() => [
        createElementVNode("div", {
          ref: "handler",
          class: normalizeClass({
            [_ctx.nh.be("handler")]: true,
            [_ctx.nh.bem("handler", "active")]: _ctx.loading,
            [_ctx.nh.bem("handler", "sliding")]: _ctx.sliding
          }),
          role: "slider",
          tabindex: "0",
          "aria-valuenow": _ctx.value,
          "aria-valuemin": _ctx.min,
          "aria-valuemax": _ctx.max,
          "aria-disabled": _ctx.disabled,
          onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.showTooltip && _ctx.showTooltip(...args)),
          onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.hideTooltip && _ctx.hideTooltip(...args))
        }, null, 42, _hoisted_1)
      ]),
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "tip", { value: _ctx.value }, () => [
          createTextVNode(toDisplayString(_ctx.value), 1)
        ])
      ]),
      _: 3
    }, 8, ["transfer", "visible", "tip-class", "disabled", "placement", "onTipEnter", "onTipLeave"])
  ], 34);
}
var SliderTrigger = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { SliderTrigger as default };
