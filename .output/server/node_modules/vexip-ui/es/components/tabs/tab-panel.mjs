import { defineComponent, inject, ref, computed, watch, reactive, toRef, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, renderSlot } from "vue";
import "../../common/config/src/index.mjs";
import { TABS_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { eventProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TabPanel",
  props: {
    label: {
      type: [String, Number],
      default: null
    },
    name: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    icon: {
      type: Object,
      default: null
    },
    closable: {
      type: Boolean,
      default: null
    },
    onToggle: eventProp()
  },
  emits: [],
  setup(props, { slots }) {
    const tabsState = inject(TABS_STATE, null);
    const nh = useNameHelper("tabs");
    const active = ref(false);
    const currentLabel = ref(props.label);
    const className = computed(() => {
      const baseClass = nh.be("panel");
      return {
        [baseClass]: true,
        [`${baseClass}--disabled`]: props.disabled,
        [`${baseClass}--active`]: !props.disabled && active.value
      };
    });
    watch(
      () => props.label,
      (value) => {
        currentLabel.value = value;
        tabsState == null ? void 0 : tabsState.refreshLabels();
      }
    );
    watch(active, (value) => {
      emitEvent(props.onToggle, value);
    });
    if (tabsState) {
      const state = reactive({
        label: currentLabel,
        name: toRef(props, "name"),
        icon: toRef(props, "icon"),
        disabled: toRef(props, "disabled"),
        closable: toRef(props, "closable"),
        labelRenderer: null
      });
      watch(
        () => slots.label,
        (value) => {
          state.labelRenderer = value ? (data) => value(data) : null;
        },
        { immediate: true }
      );
      watch(currentLabel, (value, prevValue) => {
        active.value = currentLabel.value === tabsState.currentActive;
      });
      watch(
        () => tabsState.currentActive,
        (value) => {
          active.value = currentLabel.value === value;
        },
        { immediate: true }
      );
      tabsState.increaseItem(state);
      onBeforeUnmount(() => {
        tabsState.decreaseItem(state);
      });
    }
    return {
      active,
      className
    };
  }
});
const _hoisted_1 = ["aria-hidden"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    role: "tabpanel",
    "aria-hidden": !_ctx.active
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 10, _hoisted_1);
}
var TabPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TabPanel as default };
