import { defineComponent, inject, ref, reactive, toRef, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from "vue";
import "../../common/config/src/index.mjs";
import { WHEEL_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "WheelItem",
  props: {
    value: {
      type: [Number, String],
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    meta: {
      type: [String, Number, Object],
      default: null
    }
  },
  setup(props) {
    const wheelState = inject(WHEEL_STATE, null);
    const width = ref(0);
    const height = ref(0);
    const wrapper = ref();
    const state = reactive({
      width,
      height,
      el: wrapper,
      value: toRef(props, "value"),
      disabled: toRef(props, "disabled"),
      meta: toRef(props, "meta")
    });
    const style = computed(() => {
      return {
        width: width.value ? `${width.value}px` : void 0,
        height: height.value ? `${height.value}px` : void 0
      };
    });
    if (wheelState) {
      onMounted(() => {
        wheelState.increaseItem(state);
      });
      onBeforeUnmount(() => {
        wheelState.decreaseItem(state);
      });
    }
    return {
      nh: useNameHelper("wheel"),
      style,
      wrapper
    };
  }
});
const _hoisted_1 = ["aria-disabled", "aria-selected"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", {
    ref: "wrapper",
    class: normalizeClass([
      _ctx.nh.be("item"),
      _ctx.disabled && _ctx.nh.bem("item", "disabled"),
      _ctx.active && _ctx.nh.bem("item", "active")
    ]),
    role: "option",
    "aria-disabled": _ctx.disabled ? "true" : void 0,
    "aria-selected": _ctx.active,
    style: normalizeStyle(_ctx.style)
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createTextVNode(toDisplayString(_ctx.value), 1)
    ])
  ], 14, _hoisted_1);
}
var WheelItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { WheelItem as default };
