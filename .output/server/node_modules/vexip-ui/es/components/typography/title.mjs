import { defineComponent, computed, createVNode } from "vue";
import "../../common/config/src/index.mjs";
import { isColor, boundRange } from "@vexip-ui/utils";
import { titleProps } from "./props.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
var Title = defineComponent({
  name: "Title",
  props: titleProps,
  emits: [],
  setup(_props, {
    slots
  }) {
    const props = useProps("title", _props, {
      type: "default",
      level: 5,
      top: false,
      marker: false,
      aligned: false,
      thin: false,
      markerType: null
    });
    const nh = useNameHelper("title");
    const coloredMarker = computed(() => isColor(props.markerType));
    const markerType = computed(() => props.markerType || props.type);
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(props.type)]: props.type !== "default",
        [nh.bm("top")]: props.top,
        [nh.bm("marker")]: props.marker,
        [nh.bm("aligned")]: props.aligned,
        [nh.bm("thin")]: props.thin,
        [nh.bm(`marker-${markerType.value}`)]: !coloredMarker.value && markerType.value !== "default"
      };
    });
    const level = computed(() => boundRange(Math.round(props.level), 1, 6) || 5);
    const style = computed(() => {
      return coloredMarker.value ? {
        [nh.cv("marker-color")]: props.markerType
      } : null;
    });
    return () => {
      const CustomTag = `h${level.value}`;
      return createVNode(CustomTag, {
        "class": className.value,
        "style": style.value
      }, {
        default: () => {
          var _a;
          return [(_a = slots.default) == null ? void 0 : _a.call(slots)];
        }
      });
    };
  }
});
export { Title as default };
