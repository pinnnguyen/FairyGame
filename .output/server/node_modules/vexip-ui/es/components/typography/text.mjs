import { isVNode, defineComponent, computed, createVNode } from "vue";
import "../../common/config/src/index.mjs";
import { textProps } from "./props.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var Text = defineComponent({
  name: "Text",
  props: textProps,
  emits: [],
  setup(_props, {
    slots
  }) {
    const props = useProps("text", _props, {
      type: "default",
      tag: "span",
      delete: false,
      strong: false,
      italic: false,
      underline: false,
      code: false,
      reversed: false
    });
    const nh = useNameHelper("text");
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(props.type)]: props.type !== "default",
        [nh.bm("delete")]: props.delete,
        [nh.bm("strong")]: props.strong,
        [nh.bm("italic")]: props.italic,
        [nh.bm("underline")]: props.underline,
        [nh.bm("code")]: props.code,
        [nh.bm("mark")]: props.mark,
        [nh.bm("disabled")]: props.disabled,
        [nh.bm("keyboard")]: props.keyboard,
        [nh.bm("thin")]: props.thin,
        [nh.bm("reversed")]: props.reversed
      };
    });
    return () => {
      var _a;
      const CustomTag = props.tag || "span";
      const children = (_a = slots.default) == null ? void 0 : _a.call(slots);
      return props.code ? createVNode("code", {
        "class": className.value
      }, [props.delete ? createVNode("del", null, [children]) : children]) : props.delete ? createVNode("del", {
        "class": className.value
      }, [children]) : createVNode(CustomTag, {
        "class": className.value
      }, _isSlot(children) ? children : {
        default: () => [children]
      });
    };
  }
});
export { Text as default };
