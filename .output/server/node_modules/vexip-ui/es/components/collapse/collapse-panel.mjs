import { defineComponent, inject, ref, computed, watch, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, renderSlot, createCommentVNode, createTextVNode, toDisplayString, normalizeStyle } from "vue";
import "../collapse-transition/index.mjs";
import "../icon/index.mjs";
import "../../common/config/src/index.mjs";
import { randomString } from "@vexip-ui/utils";
import { ChevronRight } from "@vexip-ui/icons";
import { collapsePanelProps } from "./props.mjs";
import { COLLAPSE_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import CollapseTransition from "./collapse-transition.mjs";
import Icon from "../icon/icon.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "CollapsePanel",
  components: {
    CollapseTransition,
    Icon,
    ChevronRight
  },
  props: collapsePanelProps,
  emits: ["update:expanded"],
  setup(_props, { emit }) {
    const props = useProps("collapsePanel", _props, {
      label: {
        default: null,
        static: true
      },
      title: "",
      disabled: false,
      contentStyle: null,
      expanded: false,
      card: false,
      arrowType: {
        default: "right",
        validator: (value) => ["right", "left", "none"].includes(value)
      },
      icon: null,
      ghost: false
    });
    const collapseState = inject(COLLAPSE_STATE, null);
    const nh = useNameHelper("collapse");
    const currentExpanded = ref(props.expanded);
    const currentLabel = ref("");
    const useCard = computed(() => {
      if (!collapseState) {
        return props.card;
      }
      return false;
    });
    const useGhost = computed(() => {
      if (!collapseState) {
        return props.ghost;
      }
      return false;
    });
    const useArrowType = computed(() => {
      if (collapseState) {
        return collapseState.arrowType;
      }
      return props.arrowType;
    });
    const className = computed(() => {
      return [
        nh.be("panel"),
        nh.bs("vars"),
        nh.bem("panel", `arrow-${useArrowType.value}`),
        {
          [nh.bem("panel", "inherit")]: collapseState || props.inherit,
          [nh.bem("panel", "card")]: useCard.value,
          [nh.bem("panel", "ghost")]: !useCard.value && useGhost.value,
          [nh.bem("panel", "expanded")]: currentExpanded.value,
          [nh.bem("panel", "disabled")]: props.disabled
        }
      ];
    });
    watch(
      () => props.label,
      (value) => {
        const prevValue = currentLabel.value;
        currentLabel.value = value || value === 0 ? value : prevValue;
        if (collapseState && prevValue !== currentLabel.value) {
          collapseState.unregisterPane(prevValue);
          collapseState.registerPane(currentLabel.value, currentExpanded);
        }
      }
    );
    watch(currentExpanded, (value) => {
      emitEvent(props.onToggle, value);
      emit("update:expanded", value);
    });
    if (!collapseState) {
      watch(
        () => props.expanded,
        (value) => {
          currentExpanded.value = value;
        }
      );
    }
    if (collapseState) {
      onMounted(() => {
        if (props.label || props.label === 0) {
          currentLabel.value = props.label;
        } else {
          currentLabel.value = randomString();
        }
        collapseState.registerPane(currentLabel.value, currentExpanded);
      });
      onBeforeUnmount(() => {
        collapseState.unregisterPane(currentLabel.value);
      });
    }
    function handleToggle() {
      if (props.disabled)
        return;
      if (collapseState) {
        collapseState.expandPane(currentLabel.value, !currentExpanded.value);
      } else {
        currentExpanded.value = !currentExpanded.value;
      }
    }
    return {
      props,
      nh,
      inGroup: !!collapseState,
      currentExpanded,
      className,
      handleToggle
    };
  }
});
const _hoisted_1 = ["role", "aria-expanded"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ChevronRight = resolveComponent("ChevronRight");
  const _component_Icon = resolveComponent("Icon");
  const _component_CollapseTransition = resolveComponent("CollapseTransition");
  return openBlock(), createElementBlock("section", {
    class: normalizeClass(_ctx.className),
    role: _ctx.inGroup ? "tab" : void 0,
    "aria-expanded": _ctx.currentExpanded
  }, [
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("header")),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleToggle && _ctx.handleToggle(...args))
    }, [
      createElementVNode("div", {
        class: normalizeClass(_ctx.nh.be("arrow"))
      }, [
        createVNode(_component_Icon, null, {
          default: withCtx(() => [
            createVNode(_component_ChevronRight)
          ]),
          _: 1
        })
      ], 2),
      renderSlot(_ctx.$slots, "title", {}, () => [
        _ctx.props.icon ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("icon"))
        }, [
          createVNode(_component_Icon, {
            icon: _ctx.props.icon
          }, null, 8, ["icon"])
        ], 2)) : createCommentVNode("", true),
        createTextVNode(" " + toDisplayString(_ctx.props.title), 1)
      ])
    ], 2),
    createVNode(_component_CollapseTransition, null, {
      default: withCtx(() => [
        _ctx.currentExpanded ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("body"))
        }, [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("content")),
            style: normalizeStyle(_ctx.props.contentStyle)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 6)
        ], 2)) : createCommentVNode("", true)
      ]),
      _: 3
    })
  ], 10, _hoisted_1);
}
var CollapsePanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { CollapsePanel as default };
