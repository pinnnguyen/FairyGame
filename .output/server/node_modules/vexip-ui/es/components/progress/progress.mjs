import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, toDisplayString, createVNode, withCtx, createCommentVNode } from "vue";
import "../bubble/index.mjs";
import "../../common/config/src/index.mjs";
import { toFixed } from "@vexip-ui/utils";
import { progressProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Bubble from "../bubble/bubble.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const infoTypes = Object.freeze([
  "outside",
  "inside",
  "bubble",
  "bubble-top",
  "bubble-bottom",
  "none"
]);
const _sfc_main = defineComponent({
  name: "Progress",
  components: {
    Bubble
  },
  props: progressProps,
  setup(_props) {
    const props = useProps("progress", _props, {
      percentage: {
        default: 0,
        validator: (value) => value >= 0 && value <= 100,
        static: true
      },
      strokeWidth: 8,
      infoType: {
        default: "outside",
        validator: (value) => infoTypes.includes(value)
      },
      precision: 2,
      activated: false,
      strokeColor: {
        default: null,
        validator: (value) => !(Array.isArray(value) && (!value[0] || !value[1]))
      }
    });
    const nh = useNameHelper("progress");
    const className = computed(() => {
      return [
        nh.b(),
        nh.bs("vars"),
        nh.bm(`info-${props.infoType}`),
        {
          [nh.bm("inherit")]: props.inherit,
          [nh.bm("activated")]: props.activated
        }
      ];
    });
    const trackStyle = computed(() => {
      return {
        height: `${props.strokeWidth}px`,
        borderRadius: `${props.strokeWidth}px`
      };
    });
    const fillerStyle = computed(() => {
      const style = {
        borderRadius: `${props.strokeWidth}px`,
        transform: `translateX(${(props.percentage - 100) / 2}%) scaleX(${props.percentage / 100})`
      };
      let strokeColor = props.strokeColor;
      if (typeof strokeColor === "function") {
        strokeColor = strokeColor(props.percentage);
      }
      if (typeof strokeColor === "string") {
        style.backgroundColor = strokeColor;
      } else if (Array.isArray(strokeColor)) {
        style.backgroundImage = `linear-gradient(to right, ${strokeColor[0]} 0%, ${strokeColor[1]} 100%)`;
      }
      return style;
    });
    const infoStyle = computed(() => {
      return {
        transform: `translateX(${props.percentage - 100}%)`
      };
    });
    const useBubble = computed(() => {
      return props.infoType.includes("bubble");
    });
    const bubbleType = computed(() => {
      if (useBubble.value) {
        return props.infoType.split("-").pop() === "bottom" ? "bottom" : "top";
      }
      return "top";
    });
    const bubbleStyle = computed(() => {
      if (!useBubble.value)
        return {};
      const type = bubbleType.value === "top" ? "bottom" : "top";
      return {
        [type]: `${props.strokeWidth}px`
      };
    });
    const percentValue = computed(() => toFixed(props.percentage, props.precision));
    return {
      props,
      nh,
      className,
      trackStyle,
      fillerStyle,
      infoStyle,
      useBubble,
      bubbleType,
      bubbleStyle,
      percentValue
    };
  }
});
const _hoisted_1 = ["aria-valuenow"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Bubble = resolveComponent("Bubble");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    role: "progressbar",
    "aria-valuenow": _ctx.percentValue,
    "aria-valuemin": "0",
    "aria-valuemax": "100"
  }, [
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("track")),
      style: normalizeStyle(_ctx.trackStyle)
    }, [
      createElementVNode("div", {
        class: normalizeClass(_ctx.nh.be("filler")),
        style: normalizeStyle(_ctx.fillerStyle)
      }, null, 6),
      _ctx.props.infoType === "inside" ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("info")),
        style: normalizeStyle(_ctx.infoStyle)
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          createElementVNode("span", {
            class: normalizeClass(_ctx.nh.be("percentage"))
          }, toDisplayString(`${_ctx.percentValue}%`), 3)
        ])
      ], 6)) : _ctx.useBubble ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("reference")),
        style: normalizeStyle(_ctx.infoStyle)
      }, [
        createVNode(_component_Bubble, {
          inherit: "",
          class: normalizeClass(_ctx.nh.be("bubble")),
          style: normalizeStyle(_ctx.bubbleStyle),
          placement: _ctx.bubbleType,
          "content-class": _ctx.nh.be("info")
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createElementVNode("span", {
                class: normalizeClass(_ctx.nh.be("percentage"))
              }, toDisplayString(`${_ctx.percentValue}%`), 3)
            ])
          ]),
          _: 3
        }, 8, ["class", "style", "placement", "content-class"])
      ], 6)) : createCommentVNode("", true)
    ], 6),
    _ctx.props.infoType === "outside" ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(_ctx.nh.be("info"))
    }, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createElementVNode("span", {
          class: normalizeClass(_ctx.nh.be("percentage"))
        }, toDisplayString(`${_ctx.percentValue}%`), 3)
      ])
    ], 2)) : createCommentVNode("", true)
  ], 10, _hoisted_1);
}
var Progress = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Progress as default };
