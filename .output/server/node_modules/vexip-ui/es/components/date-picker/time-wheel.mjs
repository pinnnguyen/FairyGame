import { defineComponent, ref, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withModifiers, withCtx, createElementVNode, toDisplayString } from "vue";
import "../wheel/index.mjs";
import "../../common/config/src/index.mjs";
import { USE_TOUCH, range, doubleDigits } from "@vexip-ui/utils";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Wheel from "../wheel/wheel.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TimeWheel",
  components: {
    Wheel
  },
  props: {
    noArrow: {
      type: Boolean,
      default: false
    },
    hour: {
      type: Number,
      default: 0,
      validator: (value) => value >= 0 && value <= 23
    },
    minute: {
      type: Number,
      default: 0,
      validator: (value) => value >= 0 && value <= 59
    },
    second: {
      type: Number,
      default: 0,
      validator: (value) => value >= 0 && value <= 59
    },
    candidate: {
      default: 2,
      validator: (value) => [0, 1, 2, 3].includes(value)
    },
    steps: {
      type: Array,
      default: () => [1, 1, 1],
      validator: (value) => {
        if (value[0] && 24 % value[0] !== 0) {
          return false;
        }
        for (let i = 1; i < 3; ++i) {
          if (value[i] && 60 % value[i] !== 0) {
            return false;
          }
        }
        return true;
      }
    },
    pointer: {
      type: Boolean,
      default: USE_TOUCH
    },
    disabledTime: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["change", "toggle-col", "update:hour", "update:minute", "update:second"],
  setup(props, { emit }) {
    const currentHour = ref(props.hour);
    const currentMinute = ref(props.minute);
    const currentSecond = ref(props.second);
    const hourRange = ref([]);
    const minuteRange = ref([]);
    const secondRange = ref([]);
    const hourWheel = ref();
    const minuteWheel = ref();
    const secondWheel = ref();
    watch(() => props.steps, updateTimeRange, { immediate: true });
    watch(
      () => props.hour,
      (value) => {
        currentHour.value = value;
      }
    );
    watch(
      () => props.minute,
      (value) => {
        currentMinute.value = value;
      }
    );
    watch(
      () => props.second,
      (value) => {
        currentSecond.value = value;
      }
    );
    watch(currentHour, (value) => {
      emit("update:hour", value);
      emit("change", "hour", value);
    });
    watch(currentMinute, (value) => {
      emit("update:minute", value);
      emit("change", "minute", value);
    });
    watch(currentSecond, (value) => {
      emit("update:second", value);
      emit("change", "second", value);
    });
    function isHourDisabled(hour) {
      return typeof props.disabledTime.hour === "function" && props.disabledTime.hour(hour);
    }
    function isMinuteDisabled(minute) {
      return typeof props.disabledTime.minute === "function" && props.disabledTime.minute(currentHour.value, minute);
    }
    function isSecondDisabled(second) {
      return typeof props.disabledTime.second === "function" && props.disabledTime.second(currentHour.value, currentMinute.value, second);
    }
    function updateTimeRange() {
      const [hourStep = 1, minuteStep = 1, secondStep = 1] = props.steps;
      hourRange.value = range(24 / hourStep, 0, hourStep);
      minuteRange.value = range(60 / minuteStep, 0, minuteStep);
      secondRange.value = range(60 / secondStep, 0, secondStep);
    }
    function handleToggleColumn(type) {
      emit("toggle-col", type);
    }
    function refreshWheel() {
      [hourWheel.value, minuteWheel.value, secondWheel.value].forEach((wheel) => {
        wheel == null ? void 0 : wheel.refreshScroll();
      });
    }
    return {
      nh: useNameHelper("time-picker"),
      currentHour,
      currentMinute,
      currentSecond,
      hourRange,
      minuteRange,
      secondRange,
      hourWheel,
      minuteWheel,
      secondWheel,
      doubleDigits,
      isHourDisabled,
      isMinuteDisabled,
      isSecondDisabled,
      handleToggleColumn,
      refreshWheel
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Wheel = resolveComponent("Wheel");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.nh.be("wheel"))
  }, [
    createVNode(_component_Wheel, {
      ref: "hourWheel",
      value: _ctx.currentHour,
      "onUpdate:value": _cache[0] || (_cache[0] = ($event) => _ctx.currentHour = $event),
      inherit: "",
      pointer: _ctx.pointer,
      arrow: !_ctx.noArrow,
      candidate: _ctx.candidate,
      options: _ctx.hourRange,
      tabindex: "-1",
      onMouseenter: _cache[1] || (_cache[1] = ($event) => _ctx.handleToggleColumn("hour")),
      onTouchstart: _cache[2] || (_cache[2] = ($event) => _ctx.handleToggleColumn("hour")),
      onKeydown: _cache[3] || (_cache[3] = withModifiers(() => {
      }, ["stop"]))
    }, {
      default: withCtx(({ option }) => [
        createElementVNode("span", {
          class: normalizeClass([_ctx.nh.be("option"), _ctx.isHourDisabled(option.value) && _ctx.nh.bem("option", "disabled")])
        }, toDisplayString(_ctx.doubleDigits(option.value)), 3)
      ]),
      _: 1
    }, 8, ["value", "pointer", "arrow", "candidate", "options"]),
    createVNode(_component_Wheel, {
      ref: "minuteWheel",
      value: _ctx.currentMinute,
      "onUpdate:value": _cache[4] || (_cache[4] = ($event) => _ctx.currentMinute = $event),
      inherit: "",
      pointer: _ctx.pointer,
      arrow: !_ctx.noArrow,
      candidate: _ctx.candidate,
      options: _ctx.minuteRange,
      tabindex: "-1",
      onMouseenter: _cache[5] || (_cache[5] = ($event) => _ctx.handleToggleColumn("minute")),
      onTouchstart: _cache[6] || (_cache[6] = ($event) => _ctx.handleToggleColumn("minute")),
      onKeydown: _cache[7] || (_cache[7] = withModifiers(() => {
      }, ["stop"]))
    }, {
      default: withCtx(({ option }) => [
        createElementVNode("span", {
          class: normalizeClass([_ctx.nh.be("option"), _ctx.isMinuteDisabled(option.value) && _ctx.nh.bem("option", "disabled")])
        }, toDisplayString(_ctx.doubleDigits(option.value)), 3)
      ]),
      _: 1
    }, 8, ["value", "pointer", "arrow", "candidate", "options"]),
    createVNode(_component_Wheel, {
      ref: "secondWheel",
      value: _ctx.currentSecond,
      "onUpdate:value": _cache[8] || (_cache[8] = ($event) => _ctx.currentSecond = $event),
      inherit: "",
      pointer: _ctx.pointer,
      arrow: !_ctx.noArrow,
      candidate: _ctx.candidate,
      options: _ctx.secondRange,
      tabindex: "-1",
      onMouseenter: _cache[9] || (_cache[9] = ($event) => _ctx.handleToggleColumn("second")),
      onTouchstart: _cache[10] || (_cache[10] = ($event) => _ctx.handleToggleColumn("second")),
      onKeydown: _cache[11] || (_cache[11] = withModifiers(() => {
      }, ["stop"]))
    }, {
      default: withCtx(({ option }) => [
        createElementVNode("span", {
          class: normalizeClass([_ctx.nh.be("option"), _ctx.isSecondDisabled(option.value) && _ctx.nh.bem("option", "disabled")])
        }, toDisplayString(_ctx.doubleDigits(option.value)), 3)
      ]),
      _: 1
    }, 8, ["value", "pointer", "arrow", "candidate", "options"])
  ], 2);
}
var TimeWheel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TimeWheel as default };
