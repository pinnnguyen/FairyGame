import { defineComponent, ref, computed, watch, openBlock, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, Fragment, createElementVNode } from "vue";
import "../../common/config/src/index.mjs";
import { doubleDigits } from "@vexip-ui/utils";
import { handleKeyEnter } from "./helper.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "TimeControl",
  props: {
    unitType: {
      type: String,
      default: "hour"
    },
    enabled: {
      type: Object,
      default: () => ({})
    },
    activated: {
      type: Object,
      default: () => ({})
    },
    timeValue: {
      type: Object,
      default: () => ({})
    },
    separator: {
      type: String,
      default: ":"
    },
    visible: {
      type: Boolean,
      default: false
    },
    focused: {
      type: Boolean,
      default: false
    },
    filler: {
      type: String,
      default: "-",
      validator: (value) => value.length === 1
    },
    noFiller: {
      type: Boolean,
      default: false
    },
    steps: {
      type: Array,
      default: () => [1, 1, 1]
    },
    ctrlSteps: {
      type: Array,
      default: () => [5, 5, 5]
    },
    labels: {
      type: Object,
      default: () => ({})
    },
    hasError: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "input",
    "plus",
    "minus",
    "enter",
    "cancel",
    "unit-focus",
    "unit-blur",
    "prev-unit",
    "next-unit"
  ],
  setup(props, { emit }) {
    const nh = useNameHelper("time-picker");
    const wrapper = ref();
    const formattedHour = computed(() => {
      return formatValue("hour");
    });
    const formattedMinute = computed(() => {
      return formatValue("minute");
    });
    const formattedSecond = computed(() => {
      return formatValue("second");
    });
    watch(
      () => props.unitType,
      (_, prev) => {
        prev && emit("unit-blur", prev);
      }
    );
    function formatValue(type) {
      return props.noFiller || props.activated[type] ? doubleDigits(props.timeValue[type]) : `${props.filler}${props.filler}`;
    }
    function handleInputFocus(type) {
      emit("unit-focus", type);
    }
    function handleInput(event) {
      if (!props.visible)
        return;
      const type = handleKeyEnter(event);
      switch (type) {
        case "next": {
          emit("next-unit");
          break;
        }
        case "prev": {
          emit("prev-unit");
          break;
        }
        case "up": {
          emit("minus", event.ctrlKey);
          break;
        }
        case "down": {
          emit("plus", event.ctrlKey);
          break;
        }
        case "ok": {
          handleEnter();
          break;
        }
        case "esc": {
          handleCancel();
          break;
        }
        default: {
          if (typeof type === "number") {
            emit("input", type);
          }
        }
      }
    }
    function handleEnter() {
      emit("enter");
    }
    function handleCancel() {
      emit("cancel");
    }
    return {
      nh,
      formattedHour,
      formattedMinute,
      formattedSecond,
      wrapper,
      handleInputFocus,
      handleInput,
      focus: () => {
        var _a;
        (_a = wrapper.value) == null ? void 0 : _a.focus();
      },
      blur: () => {
        var _a;
        (_a = wrapper.value) == null ? void 0 : _a.blur();
      }
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    ref: "wrapper",
    class: normalizeClass([_ctx.nh.be("input"), _ctx.hasError && _ctx.nh.bem("input", "error")]),
    tabindex: "-1",
    onKeydown: _cache[3] || (_cache[3] = (...args) => _ctx.handleInput && _ctx.handleInput(...args))
  }, [
    _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "hour" && _ctx.nh.bem("unit", "focused")]),
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleInputFocus("hour"))
    }, toDisplayString(_ctx.formattedHour), 3)) : createCommentVNode("", true),
    _ctx.labels.hour ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(_ctx.nh.be("label"))
    }, toDisplayString(_ctx.labels.hour), 3)) : createCommentVNode("", true),
    _ctx.enabled.minute ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
      _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("separator"))
      }, toDisplayString(_ctx.separator), 3)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "minute" && _ctx.nh.bem("unit", "focused")]),
        onClick: _cache[1] || (_cache[1] = ($event) => _ctx.handleInputFocus("minute"))
      }, toDisplayString(_ctx.formattedMinute), 3),
      _ctx.labels.minute ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("label"))
      }, toDisplayString(_ctx.labels.minute), 3)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    _ctx.enabled.second ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
      _ctx.enabled.minute || _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("separator"))
      }, toDisplayString(_ctx.separator), 3)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "second" && _ctx.nh.bem("unit", "focused")]),
        onClick: _cache[2] || (_cache[2] = ($event) => _ctx.handleInputFocus("second"))
      }, toDisplayString(_ctx.formattedSecond), 3),
      _ctx.labels.second ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("label"))
      }, toDisplayString(_ctx.labels.second), 3)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true)
  ], 34);
}
var TimeControl = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TimeControl as default };
