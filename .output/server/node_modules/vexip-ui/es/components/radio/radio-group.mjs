import { defineComponent, ref, computed, reactive, toRef, provide, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from "vue";
import "./index.mjs";
import "../form/index.mjs";
import { Spinner } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { debounceMinor, isObject } from "@vexip-ui/utils";
import { radioGroupProps } from "./props.mjs";
import { GROUP_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Radio from "./radio.mjs";
import { useFieldStore } from "../form/helper.mjs";
import { useProps, createSizeProp, createStateProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "RadioGroup",
  components: {
    Radio
  },
  props: radioGroupProps,
  emits: ["update:value"],
  setup(_props, { emit }) {
    const { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } = useFieldStore(() => {
      var _a, _b;
      return (_b = (_a = Array.from(inputSet)[0]) == null ? void 0 : _a.value) == null ? void 0 : _b.focus();
    });
    const props = useProps("radioGroup", _props, {
      size: createSizeProp(size),
      state: createStateProp(state),
      value: {
        default: () => getFieldValue(null),
        static: true
      },
      vertical: false,
      disabled: () => disabled.value,
      button: false,
      border: false,
      options: {
        default: () => [],
        static: true
      },
      loading: () => loading.value,
      loadingIcon: Spinner,
      loadingLock: false,
      loadingSpin: false
    });
    const nh = useNameHelper("radio-group");
    const currentValue = ref(props.value);
    const inputSet = /* @__PURE__ */ new Set();
    const className = computed(() => {
      return [
        nh.b(),
        nh.ns("radio-vars"),
        {
          [nh.bm("inherit")]: props.inherit,
          [nh.bm("vertical")]: props.vertical,
          [nh.bm("button")]: !props.vertical && props.button,
          [nh.bm("disabled")]: props.disabled,
          [nh.bm(props.size)]: props.size !== "default",
          [nh.bm("border")]: props.border,
          [nh.bm(props.state)]: props.state !== "default"
        }
      ];
    });
    const groupState = reactive({
      currentValue,
      size: toRef(props, "size"),
      state: toRef(props, "state"),
      disabled: toRef(props, "disabled"),
      button: toRef(props, "button"),
      border: toRef(props, "border"),
      loading: toRef(props, "loading"),
      loadingIcon: toRef(props, "loadingIcon"),
      loadingLock: toRef(props, "loadingLock"),
      loadingSpin: toRef(props, "loadingSpin"),
      updateValue: debounceMinor(updateValue),
      registerInput,
      unregisterInput
    });
    provide(GROUP_STATE, groupState);
    watch(
      () => props.value,
      (value) => {
        currentValue.value = value;
      }
    );
    watch(currentValue, (value) => {
      setFieldValue(value);
      emitEvent(props.onChange, value);
      emit("update:value", value);
      validateField();
    });
    function updateValue(value) {
      currentValue.value = value;
    }
    function registerInput(input) {
      inputSet.add(input);
    }
    function unregisterInput(input) {
      inputSet.delete(input);
    }
    return {
      props,
      idFor,
      className,
      isObject
    };
  }
});
const _hoisted_1 = ["id"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Radio = resolveComponent("Radio");
  return openBlock(), createElementBlock("div", {
    id: _ctx.idFor,
    class: normalizeClass(_ctx.className),
    role: "radiogroup"
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.props.options, (item) => {
        return openBlock(), createElementBlock(Fragment, { key: item }, [
          _ctx.isObject(item) ? (openBlock(), createBlock(_component_Radio, {
            key: 0,
            inherit: "",
            label: item.label
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(item.content || item.label), 1)
            ]),
            _: 2
          }, 1032, ["label"])) : (openBlock(), createBlock(_component_Radio, {
            key: 1,
            inherit: "",
            label: item
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(item), 1)
            ]),
            _: 2
          }, 1032, ["label"]))
        ], 64);
      }), 128))
    ])
  ], 10, _hoisted_1);
}
var RadioGroup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { RadioGroup as default };
