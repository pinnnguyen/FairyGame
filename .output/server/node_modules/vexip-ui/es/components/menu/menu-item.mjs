import MenuItem$1 from "./menu-item.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, createElementVNode, normalizeStyle, withKeys, withModifiers, renderSlot, createBlock, mergeProps, createCommentVNode, createTextVNode, toDisplayString, withDirectives, vShow, Transition } from "vue";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
const _hoisted_1 = ["aria-disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  const _component_Icon = resolveComponent("Icon");
  const _component_ChevronDown = resolveComponent("ChevronDown");
  const _component_Tooltip = resolveComponent("Tooltip");
  const _component_CollapseTransition = resolveComponent("CollapseTransition");
  const _component_Portal = resolveComponent("Portal");
  return openBlock(), createElementBlock("li", {
    ref: "wrapper",
    class: normalizeClass(_ctx.className),
    role: "none"
  }, [
    createVNode(_component_Tooltip, {
      placement: "right",
      reverse: _ctx.tooltipReverse,
      transfer: true,
      disabled: _ctx.tooltipDisabled
    }, {
      trigger: withCtx(() => [
        createElementVNode("div", {
          ref: "reference",
          class: normalizeClass({
            [_ctx.nh.be("label")]: true,
            [_ctx.nh.bem("label", `marker-${_ctx.markerType}`)]: true,
            [_ctx.nh.bem("label", "in-popper")]: _ctx.isUsePopper
          }),
          role: "menuitem",
          tabindex: "0",
          "aria-disabled": _ctx.props.disabled ? "true" : void 0,
          style: normalizeStyle(_ctx.labelStyle),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleSelect && _ctx.handleSelect(...args)),
          onKeydown: [
            _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => _ctx.handleSelect && _ctx.handleSelect(...args), ["stop"]), ["enter"])),
            _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => _ctx.handleSelect && _ctx.handleSelect(...args), ["stop", "prevent"]), ["space"]))
          ],
          onMouseenter: _cache[3] || (_cache[3] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),
          onMouseleave: _cache[4] || (_cache[4] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args))
        }, [
          _ctx.props.icon ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.nh.be("icon"))
          }, [
            renderSlot(_ctx.$slots, "icon", {}, () => [
              typeof _ctx.props.icon === "function" ? (openBlock(), createBlock(_component_Renderer, {
                key: 0,
                renderer: _ctx.props.icon
              }, null, 8, ["renderer"])) : (openBlock(), createBlock(_component_Icon, mergeProps({ key: 1 }, _ctx.props.iconProps, {
                icon: _ctx.props.icon
              }), null, 16, ["icon"]))
            ])
          ], 2)) : createCommentVNode("", true),
          createElementVNode("span", {
            class: normalizeClass({
              [_ctx.nh.be("title")]: true,
              [_ctx.nh.bem("title", "in-group")]: !_ctx.isHorizontal && _ctx.isGroup
            })
          }, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(_ctx.props.label), 1)
            ])
          ], 2),
          _ctx.isGroup ? (openBlock(), createBlock(_component_Icon, {
            key: 1,
            class: normalizeClass({
              [_ctx.nh.be("arrow")]: true,
              [_ctx.nh.bem("arrow", "visible")]: _ctx.groupExpanded
            })
          }, {
            default: withCtx(() => [
              createVNode(_component_ChevronDown)
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("", true)
        ], 46, _hoisted_1)
      ]),
      default: withCtx(() => [
        createElementVNode("span", {
          class: normalizeClass(_ctx.nh.be("tooltip-title"))
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(_ctx.props.label), 1)
          ])
        ], 2)
      ]),
      _: 3
    }, 8, ["reverse", "disabled"]),
    createVNode(_component_CollapseTransition, { appear: "" }, {
      default: withCtx(() => [
        _ctx.isGroup && !_ctx.isUsePopper ? withDirectives((openBlock(), createElementBlock("ul", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("list"))
        }, [
          renderSlot(_ctx.$slots, "group", {}, () => [
            createVNode(_component_Renderer, { renderer: _ctx.renderChildren }, null, 8, ["renderer"])
          ])
        ], 2)), [
          [vShow, _ctx.showGroup]
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }),
    _ctx.isGroup && _ctx.isUsePopper ? (openBlock(), createBlock(_component_Portal, {
      key: 0,
      to: _ctx.transferTo
    }, {
      default: withCtx(() => [
        createVNode(Transition, {
          name: _ctx.transition,
          appear: "",
          onAfterLeave: _cache[7] || (_cache[7] = ($event) => _ctx.popperShow = false)
        }, {
          default: withCtx(() => [
            _ctx.popperShow ? withDirectives((openBlock(), createElementBlock("div", {
              key: 0,
              ref: "popper",
              class: normalizeClass([
                _ctx.nh.be("popper"),
                _ctx.nh.bs("vars"),
                _ctx.isHorizontal && _ctx.nh.bem("popper", "drop"),
                _ctx.transferTo !== "body" && [_ctx.nh.bem("popper", "inherit")]
              ]),
              onMouseenter: _cache[5] || (_cache[5] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),
              onMouseleave: _cache[6] || (_cache[6] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args))
            }, [
              createElementVNode("ul", {
                class: normalizeClass(_ctx.nh.be("list"))
              }, [
                renderSlot(_ctx.$slots, "group", {}, () => [
                  createVNode(_component_Renderer, { renderer: _ctx.renderChildren }, null, 8, ["renderer"])
                ])
              ], 2)
            ], 34)), [
              [vShow, _ctx.popperShow && _ctx.showGroup]
            ]) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["name"])
      ]),
      _: 3
    }, 8, ["to"])) : createCommentVNode("", true)
  ], 2);
}
var MenuItem = /* @__PURE__ */ _export_sfc(MenuItem$1, [["render", _sfc_render]]);
export { MenuItem as default };
