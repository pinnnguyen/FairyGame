import { defineComponent, inject, ref, computed, reactive, provide, watch, nextTick, createVNode, Transition, withDirectives, vShow } from "vue";
import "../icon/index.mjs";
import "../menu-item/index.mjs";
import "../portal/index.mjs";
import { Ellipsis } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { useClickOutside, usePopper, useSetTimeout } from "@vexip-ui/hooks";
import { callIfFunc } from "@vexip-ui/utils";
import { MENU_STATE, MENU_ITEM_STATE } from "./symbol.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import MenuItem from "./menu-item.mjs";
import Icon from "../icon/icon.mjs";
import Portal from "../portal/portal.mjs";
var MenuRest = defineComponent({
  name: "MenuRest",
  props: {
    menus: {
      type: Array,
      default: () => []
    }
  },
  setup(props) {
    const menuState = inject(MENU_STATE, null);
    const nh = useNameHelper("menu");
    const groupExpanded = ref(false);
    const sonSelected = ref(false);
    const popperShow = ref(false);
    const transfer = computed(() => {
      var _a;
      return (_a = menuState == null ? void 0 : menuState.transfer) != null ? _a : false;
    });
    const dropTrigger = computed(() => (menuState == null ? void 0 : menuState.trigger) || "hover");
    const wrapper = useClickOutside(handleClickOutside);
    const {
      reference,
      popper,
      transferTo,
      updatePopper
    } = usePopper({
      placement: ref("bottom"),
      transfer,
      wrapper
    });
    const itemState = reactive({
      el: wrapper,
      label: "",
      indent: 1,
      groupExpanded,
      showGroup: groupExpanded,
      isUsePopper: true,
      parentState: null,
      transfer,
      cachedExpanded: false,
      updateSonSelected,
      toggleGroupExpanded,
      handleMouseEnter,
      handleMouseLeave
    });
    provide(MENU_ITEM_STATE, itemState);
    watch(groupExpanded, (value) => {
      if (value) {
        popperShow.value = true;
        updatePopper();
      }
    });
    function updateSonSelected(selected) {
      sonSelected.value = selected;
    }
    function toggleGroupExpanded(expanded) {
      groupExpanded.value = expanded;
    }
    const {
      timer
    } = useSetTimeout();
    function handleMouseEnter() {
      clearTimeout(timer.hover);
      if (dropTrigger.value !== "hover")
        return;
      timer.hover = setTimeout(() => {
        groupExpanded.value = true;
      }, 250);
    }
    function handleMouseLeave() {
      clearTimeout(timer.hover);
      if (dropTrigger.value !== "hover")
        return;
      timer.hover = setTimeout(() => {
        groupExpanded.value = false;
      }, 250);
    }
    function handleClick() {
      if (dropTrigger.value === "click") {
        groupExpanded.value = true;
      }
    }
    function handleClickOutside() {
      if (dropTrigger.value === "click") {
        nextTick(() => {
          groupExpanded.value = false;
        });
      }
    }
    function handlePopperHide() {
      popperShow.value = false;
    }
    function renderMenuItems() {
      var _a;
      if (!((_a = props.menus) == null ? void 0 : _a.length)) {
        return null;
      }
      return props.menus.map((item) => createVNode(MenuItem, {
        "label": item.label,
        "icon": item.icon,
        "icon-props": item.iconProps,
        "disabled": item.disabled,
        "children": item.children,
        "route": item.route
      }, {
        default: () => [item.name ? callIfFunc(item.name) : item.label]
      }));
    }
    return () => {
      return createVNode("div", {
        "ref": wrapper,
        "class": nh.be("rest"),
        "onMouseenter": handleMouseEnter,
        "onMouseleave": handleMouseLeave
      }, [createVNode("div", {
        "ref": reference,
        "class": [nh.be("rest-handler"), sonSelected.value && nh.bem("rest-handler", "selected")],
        "onClick": handleClick
      }, [createVNode(Icon, null, {
        default: () => [createVNode(Ellipsis, null, null)]
      })]), createVNode(Portal, {
        "to": transferTo.value
      }, {
        default: () => [createVNode(Transition, {
          "name": nh.ns("drop"),
          "appear": true,
          "onAfterLeave": handlePopperHide
        }, {
          default: () => [popperShow.value && withDirectives(createVNode("div", {
            "ref": popper,
            "class": [nh.be("popper"), nh.bs("vars"), nh.bem("popper", "drop")]
          }, [createVNode("ul", {
            "class": [nh.be("list"), nh.bem("list", "theme")]
          }, [renderMenuItems()])]), [[vShow, groupExpanded.value]])]
        })]
      })]);
    };
  }
});
export { MenuRest as default };
