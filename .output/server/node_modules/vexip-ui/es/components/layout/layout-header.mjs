import { defineComponent, ref, computed, watch, onBeforeMount, createVNode, mergeProps } from "vue";
import "../avatar/index.mjs";
import "../dropdown/index.mjs";
import "../dropdown-list/index.mjs";
import "../dropdown-item/index.mjs";
import "../icon/index.mjs";
import "../menu/index.mjs";
import "../switch/index.mjs";
import { ArrowRightFromBracket, Check, Moon, Sun, User } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { useMounted } from "@vexip-ui/hooks";
import { isClient } from "@vexip-ui/utils";
import { layoutHeaderProps } from "./props.mjs";
import { useLayoutState, computeSeriesColors } from "./helper.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
import Icon from "../icon/icon.mjs";
import Switch from "../switch/switch.mjs";
import Menu from "../menu/menu.mjs";
import Dropdown from "../dropdown/dropdown.mjs";
import Avatar from "../avatar/avatar.mjs";
import DropdownList from "../dropdown/dropdown-list.mjs";
import DropdownItem from "../dropdown/dropdown-item.mjs";
var LayoutHeader = defineComponent({
  name: "LayoutHeader",
  props: layoutHeaderProps,
  emits: ["update:sign-type", "update:color", "update:user-dropped"],
  setup(_props, {
    slots,
    emit,
    expose
  }) {
    var _a, _b, _c;
    const props = useProps("layout", _props, {
      tag: "header",
      logo: "",
      signName: "",
      user: {
        default: () => ({
          name: ""
        }),
        static: true
      },
      userDropped: false,
      avatarCircle: false,
      config: () => ["nav", "theme", "color"],
      actions: () => [],
      signType: "aside",
      colors: () => ["#339af0", "#f03e3e", "#be4bdb", "#7950f2", "#1b9e44", "#f76707"],
      color: "",
      menus: {
        default: () => [],
        static: true
      },
      menuProps: null,
      onNavChange: null,
      onColorChange: null,
      onUserAction: null,
      onSignClick: null
    });
    const nh = useNameHelper("layout");
    const locale = useLocale("layout");
    const layoutState = useLayoutState();
    const currentSignType = ref(props.signType);
    const currentUserDropped = ref(props.userDropped);
    const menu = ref(null);
    const {
      isMounted
    } = useMounted();
    const rootEl = computed(() => {
      isMounted.value;
      return isClient ? document.documentElement : null;
    });
    const currentColor = ref(props.color || ((_a = props.colors) == null ? void 0 : _a[0]) || getBaseColor());
    const isDark = ref((_c = (_b = rootEl.value) == null ? void 0 : _b.classList.contains("dark")) != null ? _c : false);
    const className = computed(() => {
      return [nh.be("header"), {
        [nh.bs("vars")]: !layoutState.isLayout,
        [nh.bem("header", "inherit")]: layoutState.isLayout || props.inherit,
        [nh.bem("header", "affixed")]: layoutState.affixed
      }];
    });
    const userActions = computed(() => {
      var _a2;
      if (!((_a2 = props.actions) == null ? void 0 : _a2.length)) {
        return [{
          label: "signOut",
          name: locale.value.signOut,
          icon: ArrowRightFromBracket
        }];
      }
      return props.actions;
    });
    const hasLeft = computed(() => {
      return !!(props.logo || props.signName || slots.left);
    });
    const hasMenu = computed(() => {
      var _a2, _b2;
      return !!(((_a2 = props.menus) == null ? void 0 : _a2.length) || ((_b2 = props.menuProps) == null ? void 0 : _b2.router));
    });
    expose({
      menu,
      expandMenuByLabel
    });
    watch(() => props.signType, (value) => {
      currentSignType.value = value;
    });
    watch(() => props.color, (value) => {
      var _a2;
      currentColor.value = value || ((_a2 = props.colors) == null ? void 0 : _a2[0]) || getBaseColor();
    });
    watch(() => props.userDropped, (value) => {
      currentUserDropped.value = value;
    });
    watch(currentColor, computeSeriesColors);
    onBeforeMount(() => {
      computeSeriesColors(currentColor.value);
    });
    function getBaseColor() {
      if (rootEl.value) {
        return getComputedStyle(rootEl.value).getPropertyValue("--vxp-color-primary-base");
      }
      return "#339af0";
    }
    function handleUserActionSelect(label, meta) {
      emitEvent(props.onUserAction, label, meta);
    }
    function handleSignTypeChange(type) {
      const queue = [() => {
        layoutState.locked = true;
      }, () => {
        currentSignType.value = type;
        emitEvent(props.onNavChange, type);
        emit("update:sign-type", type);
      }, () => {
        layoutState.locked = false;
      }];
      const run = () => {
        var _a2;
        (_a2 = queue.shift()) == null ? void 0 : _a2();
        queue.length && requestAnimationFrame(run);
      };
      run();
    }
    function toggleReduce(target = !layoutState.reduced) {
      layoutState.reduced = target;
      emitEvent(props.onReducedChange, target);
    }
    function handleColorChange(color) {
      currentColor.value = color;
      emitEvent(props.onColorChange, color);
      emit("update:color", color);
    }
    function handleSignClick(event) {
      emitEvent(props.onSignClick, event);
    }
    function toggleUserDrop(target = !currentUserDropped.value) {
      currentUserDropped.value = target;
      emitEvent(props.onDropChange, target);
      emit("update:user-dropped", target);
    }
    function handleMenuSelect(label, meta) {
      toggleUserDrop(false);
      emitEvent(props.onMenuSelect, label, meta);
    }
    function expandMenuByLabel(label) {
      var _a2;
      (_a2 = menu.value) == null ? void 0 : _a2.expandItemByLabel(label);
    }
    function toggleTheme(darkMode) {
      if (!isClient)
        return;
      requestAnimationFrame(() => {
        isDark.value = darkMode;
        if (rootEl.value) {
          if (darkMode) {
            rootEl.value.classList.add("dark");
          } else {
            rootEl.value.classList.remove("dark");
          }
        }
      });
    }
    function getSlotParams() {
      return {
        reduced: layoutState.reduced,
        toggleReduce,
        handleColorChange,
        toggleUserDrop
      };
    }
    function renderCheck() {
      return createVNode(Icon, null, {
        default: () => [createVNode(Check, null, null)]
      });
    }
    function renderLayoutConfig() {
      return createVNode("div", {
        "class": nh.be("config-unit")
      }, [createVNode("div", {
        "class": [nh.be("brief-block"), nh.bem("brief-block", "aside")],
        "onClick": () => handleSignTypeChange("aside")
      }, [currentSignType.value === "aside" && renderCheck()]), createVNode("div", {
        "class": nh.be("brief-block"),
        "onClick": () => handleSignTypeChange("header")
      }, [currentSignType.value === "header" && renderCheck()])]);
    }
    function renderThemeConfig() {
      return createVNode("div", {
        "class": nh.be("config-unit")
      }, [createVNode(Switch, {
        "value": isDark.value,
        "class": [nh.be("theme-mode"), isDark.value && nh.bem("theme-mode", "dark")],
        "open-icon": Moon,
        "close-icon": Sun,
        "aria-label": "theme",
        "onChange": toggleTheme
      }, null)]);
    }
    function renderColorConfig() {
      var _a2;
      if (!((_a2 = props.colors) == null ? void 0 : _a2.length)) {
        return null;
      }
      return createVNode("div", {
        "class": nh.be("config-unit")
      }, [props.colors.map((color) => createVNode("div", {
        "class": nh.be("major-color"),
        "style": {
          backgroundColor: color
        },
        "onClick": () => handleColorChange(color)
      }, [currentColor.value === color && renderCheck()]))]);
    }
    return () => {
      const CustomTag = props.tag || "header";
      return createVNode(CustomTag, {
        "class": className.value
      }, {
        default: () => [hasLeft.value && createVNode("div", {
          "class": nh.be("header-left")
        }, [slots.left ? slots.left(getSlotParams()) : props.signType === "header" ? createVNode("div", {
          "class": nh.be("sign"),
          "onClick": handleSignClick
        }, [props.logo && createVNode("div", {
          "class": nh.be("logo")
        }, [createVNode("img", {
          "src": props.logo,
          "alt": "Logo"
        }, null)]), props.signName && createVNode("span", {
          "class": nh.be("sign-name")
        }, [props.signName])]) : null]), createVNode("div", {
          "class": nh.be("header-main")
        }, [slots.default ? slots.default(getSlotParams()) : hasMenu.value ? createVNode(Menu, mergeProps({
          "ref": menu
        }, props.menuProps || {}, {
          "horizontal": true,
          "transfer": true,
          "options": props.menus,
          "onSelect": handleMenuSelect
        }), null) : null]), slots.right && createVNode("div", {
          "class": nh.be("header-right")
        }, [slots.right(getSlotParams())]), slots.user ? slots.user(getSlotParams()) : createVNode(Dropdown, {
          "class": nh.be("user"),
          "transfer": true,
          "placement": "bottom-end",
          "visible": currentUserDropped.value,
          "trigger": "custom",
          "onClickOutside": () => toggleUserDrop(false)
        }, {
          default: () => {
            var _a2;
            if (slots.avatar) {
              return slots.avatar(getSlotParams());
            }
            if (typeof ((_a2 = props.user) == null ? void 0 : _a2.avatar) === "string") {
              return createVNode(Avatar, {
                "src": props.user.avatar,
                "icon": User,
                "circle": props.avatarCircle,
                "onClick": () => toggleUserDrop()
              }, null);
            }
            return createVNode(Avatar, {
              "icon": props.user.avatar || User,
              "circle": props.avatarCircle,
              "onClick": () => toggleUserDrop()
            }, null);
          },
          drop: () => createVNode(DropdownList, null, {
            default: () => {
              var _a2, _b2;
              return [((_a2 = props.user) == null ? void 0 : _a2.name) && createVNode("li", {
                "class": nh.be("user-profile")
              }, [createVNode("span", {
                "class": nh.be("user-name")
              }, [props.user.name]), props.user.email && createVNode("span", {
                "class": nh.be("user-email")
              }, [props.user.email])]), ((_b2 = props.config) == null ? void 0 : _b2.length) ? createVNode("li", {
                "class": nh.be("config")
              }, [props.config.includes("nav") && layoutState.navConfig && [createVNode("div", {
                "class": nh.be("config-label")
              }, [locale.value.signType]), renderLayoutConfig()], props.config.includes("theme") && [createVNode("div", {
                "class": nh.be("config-label")
              }, [locale.value.themeMode]), renderThemeConfig()], props.config.includes("color") && [createVNode("div", {
                "class": nh.be("config-label")
              }, [locale.value.majorColor]), renderColorConfig()]]) : null, userActions.value.map((action) => createVNode(DropdownItem, {
                "class": nh.be("user-action"),
                "label": action.label,
                "disabled": action.disabled,
                "divided": action.divided,
                "onSelect": () => handleUserActionSelect(action.label, action.meta || {})
              }, {
                default: () => [action.icon && createVNode(Icon, {
                  "icon": action.icon,
                  "style": {
                    marginRight: "6px"
                  }
                }, null), action.name || action.label]
              }))];
            }
          })
        })]
      });
    };
  }
});
export { LayoutHeader as default };
