import { defineComponent, reactive, computed, toRef, provide, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from "vue";
import "../../common/config/src/index.mjs";
import { debounceMinor, isNull } from "@vexip-ui/utils";
import { timelineProps } from "./props.mjs";
import { TIMELINE_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Timeline",
  props: timelineProps,
  emits: [],
  setup(_props) {
    const props = useProps("timeline", _props, {
      pending: false,
      bothSides: false,
      dashed: false,
      lineColor: null,
      spacing: null,
      flip: false,
      horizontal: false
    });
    const nh = useNameHelper("timeline");
    const itemStates = reactive(/* @__PURE__ */ new Set());
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm("pending")]: props.pending,
        [nh.bm("both-sides")]: props.bothSides,
        [nh.bm("flip")]: props.flip,
        [nh.bm("horizontal")]: props.horizontal
      };
    });
    const height = computed(() => {
      return Math.max(...Array.from(itemStates).map((state2) => state2.height)) * 2;
    });
    const refreshLabels = debounceMinor(() => {
      const total = itemStates.size;
      Array.from(itemStates).forEach((item, index) => {
        item.index = index + 1;
        item.total = total;
        if (isNull(item.label)) {
          item.label = index + 1;
        }
      });
    });
    const state = reactive({
      dashed: toRef(props, "dashed"),
      lineColor: toRef(props, "lineColor"),
      spacing: toRef(props, "spacing"),
      bothSides: toRef(props, "bothSides"),
      horizontal: toRef(props, "horizontal"),
      increaseItem,
      decreaseItem,
      handleSignalClick
    });
    provide(TIMELINE_STATE, state);
    function increaseItem(item) {
      itemStates.add(item);
      refreshLabels();
    }
    function decreaseItem(item) {
      itemStates.delete(item);
      refreshLabels();
    }
    function handleSignalClick(label) {
      emitEvent(props.onSignalClick, label);
    }
    return {
      nh,
      props,
      className,
      height,
      itemStates
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    style: normalizeStyle({ height: _ctx.props.horizontal && _ctx.props.bothSides ? `${_ctx.height}px` : void 0 })
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 6);
}
var Timeline = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Timeline as default };
