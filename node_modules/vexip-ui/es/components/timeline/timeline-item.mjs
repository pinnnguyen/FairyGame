import { defineComponent, inject, ref, computed, reactive, watch, onMounted, onUpdated, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot } from "vue";
import "../../common/config/src/index.mjs";
import { timelineItemProps } from "./props.mjs";
import { TIMELINE_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const timelineItemTypes = Object.freeze([
  "default",
  "success",
  "error",
  "warning",
  "disabled"
]);
const _sfc_main = defineComponent({
  name: "TimelineItem",
  props: timelineItemProps,
  emits: [],
  setup(_props) {
    const props = useProps("timelineItem", _props, {
      type: {
        default: "default",
        validator: (value) => timelineItemTypes.includes(value)
      },
      color: "",
      label: {
        default: null,
        static: true
      },
      dashed: null,
      lineColor: null,
      spacing: null
    });
    const timelineState = inject(TIMELINE_STATE, null);
    const nh = useNameHelper("timeline");
    const currentLabel = ref(props.label);
    const content = ref();
    const className = computed(() => {
      return {
        [nh.be("item")]: true,
        [nh.bem("item", props.type)]: props.type !== "default"
      };
    });
    const itemStyle = computed(() => {
      const spacing = props.spacing || props.spacing === 0 ? props.spacing : timelineState == null ? void 0 : timelineState.spacing;
      const style = {
        [nh.cv("item-span")]: typeof spacing === "number" ? `${spacing}px` : spacing
      };
      if (props.color) {
        style[nh.cv("pointer-color")] = props.color;
        style[nh.cv("pointer-b-color")] = props.color;
      }
      return style;
    });
    const lineStyle = computed(() => {
      var _a, _b, _c;
      const isDashed = (_b = (_a = props.dashed) != null ? _a : timelineState == null ? void 0 : timelineState.dashed) != null ? _b : false;
      const color = (_c = props.lineColor) != null ? _c : timelineState == null ? void 0 : timelineState.lineColor;
      return {
        borderLeftStyle: isDashed ? "dashed" : void 0,
        borderLeftColor: color
      };
    });
    if (timelineState) {
      let updateHeight = function() {
        requestAnimationFrame(() => {
          if ((timelineState == null ? void 0 : timelineState.horizontal) && content.value) {
            state.height = content.value.scrollHeight;
          }
        });
      };
      const state = reactive({
        label: currentLabel,
        index: 0,
        total: 0,
        height: 0
      });
      timelineState.increaseItem(state);
      watch(() => timelineState.bothSides, updateHeight);
      watch(() => timelineState.horizontal, updateHeight);
      onMounted(updateHeight);
      onUpdated(updateHeight);
      onBeforeUnmount(() => {
        timelineState.decreaseItem(state);
      });
    }
    function handleSignalClick() {
      emitEvent(props.onSignalClick, currentLabel.value);
      timelineState == null ? void 0 : timelineState.handleSignalClick(currentLabel.value);
    }
    return {
      nh,
      className,
      itemStyle,
      lineStyle,
      content,
      handleSignalClick
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    style: normalizeStyle(_ctx.itemStyle)
  }, [
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("signal")),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleSignalClick && _ctx.handleSignalClick(...args))
    }, [
      renderSlot(_ctx.$slots, "signal", {}, () => [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("pointer"))
        }, null, 2)
      ])
    ], 2),
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("line")),
      style: normalizeStyle(_ctx.lineStyle)
    }, null, 6),
    createElementVNode("div", {
      ref: "content",
      class: normalizeClass(_ctx.nh.be("content"))
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2)
  ], 6);
}
var TimelineItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TimelineItem as default };
