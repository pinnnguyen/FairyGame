import { defineComponent, ref, computed, provide, reactive, toRef, watch, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, renderSlot, createCommentVNode, Fragment, renderList, createBlock, createTextVNode, toDisplayString, normalizeStyle } from "vue";
import "../icon/index.mjs";
import "../resize-observer/index.mjs";
import "../tab-nav-item/index.mjs";
import "../../common/config/src/index.mjs";
import { Plus } from "@vexip-ui/icons";
import { useDisplay } from "@vexip-ui/hooks";
import { debounceMinor, isNull } from "@vexip-ui/utils";
import { tabNavProps } from "./props.mjs";
import { TAB_NAV_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import ResizeObserver from "../resize-observer/resize-observer.mjs";
import TabNavItem from "./tab-nav-item.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const trackStyleMap = {
  top: ["left", "width"],
  right: ["top", "height"],
  bottom: ["left", "width"],
  left: ["top", "height"]
};
const _sfc_main = defineComponent({
  name: "TabNav",
  components: {
    Icon,
    ResizeObserver,
    TabNavItem,
    Plus
  },
  props: tabNavProps,
  emits: ["update:active"],
  setup(_props, { emit }) {
    const props = useProps("tabNav", _props, {
      active: {
        default: null,
        static: true
      },
      card: false,
      options: {
        default: () => [],
        static: true
      },
      align: "left",
      placement: "top",
      closable: false,
      showAdd: false
    });
    const nh = useNameHelper("tab-nav");
    const currentActive = ref(props.active);
    const markerPosition = ref(0);
    const markerSize = ref(0);
    const itemStates = /* @__PURE__ */ new Set();
    const wrapper = useDisplay(updateMarkerPosition);
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(`align-${props.align}`)]: true,
        [nh.bm(props.placement)]: true,
        [nh.bm("card")]: props.card
      };
    });
    const markerStyle = computed(() => {
      const [position, length] = trackStyleMap[props.placement];
      return {
        [position]: `${markerPosition.value}px`,
        [length]: `${markerSize.value}px`
      };
    });
    const items = computed(() => {
      return props.options.map((item) => {
        if (typeof item === "string" || typeof item === "number") {
          return { label: item };
        }
        return item;
      });
    });
    const refreshLabels = debounceMinor(() => {
      const total = itemStates.size;
      Array.from(itemStates).forEach((item, index) => {
        item.index = index + 1;
        item.total = total;
        if (isNull(item.label)) {
          item.label = index + 1;
        }
      });
      if (itemStates.size >= 1 && isActiveEmpty()) {
        currentActive.value = Array.from(itemStates)[0].label;
      }
    });
    provide(
      TAB_NAV_STATE,
      reactive({
        currentActive,
        closable: toRef(props, "closable"),
        increaseItem,
        decreaseItem,
        handleActive,
        handleClose,
        refreshLabels
      })
    );
    watch(
      () => props.active,
      (value) => {
        currentActive.value = value;
      }
    );
    watch(
      () => props.placement,
      () => {
        requestAnimationFrame(updateMarkerPosition);
      }
    );
    onMounted(updateMarkerPosition);
    function isActiveEmpty() {
      return isNull(currentActive.value) || currentActive.value === "";
    }
    function increaseItem(item) {
      itemStates.add(item);
      refreshLabels();
    }
    function decreaseItem(item) {
      itemStates.delete(item);
      refreshLabels();
    }
    function handleActive(label) {
      currentActive.value = label;
      updateMarkerPosition();
      emitEvent(props.onChange, label);
      emit("update:active", label);
    }
    function handleAdd() {
      emitEvent(props.onAdd);
    }
    function handleClose(label) {
      emitEvent(props.onClose, label);
      requestAnimationFrame(updateMarkerPosition);
    }
    function updateMarkerPosition() {
      const activeItem = Array.from(itemStates).find((item) => item.label === currentActive.value);
      if (activeItem == null ? void 0 : activeItem.el) {
        if (props.placement === "top" || props.placement === "bottom") {
          markerPosition.value = activeItem.el.offsetLeft;
          markerSize.value = activeItem.el.offsetWidth;
        } else {
          markerPosition.value = activeItem.el.offsetTop;
          markerSize.value = activeItem.el.offsetHeight;
        }
      } else {
        markerPosition.value = 0;
        markerSize.value = 0;
      }
    }
    return {
      props,
      nh,
      className,
      markerStyle,
      items,
      wrapper,
      updateMarkerPosition,
      handleAdd
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ResizeObserver = resolveComponent("ResizeObserver");
  const _component_TabNavItem = resolveComponent("TabNavItem");
  const _component_Plus = resolveComponent("Plus");
  const _component_Icon = resolveComponent("Icon");
  return openBlock(), createElementBlock("div", {
    ref: "wrapper",
    class: normalizeClass(_ctx.className),
    tabindex: "-1"
  }, [
    createElementVNode("ul", {
      class: normalizeClass(_ctx.nh.be("list")),
      role: "tablist"
    }, [
      createVNode(_component_ResizeObserver, { "on-resize": _ctx.updateMarkerPosition }, {
        default: withCtx(() => [
          createElementVNode("li", {
            class: normalizeClass([_ctx.nh.be("extra"), _ctx.nh.bem("extra", "prefix")])
          }, [
            _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.nh.be("prefix"))
            }, [
              renderSlot(_ctx.$slots, "prefix")
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 3
      }, 8, ["on-resize"]),
      renderSlot(_ctx.$slots, "default", {}, () => [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item) => {
          return openBlock(), createBlock(_component_TabNavItem, {
            key: item.label,
            label: item.label,
            icon: item.icon,
            disabled: item.disabled,
            closable: item.closable,
            onToggle: item.onToggle
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(item.content || item.label), 1)
            ]),
            _: 2
          }, 1032, ["label", "icon", "disabled", "closable", "onToggle"]);
        }), 128))
      ]),
      _ctx.props.showAdd || _ctx.$slots.add ? (openBlock(), createElementBlock("li", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("item")),
        role: "none"
      }, [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("pad"))
        }, null, 2),
        createElementVNode("button", {
          class: normalizeClass(_ctx.nh.be("add")),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleAdd && _ctx.handleAdd(...args))
        }, [
          renderSlot(_ctx.$slots, "add", {}, () => [
            createVNode(_component_Icon, { scale: 1.2 }, {
              default: withCtx(() => [
                createVNode(_component_Plus)
              ]),
              _: 1
            }, 8, ["scale"])
          ])
        ], 2)
      ], 2)) : createCommentVNode("", true),
      createVNode(_component_ResizeObserver, { "on-resize": _ctx.updateMarkerPosition }, {
        default: withCtx(() => [
          createElementVNode("li", {
            class: normalizeClass([_ctx.nh.be("extra"), _ctx.nh.bem("extra", "suffix")])
          }, [
            _ctx.$slots.suffix ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.nh.be("suffix"))
            }, [
              renderSlot(_ctx.$slots, "suffix")
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 3
      }, 8, ["on-resize"])
    ], 2),
    !_ctx.props.card ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(_ctx.nh.be("track")),
      style: normalizeStyle(_ctx.markerStyle)
    }, [
      renderSlot(_ctx.$slots, "marker", {}, () => [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("marker"))
        }, null, 2)
      ])
    ], 6)) : createCommentVNode("", true)
  ], 2);
}
var TabNav = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TabNav as default };
