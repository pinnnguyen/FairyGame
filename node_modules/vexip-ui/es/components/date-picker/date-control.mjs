import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, Fragment, createElementVNode } from "vue";
import "../../common/config/src/index.mjs";
import { doubleDigits } from "@vexip-ui/utils";
import { handleKeyEnter } from "./helper.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "DateControl",
  props: {
    unitType: {
      type: String,
      default: "date"
    },
    enabled: {
      type: Object,
      default: () => ({})
    },
    activated: {
      type: Object,
      default: () => ({})
    },
    dateValue: {
      type: Object,
      default: () => ({})
    },
    dateSeparator: {
      type: String,
      default: "/"
    },
    timeSeparator: {
      type: String,
      default: ":"
    },
    visible: {
      type: Boolean,
      default: false
    },
    focused: {
      type: Boolean,
      default: false
    },
    filler: {
      type: String,
      default: "-",
      validator: (value) => {
        return value.length === 1;
      }
    },
    noFiller: {
      type: Boolean,
      default: false
    },
    steps: {
      type: Array,
      default: () => [1, 1, 1]
    },
    ctrlSteps: {
      type: Array,
      default: () => [5, 5, 5]
    },
    labels: {
      type: Object,
      default: () => ({})
    },
    hasError: {
      type: Boolean,
      default: false
    }
  },
  emits: ["input", "plus", "minus", "enter", "cancel", "unit-focus", "prev-unit", "next-unit"],
  setup(props, { emit }) {
    const nh = useNameHelper("date-picker");
    const wrapper = ref();
    const isActivated = computed(() => {
      return Object.keys(props.enabled).every((type) => {
        return !props.enabled[type] || props.activated[type];
      });
    });
    const className = computed(() => {
      return {
        [nh.be("input")]: true,
        [nh.bem("input", "activated")]: isActivated.value,
        [nh.bem("input", "error")]: props.hasError
      };
    });
    const showTimeUnits = computed(() => {
      return props.enabled.hour || props.enabled.minute || props.enabled.second;
    });
    const formattedYear = computed(() => {
      return formatValue("year");
    });
    const formattedMonth = computed(() => {
      return formatValue("month");
    });
    const formattedDate = computed(() => {
      return formatValue("date");
    });
    const formattedHour = computed(() => {
      return formatValue("hour");
    });
    const formattedMinute = computed(() => {
      return formatValue("minute");
    });
    const formattedSecond = computed(() => {
      return formatValue("second");
    });
    function formatValue(type) {
      const isYear = type === "year";
      const filler = props.filler;
      return props.noFiller || props.activated[type] ? isYear ? props.dateValue.year.toString().padStart(4, "0") : doubleDigits(props.dateValue[type]) : `${isYear ? `${filler}${filler}` : ""}${filler}${filler}`;
    }
    function handleInputFocus(type) {
      emit("unit-focus", type);
    }
    function handleInput(event) {
      if (!props.visible)
        return;
      const type = handleKeyEnter(event);
      switch (type) {
        case "next": {
          emit("next-unit");
          break;
        }
        case "prev": {
          emit("prev-unit");
          break;
        }
        case "up": {
          emit("minus", event.ctrlKey);
          break;
        }
        case "down": {
          emit("plus", event.ctrlKey);
          break;
        }
        case "ok": {
          emit("enter");
          break;
        }
        case "esc": {
          emit("cancel");
          break;
        }
        default: {
          if (typeof type === "number") {
            emit("input", type);
          }
        }
      }
    }
    return {
      nh,
      className,
      showTimeUnits,
      formattedYear,
      formattedMonth,
      formattedDate,
      formattedHour,
      formattedMinute,
      formattedSecond,
      wrapper,
      handleInputFocus,
      handleInput,
      focus: () => {
        var _a;
        (_a = wrapper.value) == null ? void 0 : _a.focus();
      },
      blur: () => {
        var _a;
        (_a = wrapper.value) == null ? void 0 : _a.blur();
      }
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    ref: "wrapper",
    class: normalizeClass(_ctx.className),
    tabindex: "-1",
    onKeydown: _cache[6] || (_cache[6] = (...args) => _ctx.handleInput && _ctx.handleInput(...args))
  }, [
    _ctx.enabled.year ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "year" && _ctx.nh.bem("unit", "focused")]),
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleInputFocus("year"))
    }, toDisplayString(_ctx.formattedYear), 3)) : createCommentVNode("", true),
    _ctx.labels.year ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(_ctx.nh.be("label"))
    }, toDisplayString(_ctx.labels.year), 3)) : createCommentVNode("", true),
    _ctx.enabled.month ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
      _ctx.enabled.year ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("separator"))
      }, toDisplayString(_ctx.dateSeparator), 3)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "month" && _ctx.nh.bem("unit", "focused")]),
        onClick: _cache[1] || (_cache[1] = ($event) => _ctx.handleInputFocus("month"))
      }, toDisplayString(_ctx.formattedMonth), 3),
      _ctx.labels.month ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("label"))
      }, toDisplayString(_ctx.labels.month), 3)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    _ctx.enabled.date ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
      _ctx.enabled.month || _ctx.enabled.year ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.nh.be("separator"))
      }, toDisplayString(_ctx.dateSeparator), 3)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "date" && _ctx.nh.bem("unit", "focused")]),
        onClick: _cache[2] || (_cache[2] = ($event) => _ctx.handleInputFocus("date"))
      }, toDisplayString(_ctx.formattedDate), 3),
      _ctx.labels.date ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("label"))
      }, toDisplayString(_ctx.labels.date), 3)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    _ctx.showTimeUnits ? (openBlock(), createElementBlock(Fragment, { key: 4 }, [
      createElementVNode("div", {
        class: normalizeClass(_ctx.nh.be("pad"))
      }, null, 2),
      _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "hour" && _ctx.nh.bem("unit", "focused")]),
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.handleInputFocus("hour"))
      }, toDisplayString(_ctx.formattedHour), 3)) : createCommentVNode("", true),
      _ctx.labels.hour ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.nh.be("label"))
      }, toDisplayString(_ctx.labels.hour), 3)) : createCommentVNode("", true),
      _ctx.enabled.minute ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
        _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("separator"))
        }, toDisplayString(_ctx.timeSeparator), 3)) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "minute" && _ctx.nh.bem("unit", "focused")]),
          onClick: _cache[4] || (_cache[4] = ($event) => _ctx.handleInputFocus("minute"))
        }, toDisplayString(_ctx.formattedMinute), 3),
        _ctx.labels.minute ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(_ctx.nh.be("label"))
        }, toDisplayString(_ctx.labels.minute), 3)) : createCommentVNode("", true)
      ], 64)) : createCommentVNode("", true),
      _ctx.enabled.second ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
        _ctx.enabled.minute || _ctx.enabled.hour ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("separator"))
        }, toDisplayString(_ctx.timeSeparator), 3)) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass([_ctx.nh.be("unit"), _ctx.visible && _ctx.unitType === "second" && _ctx.nh.bem("unit", "focused")]),
          onClick: _cache[5] || (_cache[5] = ($event) => _ctx.handleInputFocus("second"))
        }, toDisplayString(_ctx.formattedSecond), 3),
        _ctx.labels.second ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(_ctx.nh.be("label"))
        }, toDisplayString(_ctx.labels.second), 3)) : createCommentVNode("", true)
      ], 64)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true)
  ], 34);
}
var DateControl = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { DateControl as default };
