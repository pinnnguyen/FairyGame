import { defineComponent, ref, computed, provide, reactive, watch, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, createSlots, withCtx, Fragment, renderList, createBlock, createTextVNode, toDisplayString, renderSlot, createCommentVNode } from "vue";
import "../renderer/index.mjs";
import "../tab-nav/index.mjs";
import "../tab-nav-item/index.mjs";
import "../../common/config/src/index.mjs";
import { debounceMinor, isNull, isFunction } from "@vexip-ui/utils";
import { tabsProps } from "./props.mjs";
import { TABS_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Renderer from "../renderer/renderer.mjs";
import TabNav from "../tab-nav/tab-nav.mjs";
import TabNavItem from "../tab-nav/tab-nav-item.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Tabs",
  components: {
    Renderer,
    TabNav,
    TabNavItem
  },
  props: tabsProps,
  emits: ["update:active"],
  setup(_props, { emit }) {
    const props = useProps("tabs", _props, {
      active: {
        default: null,
        static: true
      },
      card: false,
      align: "left",
      placement: "top",
      closable: false,
      showAdd: false
    });
    const currentActive = ref(props.active);
    const currentIndex = ref(0);
    const itemStates = ref(/* @__PURE__ */ new Set());
    const isTransition = ref(false);
    const mainStyle = computed(() => {
      return {
        transform: `translateX(-${currentIndex.value}00%) translateZ(0)`
      };
    });
    const itemList = computed(() => {
      return Array.from(itemStates.value);
    });
    const refreshLabels = debounceMinor(() => {
      itemList.value.forEach((item, index) => {
        if (isNull(item.label)) {
          item.label = index + 1;
        }
      });
      if (itemList.value.length >= 1 && isActiveEmpty()) {
        currentActive.value = itemList.value[0].label;
      }
    });
    const computeIndex = debounceMinor(() => {
      const index = Array.from(itemStates.value).findIndex(
        (item) => item.label === currentActive.value
      );
      if (~index) {
        currentIndex.value = index;
      }
    });
    provide(
      TABS_STATE,
      reactive({
        currentActive,
        handleActive,
        increaseItem,
        decreaseItem,
        refreshLabels
      })
    );
    watch(
      () => props.active,
      (value) => {
        currentActive.value = value;
      }
    );
    onMounted(computeIndex);
    function isActiveEmpty() {
      return isNull(currentActive.value) || currentActive.value === "";
    }
    function increaseItem(item) {
      itemStates.value.add(item);
      refreshLabels();
    }
    function decreaseItem(item) {
      itemStates.value.delete(item);
      refreshLabels();
    }
    function handleActive(label) {
      currentActive.value = label;
      computeIndex();
      emitEvent(props.onChange, label);
      emit("update:active", label);
    }
    function handleAdd() {
      emitEvent(props.onAdd);
    }
    function handleClose(label) {
      emitEvent(props.onClose, label);
    }
    return {
      props,
      nh: useNameHelper("tabs"),
      currentActive,
      isTransition,
      mainStyle,
      itemList,
      isFunction,
      handleActive,
      handleAdd,
      handleClose
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  const _component_TabNavItem = resolveComponent("TabNavItem");
  const _component_TabNav = resolveComponent("TabNav");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.nh.b(), _ctx.nh.bm(_ctx.props.placement), _ctx.props.inherit && _ctx.nh.bm("inherit")])
  }, [
    createElementVNode("div", {
      class: normalizeClass(_ctx.nh.be("header"))
    }, [
      createVNode(_component_TabNav, {
        inherit: "",
        active: _ctx.currentActive,
        card: _ctx.props.card,
        align: _ctx.props.align,
        placement: _ctx.props.placement,
        closable: _ctx.props.closable,
        "show-add": _ctx.props.showAdd,
        onChange: _ctx.handleActive,
        onAdd: _ctx.handleAdd,
        onClose: _ctx.handleClose
      }, createSlots({
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.itemList, (item, index) => {
            return openBlock(), createBlock(_component_TabNavItem, {
              key: index,
              label: item.label,
              icon: item.icon,
              disabled: item.disabled,
              closable: item.closable
            }, {
              default: withCtx(() => [
                _ctx.isFunction(item.labelRenderer) ? (openBlock(), createBlock(_component_Renderer, {
                  key: 0,
                  renderer: item.labelRenderer,
                  data: { label: item.label, disabled: item.disabled }
                }, null, 8, ["renderer", "data"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(item.name || item.label), 1)
                ], 64))
              ]),
              _: 2
            }, 1032, ["label", "icon", "disabled", "closable"]);
          }), 128)),
          _ctx.$slots.add ? renderSlot(_ctx.$slots, "add", { key: 0 }) : createCommentVNode("", true)
        ]),
        _: 2
      }, [
        _ctx.$slots.prefix ? {
          name: "prefix",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "prefix")
          ]),
          key: "0"
        } : void 0,
        _ctx.$slots.suffix ? {
          name: "suffix",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "suffix")
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["active", "card", "align", "placement", "closable", "show-add", "onChange", "onAdd", "onClose"])
    ], 2),
    createElementVNode("div", {
      class: normalizeClass({
        [_ctx.nh.be("main")]: true,
        [_ctx.nh.bem("main", "transition")]: _ctx.isTransition
      }),
      onTransitionend: _cache[0] || (_cache[0] = ($event) => _ctx.isTransition = false)
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 34)
  ], 2);
}
var Tabs = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Tabs as default };
