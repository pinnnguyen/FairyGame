import { defineComponent, computed, provide, reactive, toRef, h } from "vue";
import "../../common/config/src/index.mjs";
import { gridProps } from "./props.mjs";
import { GRID_STATE } from "./symbol.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const numberRE = /^\d+$/;
const justifyList = Object.freeze([
  "start",
  "end",
  "center",
  "space-around",
  "space-between",
  "space-evenly"
]);
const alignList = Object.freeze(["top", "middle", "bottom", "stretch"]);
var Grid = defineComponent({
  name: "Grid",
  props: gridProps,
  setup(_props, { slots }) {
    const props = useProps("grid", _props, {
      tag: "div",
      gap: 0,
      rows: "none",
      columns: 24,
      autoRows: "auto",
      autoColumns: "auto",
      dense: false,
      justify: {
        default: "start",
        validator: (value) => justifyList.includes(value)
      },
      align: {
        default: "stretch",
        validator: (value) => alignList.includes(value)
      },
      cellFlex: false
    });
    const nh = useNameHelper("grid");
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bm(props.justify)]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(props.align)]: props.align !== "stretch",
        [nh.bm("dense")]: props.dense
      };
    });
    const style = computed(() => {
      const style2 = {};
      if (props.gap) {
        style2.gap = Array.isArray(props.gap) ? `${props.gap[0]}px ${props.gap[1]}px` : `${props.gap}px`;
      }
      style2.gridTemplateColumns = parseSizeLayout(props.columns);
      if (props.rows !== "none") {
        style2.gridTemplateRows = parseSizeLayout(props.rows);
      }
      if (props.autoRows !== "auto") {
        style2.gridAutoRows = parseAutoLayout(props.autoRows);
      }
      if (props.autoColumns !== "auto") {
        style2.gridAutoColumns = parseAutoLayout(props.autoColumns);
      }
      return style2;
    });
    const cellFlex = computed(() => {
      if (props.cellFlex === true) {
        return {
          justify: "start",
          align: "top"
        };
      } else if (props.cellFlex) {
        return {
          justify: "start",
          align: "top",
          ...props.cellFlex
        };
      }
      return false;
    });
    provide(GRID_STATE, reactive({ cellFlex, columns: toRef(props, "columns") }));
    function parseSizeLayout(value) {
      if (typeof value === "number") {
        return `repeat(${value}, 1fr)`;
      }
      if (typeof value === "string") {
        return numberRE.test(value.trim()) ? `repeat(${value}, 1fr)` : value;
      }
      if (Array.isArray(value)) {
        return value.map((item) => {
          if (typeof item === "number") {
            return `${item}fr`;
          }
          if (typeof item === "string") {
            return numberRE.test(item.trim()) ? `${item}fr` : item;
          }
          return item;
        }).join(" ");
      }
      return value;
    }
    function parseAutoLayout(value) {
      if (typeof value === "number") {
        return `${value}fr`;
      }
      if (typeof value === "string") {
        return numberRE.test(value.trim()) ? `repeat(${value}, 1fr)` : value;
      }
      if (Array.isArray(value)) {
        return value.map((item) => {
          if (typeof item === "number") {
            return `${item}fr`;
          }
          if (typeof item === "string") {
            return numberRE.test(item.trim()) ? `${item}fr` : item;
          }
          return item;
        }).join(" ");
      }
      return value;
    }
    return () => h(
      props.tag || "div",
      {
        class: className.value,
        style: style.value
      },
      {
        default: () => {
          var _a;
          return (_a = slots.default) == null ? void 0 : _a.call(slots);
        }
      }
    );
  }
});
export { Grid as default };
