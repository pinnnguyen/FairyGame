import { isVNode, createVNode, mergeProps } from "vue";
import "../dropdown/index.mjs";
import "../dropdown-list/index.mjs";
import "../dropdown-item/index.mjs";
import "../icon/index.mjs";
import { ChevronRight } from "@vexip-ui/icons";
import Icon from "../icon/icon.mjs";
import Dropdown from "../dropdown/dropdown.mjs";
import DropdownItem from "../dropdown/dropdown-item.mjs";
import DropdownList from "../dropdown/dropdown-list.mjs";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
function renderItemIcon(item, nh) {
  if (!item.icon)
    return null;
  let icon;
  if (typeof item.icon === "function") {
    icon = item.icon();
  } else {
    icon = createVNode(Icon, {
      "icon": item.icon,
      "style": [{
        color: item.iconColor || item.color
      }, item.icon.style]
    }, null);
  }
  return createVNode("div", {
    "class": nh.be("icon")
  }, [icon]);
}
function renderItemShortcut(item, nh) {
  if (!item.shortcut)
    return null;
  return createVNode("div", {
    "class": nh.be("shortcut")
  }, [item.shortcut]);
}
function renderGroupItem(item, nh) {
  return createVNode(Dropdown, mergeProps({
    "inherit": true,
    "transfer": false
  }, {
    onContextmenu: (event) => {
      event.preventDefault();
      event.stopPropagation();
    }
  }), {
    default: () => createVNode(DropdownItem, {
      "class": nh.be("item"),
      "label": item.key,
      "divided": item.divided,
      "disabled": item.disabled
    }, {
      default: () => [renderItemIcon(item, nh), createVNode("span", {
        "class": nh.be("label"),
        "style": {
          color: item.color
        }
      }, [item.label || item.key]), renderItemShortcut(item, nh), createVNode("div", {
        "class": [nh.be("icon"), nh.be("arrow")]
      }, [createVNode(Icon, {
        "icon": ChevronRight,
        "style": {
          color: item.iconColor || item.color
        }
      }, null)])]
    }),
    drop: () => {
      let _slot;
      return createVNode(DropdownList, {
        "class": [nh.be("list"), item.children.some((c) => c.icon) ? nh.bem("list", "icons") : nh.bem("list", "no-icon"), item.children.some((c) => {
          var _a;
          return (_a = c.children) == null ? void 0 : _a.length;
        }) ? nh.bem("list", "arrows") : nh.bem("list", "no-arrow")]
      }, _isSlot(_slot = item.children.map((i) => renderItem({
        nh,
        config: i
      }))) ? _slot : {
        default: () => [_slot]
      });
    }
  });
}
function renderItem({
  config,
  nh
}) {
  var _a;
  if ((_a = config.children) == null ? void 0 : _a.length) {
    return renderGroupItem(config, nh);
  } else {
    return createVNode(DropdownItem, {
      "class": nh.be("item"),
      "label": config.key,
      "divided": config.divided,
      "disabled": config.disabled
    }, {
      default: () => [renderItemIcon(config, nh), createVNode("span", {
        "class": nh.be("label"),
        "style": {
          color: config.color
        }
      }, [config.label || config.key]), renderItemShortcut(config, nh)]
    });
  }
}
export { renderItem };
