import { defineComponent, ref, reactive, resolveComponent, openBlock, createBlock, normalizeClass, normalizeStyle, withModifiers, withCtx, createVNode, createElementBlock, Fragment, renderList } from "vue";
import "../dropdown/index.mjs";
import "../dropdown-list/index.mjs";
import "../renderer/index.mjs";
import "../../common/config/src/index.mjs";
import { isFunction } from "@vexip-ui/utils";
import { renderItem } from "./render.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Dropdown from "../dropdown/dropdown.mjs";
import DropdownList from "../dropdown/dropdown-list.mjs";
import Renderer from "../renderer/renderer.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Contextmenu",
  components: {
    Dropdown,
    DropdownList,
    Renderer
  },
  setup() {
    const nh = useNameHelper("contextmenu");
    const visible = ref(false);
    const configs = ref([]);
    const appear = ref(false);
    const position = reactive({
      x: 0,
      y: 0
    });
    const onSelect = ref(null);
    const onCancel = ref(null);
    function openContextmenu(options) {
      var _a;
      position.x = options.clientX || 0;
      position.y = options.clientY || 0;
      configs.value = options.configs;
      appear.value = (_a = options.appear) != null ? _a : false;
      visible.value = true;
      return new Promise((resolve) => {
        onSelect.value = (keys) => {
          resolve(keys);
        };
        onCancel.value = () => {
          resolve(null);
        };
      });
    }
    function afterContextmenu() {
      onSelect.value = null;
      onCancel.value = null;
    }
    function handleSelect(keys) {
      visible.value = false;
      if (isFunction(onSelect.value)) {
        onSelect.value(keys);
        afterContextmenu();
      }
    }
    function handleCancel() {
      visible.value = false;
      if (isFunction(onCancel.value)) {
        onCancel.value();
        afterContextmenu();
      }
    }
    return {
      nh,
      visible,
      configs,
      appear,
      position,
      renderItem,
      openContextmenu,
      handleSelect,
      handleCancel
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  const _component_DropdownList = resolveComponent("DropdownList");
  const _component_Dropdown = resolveComponent("Dropdown");
  return openBlock(), createBlock(_component_Dropdown, {
    visible: _ctx.visible,
    "onUpdate:visible": _cache[0] || (_cache[0] = ($event) => _ctx.visible = $event),
    class: normalizeClass([_ctx.nh.b(), _ctx.nh.bs("vars")]),
    trigger: "click",
    placement: "right-start",
    appear: _ctx.appear,
    transfer: false,
    style: normalizeStyle({
      top: `${_ctx.position.y}px`,
      left: `${_ctx.position.x}px`
    }),
    onContextmenu: _cache[1] || (_cache[1] = withModifiers(() => {
    }, ["prevent", "stop"])),
    onSelect: _ctx.handleSelect,
    onOutsideClose: _ctx.handleCancel
  }, {
    drop: withCtx(() => [
      createVNode(_component_DropdownList, {
        class: normalizeClass([
          _ctx.nh.be("list"),
          _ctx.configs.some((c) => c.icon) ? _ctx.nh.bem("list", "icons") : _ctx.nh.bem("list", "no-icon"),
          _ctx.configs.some((c) => c.children && c.children.length) ? _ctx.nh.bem("list", "arrows") : _ctx.nh.bem("list", "no-arrow")
        ])
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.configs, (item) => {
            return openBlock(), createBlock(_component_Renderer, {
              key: item.key,
              data: { config: item, nh: _ctx.nh },
              renderer: _ctx.renderItem
            }, null, 8, ["data", "renderer"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["class"])
    ]),
    _: 1
  }, 8, ["visible", "class", "appear", "style", "onSelect", "onOutsideClose"]);
}
var Component = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Component as default };
