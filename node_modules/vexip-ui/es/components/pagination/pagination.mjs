import { defineComponent, ref, computed, watch, onMounted, nextTick, onBeforeUpdate, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withKeys, renderSlot, createVNode, withCtx, createTextVNode, toDisplayString, Transition, createBlock, createCommentVNode, Fragment, renderList, normalizeStyle } from "vue";
import "../icon/index.mjs";
import "../number-input/index.mjs";
import "../select/index.mjs";
import { ChevronRight, ChevronLeft, AnglesRight, AnglesLeft, Ellipsis } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { useModifier } from "@vexip-ui/hooks";
import { isClient, boundRange, warnOnce, isNull, range, isFunction } from "@vexip-ui/utils";
import { paginationProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import NumberInput from "../number-input/number-input.mjs";
import Select from "../select/select.mjs";
import { useProps, createSizeProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale, getCountWord, getCountWordOnly } from "../../common/config/src/locale/index.mjs";
var PaginationMode = /* @__PURE__ */ ((PaginationMode2) => {
  PaginationMode2["LEFT"] = "left";
  PaginationMode2["CENTER"] = "center";
  PaginationMode2["RIGHT"] = "right";
  return PaginationMode2;
})(PaginationMode || {});
const _sfc_main = defineComponent({
  name: "Pagination",
  components: {
    Icon,
    NumberInput,
    Select,
    ChevronRight,
    ChevronLeft,
    AnglesRight,
    AnglesLeft,
    Ellipsis
  },
  props: paginationProps,
  emits: ["update:active", "update:page-size"],
  setup(_props, { emit }) {
    const props = useProps("pagination", _props, {
      size: createSizeProp(),
      total: {
        default: 0,
        validator: (value) => value >= 0,
        static: true
      },
      noBorder: false,
      background: false,
      pageSize: {
        default: 10,
        validator: (value) => value > 0
      },
      sizeOptions: () => [10, 20, 50, 100],
      maxCount: {
        default: 7,
        validator: (value) => value === parseInt(value.toString()) && value > 6
      },
      active: {
        default: 1,
        validator: (value) => value > 0,
        static: true
      },
      disabled: false,
      disableItem: {
        default: () => false,
        isFunc: true
      },
      turnPageCount: 5,
      pageJump: false,
      pageCount: false,
      pageTotal: false,
      itemUnit: null,
      plugins: null,
      noTitle: false
    });
    const nh = useNameHelper("pagination");
    const currentPagers = ref([]);
    const currentActive = ref(props.active);
    const currentPageSize = ref(props.pageSize);
    const mode = ref("left");
    const inPrevEllipsis = ref(false);
    const inNextEllipsis = ref(false);
    const jumpValue = ref(props.active);
    const itemElList = ref([]);
    const locale = useLocale("pagination");
    const { target: wrapper } = useModifier({
      passive: false,
      onKeyDown: (event, modifier) => {
        if (modifier.up || modifier.down || modifier.left || modifier.right) {
          event.preventDefault();
          const sign = modifier.up || modifier.left ? -1 : 1;
          if (isClient && document.activeElement) {
            const index = itemElList.value.findIndex((el) => el === document.activeElement);
            if (!~index)
              return;
            const target = itemElList.value[boundRange(index + sign, 0, itemElList.value.length - 1)];
            target.focus();
          }
        } else if (modifier.enter || modifier.space) {
          event.preventDefault();
          if (document && document.activeElement) {
            const index = itemElList.value.findIndex((el) => el === document.activeElement);
            if (!~index) {
              const activeClass = nh.bem("item", "active");
              const activeEl = itemElList.value.find(
                (el) => el.classList.contains(activeClass)
              );
              activeEl == null ? void 0 : activeEl.focus();
            }
          }
        }
      }
    });
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(props.size)]: props.size !== "default",
        [nh.bm("background")]: props.background,
        [nh.bm("no-border")]: props.noBorder,
        [nh.bm("disabled")]: props.disabled
      };
    });
    const pagerCount = computed(() => {
      return Math.ceil(props.total / (currentPageSize.value || 1)) || 1;
    });
    const disabledPrev = computed(() => {
      const count = queryEnabledActive(1, 1);
      return count >= pagerCount.value || currentActive.value === count;
    });
    const disabledNext = computed(() => {
      const count = queryEnabledActive(pagerCount.value, -1);
      return count <= 1 || currentActive.value === count;
    });
    const prevTurnPageTitle = computed(() => {
      return `${locale.value.prev} ${getCountWord(locale.value.page, props.turnPageCount)}`;
    });
    const nextTurnPageTitle = computed(() => {
      return `${locale.value.next} ${getCountWord(locale.value.page, props.turnPageCount)}`;
    });
    const useEllipsis = computed(() => {
      return pagerCount.value > props.maxCount;
    });
    const prevEllipsisTarget = computed(() => {
      if (!useEllipsis.value)
        return 0;
      let active = queryEnabledActive(currentActive.value - props.turnPageCount, -1);
      if (active < 1) {
        active = queryEnabledActive(active + 1, 1);
        if (active >= currentActive.value)
          return 0;
      }
      return active;
    });
    const nextEllipsisTarget = computed(() => {
      if (!useEllipsis.value)
        return 0;
      let active = queryEnabledActive(currentActive.value + props.turnPageCount, 1);
      if (active > pagerCount.value) {
        active = queryEnabledActive(active - 1, -1);
        if (active <= currentActive.value)
          return 0;
      }
      return active;
    });
    const sizeObjectOptions = computed(() => {
      return props.sizeOptions.map((size) => {
        return {
          value: size,
          label: `${size} ${locale.value.prePage}`
        };
      });
    });
    const usedPlugins = computed(() => {
      if (props.plugins) {
        return props.plugins;
      }
      const plugins = [void 0];
      props.pageTotal && plugins.push("total");
      props.pageCount && plugins.push("size");
      props.pageJump && plugins.push("jump");
      if (plugins.length) {
        warnOnce(
          "[vexip-ui:Pagination] 'page-jump', 'page-count' and 'page-total' props have been deprecated, please using 'plugins' prop to instead them"
        );
      }
      return plugins;
    });
    const pluginOrders = computed(() => {
      const plugins = usedPlugins.value;
      const pagerPosition = plugins.findIndex(isNull);
      return {
        total: plugins.findIndex((p) => p === "total") - pagerPosition,
        size: plugins.findIndex((p) => p === "size") - pagerPosition,
        jump: plugins.findIndex((p) => p === "jump") - pagerPosition
      };
    });
    const jumpInputWidth = computed(() => {
      if (!usedPlugins.value.includes("jump"))
        return 0;
      let pageCount = 0;
      if (usedPlugins.value.includes("size")) {
        pageCount = Math.ceil(props.total / (Math.min(...props.sizeOptions) || 10));
      } else {
        pageCount = Math.ceil(props.total / (props.pageSize || 10));
      }
      return pageCount.toString().length * 10 + 30;
    });
    watch(
      () => props.active,
      (value) => {
        changeActive(value, false);
      }
    );
    watch(currentActive, (value) => {
      computePagers();
      jumpValue.value = value;
      emitEvent(props.onChange, value);
      emit("update:active", value);
    });
    watch(() => props.maxCount, computePagers);
    watch(pagerCount, computePagers);
    watch(
      () => props.pageSize,
      (value) => {
        currentPageSize.value = value;
      }
    );
    watch(currentPageSize, (value, prevValue) => {
      emitEvent(props.onPageSizeChange, value);
      emit("update:page-size", value);
      const anchor = Math.ceil((prevValue * (currentActive.value - 1) + 1) / value);
      let active = queryEnabledActive(anchor, 1);
      if (active > pagerCount.value) {
        active = queryEnabledActive(anchor - 1, -1);
        if (active < 1)
          active = 0;
      }
      currentActive.value = active;
    });
    onMounted(() => {
      nextTick(computePagers);
    });
    onBeforeUpdate(() => {
      itemElList.value.length = 0;
    });
    function queryEnabledActive(active, step) {
      step = step / Math.abs(step);
      while (props.disableItem(active)) {
        active += step;
        if (active < 1 || active > pagerCount.value)
          break;
      }
      return active;
    }
    function changeActive(active, focus = true) {
      active = parseInt(active.toString());
      if (props.disabled || active < 1 || active > pagerCount.value || props.disableItem(active)) {
        return;
      }
      currentActive.value = active;
      if (isClient && focus) {
        const activeEl = itemElList.value.find((el) => el === document.activeElement);
        activeEl == null ? void 0 : activeEl.blur();
        nextTick(() => {
          const el = itemElList.value.find((el2) => el2.tabIndex >= 0);
          el == null ? void 0 : el.focus();
        });
      }
    }
    function handlePrev() {
      if (!disabledPrev.value && !props.disabled) {
        const active = queryEnabledActive(currentActive.value - 1, -1);
        if (active >= 1)
          changeActive(active);
      }
    }
    function handleNext() {
      if (!disabledNext.value && !props.disabled) {
        const active = queryEnabledActive(currentActive.value + 1, 1);
        if (active <= pagerCount.value)
          changeActive(active);
      }
    }
    function computePagers() {
      let pagers;
      if (pagerCount.value <= props.maxCount) {
        pagers = range(pagerCount.value);
      } else {
        const numberCount = props.maxCount - 2;
        const criticalCount = Math.ceil(props.maxCount / 2);
        if (currentActive.value < criticalCount) {
          pagers = range(numberCount);
          pagers.push(pagerCount.value);
          mode.value = "left";
        } else if (currentActive.value <= pagerCount.value - criticalCount) {
          let count = numberCount - 2;
          if (count % 2 === 0) {
            count -= 1;
          }
          pagers = range(count, currentActive.value - (count - 1) / 2);
          pagers.unshift(1);
          pagers.push(pagerCount.value);
          mode.value = "center";
        } else {
          pagers = range(numberCount, pagerCount.value - numberCount + 1);
          pagers.unshift(1);
          mode.value = "right";
        }
      }
      if (pagers.length === 1) {
        currentPagers.value = [];
      }
      currentPagers.value = pagers.slice(1, -1);
    }
    function handleEnterPrevEllipsis() {
      inPrevEllipsis.value = true;
    }
    function handleLeavePrevEllipsis() {
      inPrevEllipsis.value = false;
    }
    function handleClickPrevEllipsis() {
      if (!props.disabled && prevEllipsisTarget.value) {
        changeActive(prevEllipsisTarget.value);
      }
    }
    function handleEnterNextEllipsis() {
      inNextEllipsis.value = true;
    }
    function handleLeaveNextEllipsis() {
      inNextEllipsis.value = false;
    }
    function handleClickNextEllipsis() {
      if (!props.disabled && nextEllipsisTarget.value) {
        changeActive(nextEllipsisTarget.value);
      }
    }
    function handleJumpPage(active) {
      active = Math.max(Math.min(parseInt(active.toString()), pagerCount.value), 1);
      const originActive = active;
      if (active !== currentActive.value) {
        const step = active > currentActive.value ? 1 : -1;
        active = queryEnabledActive(originActive, step);
        if (step > 0 ? active > pagerCount.value : active < 1) {
          active = queryEnabledActive(originActive, -step);
          if (step > 0 ? active < 1 : active > pagerCount.value) {
            active = 0;
          }
        }
        currentActive.value = active;
      }
      nextTick(() => {
        jumpValue.value = currentActive.value;
      });
    }
    return {
      props,
      nh,
      locale,
      currentPagers,
      currentActive,
      currentPageSize,
      mode,
      inPrevEllipsis,
      inNextEllipsis,
      jumpValue,
      itemElList,
      className,
      pagerCount,
      disabledPrev,
      disabledNext,
      prevTurnPageTitle,
      nextTurnPageTitle,
      useEllipsis,
      prevEllipsisTarget,
      nextEllipsisTarget,
      sizeObjectOptions,
      usedPlugins,
      pluginOrders,
      jumpInputWidth,
      wrapper,
      isFunction,
      getCountWord,
      getCountWordOnly,
      changeActive,
      handlePrev,
      handleNext,
      handleEnterPrevEllipsis,
      handleLeavePrevEllipsis,
      handleClickPrevEllipsis,
      handleEnterNextEllipsis,
      handleLeaveNextEllipsis,
      handleClickNextEllipsis,
      handleJumpPage
    };
  }
});
const _hoisted_1 = ["aria-disabled"];
const _hoisted_2 = ["title", "aria-label", "aria-hidden"];
const _hoisted_3 = ["title", "tabindex", "aria-setsize", "aria-disabled"];
const _hoisted_4 = ["title", "aria-label"];
const _hoisted_5 = ["tabindex", "aria-posinset", "aria-setsize", "aria-disabled", "onClick", "onKeydown"];
const _hoisted_6 = ["title", "aria-label"];
const _hoisted_7 = ["title", "tabindex", "aria-posinset", "aria-setsize", "aria-disabled"];
const _hoisted_8 = ["title", "aria-label", "aria-hidden"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_ChevronLeft = resolveComponent("ChevronLeft");
  const _component_Icon = resolveComponent("Icon");
  const _component_AnglesLeft = resolveComponent("AnglesLeft");
  const _component_Ellipsis = resolveComponent("Ellipsis");
  const _component_AnglesRight = resolveComponent("AnglesRight");
  const _component_ChevronRight = resolveComponent("ChevronRight");
  const _component_Select = resolveComponent("Select");
  const _component_NumberInput = resolveComponent("NumberInput");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className)
  }, [
    createElementVNode("ul", {
      ref: "wrapper",
      class: normalizeClass(_ctx.nh.be("list")),
      role: "menubar",
      "aria-label": "Pagination",
      "aria-disabled": _ctx.props.disabled ? "true" : void 0
    }, [
      createElementVNode("li", {
        ref: (el) => el && !_ctx.disabledPrev && _ctx.itemElList.push(el),
        class: normalizeClass([
          _ctx.nh.be("item"),
          _ctx.nh.bem("item", "prev"),
          _ctx.disabledPrev ? _ctx.nh.bem("item", "disabled") : ""
        ]),
        title: _ctx.props.noTitle ? void 0 : _ctx.locale.prevPage,
        role: "menuitem",
        tabindex: "-1",
        "aria-label": _ctx.locale.prevPage,
        "aria-hidden": _ctx.disabledPrev ? "true" : void 0,
        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handlePrev && _ctx.handlePrev(...args)),
        onKeydown: [
          _cache[1] || (_cache[1] = withKeys((...args) => _ctx.handlePrev && _ctx.handlePrev(...args), ["enter"])),
          _cache[2] || (_cache[2] = withKeys((...args) => _ctx.handlePrev && _ctx.handlePrev(...args), ["space"]))
        ]
      }, [
        renderSlot(_ctx.$slots, "prev", {}, () => [
          createVNode(_component_Icon, { scale: 0.8 }, {
            default: withCtx(() => [
              createVNode(_component_ChevronLeft)
            ]),
            _: 1
          }, 8, ["scale"])
        ])
      ], 42, _hoisted_2),
      createElementVNode("li", {
        ref: (el) => el && _ctx.itemElList.push(el),
        class: normalizeClass({
          [_ctx.nh.be("item")]: true,
          [_ctx.nh.bem("item", "disabled")]: _ctx.props.disableItem(1),
          [_ctx.nh.bem("item", "active")]: _ctx.currentActive === 1
        }),
        title: _ctx.props.noTitle ? void 0 : "1",
        role: "menuitemradio",
        tabindex: _ctx.currentActive === 1 ? "0" : "-1",
        "aria-posinset": "1",
        "aria-setsize": _ctx.pagerCount,
        "aria-disabled": _ctx.props.disableItem(1) ? "true" : void 0,
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.changeActive(1)),
        onKeydown: [
          _cache[4] || (_cache[4] = withKeys(($event) => _ctx.changeActive(1), ["enter"])),
          _cache[5] || (_cache[5] = withKeys(($event) => _ctx.changeActive(1), ["space"]))
        ]
      }, [
        renderSlot(_ctx.$slots, "item", { page: 1 }, () => [
          createTextVNode(toDisplayString(1))
        ])
      ], 42, _hoisted_3),
      _ctx.useEllipsis && _ctx.mode !== "left" ? (openBlock(), createElementBlock("li", {
        key: 0,
        ref: (el) => el && _ctx.itemElList.push(el),
        class: normalizeClass({
          [_ctx.nh.be("item")]: true,
          [_ctx.nh.bem("item", "more")]: true,
          [_ctx.nh.bem("item", "disabled")]: !_ctx.prevEllipsisTarget
        }),
        title: _ctx.props.noTitle ? void 0 : _ctx.prevTurnPageTitle,
        role: "menuitem",
        tabindex: "-1",
        "aria-label": _ctx.prevTurnPageTitle,
        onClick: _cache[6] || (_cache[6] = (...args) => _ctx.handleClickPrevEllipsis && _ctx.handleClickPrevEllipsis(...args)),
        onKeydown: [
          _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleClickPrevEllipsis && _ctx.handleClickPrevEllipsis(...args), ["enter"])),
          _cache[8] || (_cache[8] = withKeys((...args) => _ctx.handleClickPrevEllipsis && _ctx.handleClickPrevEllipsis(...args), ["space"]))
        ],
        onMouseenter: _cache[9] || (_cache[9] = (...args) => _ctx.handleEnterPrevEllipsis && _ctx.handleEnterPrevEllipsis(...args)),
        onMouseleave: _cache[10] || (_cache[10] = (...args) => _ctx.handleLeavePrevEllipsis && _ctx.handleLeavePrevEllipsis(...args))
      }, [
        createVNode(Transition, {
          name: _ctx.nh.ns("fade")
        }, {
          default: withCtx(() => [
            _ctx.inPrevEllipsis ? (openBlock(), createBlock(_component_Icon, {
              key: 0,
              scale: 0.8
            }, {
              default: withCtx(() => [
                createVNode(_component_AnglesLeft)
              ]),
              _: 1
            }, 8, ["scale"])) : (openBlock(), createBlock(_component_Icon, {
              key: 1,
              scale: 0.8,
              style: { "position": "absolute" }
            }, {
              default: withCtx(() => [
                createVNode(_component_Ellipsis)
              ]),
              _: 1
            }, 8, ["scale"]))
          ]),
          _: 1
        }, 8, ["name"])
      ], 42, _hoisted_4)) : createCommentVNode("", true),
      _ctx.currentPagers.length ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.currentPagers, (page, index) => {
        return openBlock(), createElementBlock("li", {
          key: index,
          ref_for: true,
          ref: (el) => el && _ctx.itemElList.push(el),
          class: normalizeClass({
            [_ctx.nh.be("item")]: true,
            [_ctx.nh.bem("item", "disabled")]: _ctx.props.disableItem(page),
            [_ctx.nh.bem("item", "active")]: _ctx.currentActive === page
          }),
          role: "menuitemradio",
          tabindex: _ctx.currentActive === page ? "0" : "-1",
          "aria-posinset": page,
          "aria-setsize": _ctx.pagerCount,
          "aria-disabled": _ctx.props.disableItem(page) ? "true" : void 0,
          onClick: ($event) => _ctx.changeActive(page),
          onKeydown: [
            withKeys(($event) => _ctx.changeActive(page), ["enter"]),
            withKeys(($event) => _ctx.changeActive(page), ["space"])
          ]
        }, [
          renderSlot(_ctx.$slots, "item", { page }, () => [
            createTextVNode(toDisplayString(page), 1)
          ])
        ], 42, _hoisted_5);
      }), 128)) : createCommentVNode("", true),
      _ctx.useEllipsis && _ctx.mode !== "right" ? (openBlock(), createElementBlock("li", {
        key: 2,
        ref: (el) => el && _ctx.itemElList.push(el),
        class: normalizeClass({
          [_ctx.nh.be("item")]: true,
          [_ctx.nh.bem("item", "more")]: true,
          [_ctx.nh.bem("item", "disabled")]: !_ctx.nextEllipsisTarget
        }),
        title: _ctx.props.noTitle ? void 0 : _ctx.nextTurnPageTitle,
        role: "menuitem",
        tabindex: "-1",
        "aria-label": _ctx.nextTurnPageTitle,
        onClick: _cache[11] || (_cache[11] = (...args) => _ctx.handleClickNextEllipsis && _ctx.handleClickNextEllipsis(...args)),
        onKeydown: [
          _cache[12] || (_cache[12] = withKeys((...args) => _ctx.handleClickNextEllipsis && _ctx.handleClickNextEllipsis(...args), ["enter"])),
          _cache[13] || (_cache[13] = withKeys((...args) => _ctx.handleClickNextEllipsis && _ctx.handleClickNextEllipsis(...args), ["space"]))
        ],
        onMouseenter: _cache[14] || (_cache[14] = (...args) => _ctx.handleEnterNextEllipsis && _ctx.handleEnterNextEllipsis(...args)),
        onMouseleave: _cache[15] || (_cache[15] = (...args) => _ctx.handleLeaveNextEllipsis && _ctx.handleLeaveNextEllipsis(...args))
      }, [
        createVNode(Transition, {
          name: _ctx.nh.ns("fade")
        }, {
          default: withCtx(() => [
            _ctx.inNextEllipsis ? (openBlock(), createBlock(_component_Icon, {
              key: 0,
              scale: 0.8
            }, {
              default: withCtx(() => [
                createVNode(_component_AnglesRight)
              ]),
              _: 1
            }, 8, ["scale"])) : (openBlock(), createBlock(_component_Icon, {
              key: 1,
              scale: 0.8,
              style: { "position": "absolute" }
            }, {
              default: withCtx(() => [
                createVNode(_component_Ellipsis)
              ]),
              _: 1
            }, 8, ["scale"]))
          ]),
          _: 1
        }, 8, ["name"])
      ], 42, _hoisted_6)) : createCommentVNode("", true),
      _ctx.pagerCount > 1 ? (openBlock(), createElementBlock("li", {
        key: 3,
        ref: (el) => el && _ctx.itemElList.push(el),
        class: normalizeClass({
          [_ctx.nh.be("item")]: true,
          [_ctx.nh.bem("item", "disabled")]: _ctx.props.disableItem(_ctx.pagerCount),
          [_ctx.nh.bem("item", "active")]: _ctx.currentActive === _ctx.pagerCount
        }),
        title: _ctx.props.noTitle ? void 0 : `${_ctx.pagerCount}`,
        role: "menuitemradio",
        tabindex: _ctx.currentActive === _ctx.pagerCount ? "0" : "-1",
        "aria-posinset": _ctx.pagerCount,
        "aria-setsize": _ctx.pagerCount,
        "aria-disabled": _ctx.props.disableItem(_ctx.pagerCount) ? "true" : void 0,
        onClick: _cache[16] || (_cache[16] = ($event) => _ctx.changeActive(_ctx.pagerCount)),
        onKeydown: [
          _cache[17] || (_cache[17] = withKeys(($event) => _ctx.changeActive(_ctx.pagerCount), ["enter"])),
          _cache[18] || (_cache[18] = withKeys(($event) => _ctx.changeActive(_ctx.pagerCount), ["space"]))
        ]
      }, [
        renderSlot(_ctx.$slots, "item", { page: _ctx.pagerCount }, () => [
          createTextVNode(toDisplayString(_ctx.pagerCount), 1)
        ])
      ], 42, _hoisted_7)) : createCommentVNode("", true),
      createElementVNode("li", {
        ref: (el) => el && !_ctx.disabledNext && _ctx.itemElList.push(el),
        class: normalizeClass([
          _ctx.nh.be("item"),
          _ctx.nh.bem("item", "next"),
          _ctx.disabledNext ? _ctx.nh.bem("item", "disabled") : ""
        ]),
        title: _ctx.props.noTitle ? void 0 : _ctx.locale.nextPage,
        role: "menuitem",
        tabindex: "-1",
        "aria-label": _ctx.locale.nextPage,
        "aria-hidden": _ctx.disabledNext ? "true" : void 0,
        onClick: _cache[19] || (_cache[19] = (...args) => _ctx.handleNext && _ctx.handleNext(...args)),
        onKeydown: [
          _cache[20] || (_cache[20] = withKeys((...args) => _ctx.handleNext && _ctx.handleNext(...args), ["enter"])),
          _cache[21] || (_cache[21] = withKeys((...args) => _ctx.handleNext && _ctx.handleNext(...args), ["space"]))
        ]
      }, [
        renderSlot(_ctx.$slots, "next", {}, () => [
          createVNode(_component_Icon, { scale: 0.8 }, {
            default: withCtx(() => [
              createVNode(_component_ChevronRight)
            ]),
            _: 1
          }, 8, ["scale"])
        ])
      ], 42, _hoisted_8)
    ], 10, _hoisted_1),
    _ctx.usedPlugins.includes("total") ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass([_ctx.nh.be("total"), _ctx.pluginOrders.total < 0 && _ctx.nh.bem("total", "prefix")]),
      style: normalizeStyle({ order: _ctx.pluginOrders.total })
    }, toDisplayString(`${_ctx.locale.total} ${_ctx.getCountWord((_a = _ctx.props.itemUnit) != null ? _a : _ctx.locale.itemUnit, _ctx.props.total)}`), 7)) : createCommentVNode("", true),
    _ctx.usedPlugins.includes("size") ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass([_ctx.nh.be("size"), _ctx.pluginOrders.size < 0 && _ctx.nh.bem("size", "prefix")]),
      style: normalizeStyle({ order: _ctx.pluginOrders.size })
    }, [
      createVNode(_component_Select, {
        value: _ctx.currentPageSize,
        "onUpdate:value": _cache[22] || (_cache[22] = ($event) => _ctx.currentPageSize = $event),
        inherit: "",
        class: normalizeClass(_ctx.nh.be("size-select")),
        options: _ctx.sizeObjectOptions,
        filter: false,
        multiple: false,
        clearable: false
      }, null, 8, ["value", "class", "options"])
    ], 6)) : createCommentVNode("", true),
    _ctx.usedPlugins.includes("jump") ? (openBlock(), createElementBlock("div", {
      key: 2,
      class: normalizeClass([_ctx.nh.be("jump"), _ctx.pluginOrders.jump < 0 && _ctx.nh.bem("jump", "prefix")]),
      style: normalizeStyle({ order: _ctx.pluginOrders.jump })
    }, [
      createTextVNode(toDisplayString(_ctx.locale.jumpTo) + " ", 1),
      createVNode(_component_NumberInput, {
        value: _ctx.jumpValue,
        "onUpdate:value": _cache[23] || (_cache[23] = ($event) => _ctx.jumpValue = $event),
        inherit: "",
        class: normalizeClass(_ctx.nh.be("jump-input")),
        clearable: false,
        sync: false,
        style: normalizeStyle({ width: `${_ctx.jumpInputWidth}px` }),
        onChange: _ctx.handleJumpPage
      }, null, 8, ["value", "class", "style", "onChange"]),
      createTextVNode(" " + toDisplayString(_ctx.getCountWordOnly(_ctx.locale.page, 1)), 1)
    ], 6)) : createCommentVNode("", true)
  ], 2);
}
var Pagination = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Pagination as default };
