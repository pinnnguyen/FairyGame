import { defineComponent, h, Transition } from "vue";
import "../../common/config/src/index.mjs";
import { collapseTransitionProps } from "./props.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
var CollapseTransition = defineComponent({
  name: "CollapseTransition",
  props: collapseTransitionProps,
  emits: [],
  setup(_props, { slots }) {
    const props = useProps("collapseTransition", _props, {
      appear: false,
      mode: {
        default: "default",
        validator: (value) => ["in-out", "out-in", "default"].includes(value)
      },
      horizontal: false,
      duration: {
        default: 250,
        validator: (value) => value >= 200
      },
      timing: null,
      fadeEffect: false
    });
    let enterStage = null;
    let leaveStage = null;
    return () => {
      const duration = props.duration;
      const timing = props.timing || "ease-in-out";
      let height = "height";
      let paddingTop = "paddingTop";
      let paddingBottom = "paddingBottom";
      let marginTop = "marginTop";
      let marginBottom = "marginBottom";
      let scrollHeight = "scrollHeight";
      let transition = `
        height ${duration}ms ${timing},
        padding-top ${duration}ms ${timing},
        padding-bottom ${duration}ms ${timing},
        margin-top ${duration}ms ${timing},
        margin-bottom ${duration}ms ${timing}
      `;
      if (props.horizontal) {
        height = "width";
        paddingTop = "paddingLeft";
        paddingBottom = "paddingRight";
        marginTop = "marginLeft";
        marginBottom = "marginRight";
        scrollHeight = "scrollWidth";
        transition = `
          width ${duration}ms ${timing},
          padding-left ${duration}ms ${timing},
          padding-right ${duration}ms ${timing},
          margin-left ${duration}ms ${timing},
          margin-right ${duration}ms ${timing}
        `;
      }
      if (props.fadeEffect) {
        transition = `
          ${transition},
          opacity ${duration}ms ease
        `;
      }
      const enterRecord = {};
      const leaveRecord = {};
      return h(
        Transition,
        {
          appear: props.appear,
          mode: props.mode,
          onBeforeEnter($el) {
            if (enterStage)
              return;
            enterStage = "before";
            const el = $el;
            enterRecord.paddingTop = el.style[paddingTop];
            enterRecord.paddingBottom = el.style[paddingBottom];
            enterRecord.marginTop = el.style[marginTop];
            enterRecord.marginBottom = el.style[marginBottom];
            enterRecord.transition = el.style.transition;
            enterRecord.boxSizing = el.style.boxSizing;
            enterRecord.opacity = el.style.opacity;
            el.style.transition = transition;
            el.style[height] = "0";
            el.style[paddingTop] = "0";
            el.style[paddingBottom] = "0";
            el.style[marginTop] = "0";
            el.style[marginBottom] = "0";
            el.style.boxSizing = "content-box";
            if (props.fadeEffect) {
              el.style.opacity = "0";
            }
            emitEvent(props.onBeforeEnter, $el);
          },
          onEnter($el) {
            if (enterStage === "in")
              return;
            enterStage = "in";
            const el = $el;
            enterRecord.overflow = el.style.overflow;
            if (el[scrollHeight] !== 0) {
              el.style[height] = `${el[scrollHeight]}px`;
            } else {
              el.style[height] = "";
            }
            el.style[paddingTop] = enterRecord.paddingTop;
            el.style[paddingBottom] = enterRecord.paddingBottom;
            el.style[marginTop] = enterRecord.marginTop;
            el.style[marginBottom] = enterRecord.marginBottom;
            el.style.overflow = "hidden";
            if (props.fadeEffect) {
              el.style.opacity = enterRecord.opacity;
            }
            emitEvent(props.onEnter, $el);
          },
          onAfterEnter($el) {
            const el = $el;
            el.style.transition = enterRecord.transition || "";
            el.style[height] = "";
            el.style.overflow = enterRecord.overflow;
            el.style.boxSizing = enterRecord.boxSizing;
            enterStage = null;
            emitEvent(props.onAfterEnter, $el);
          },
          onEnterCancelled($el) {
            const el = $el;
            el.style.transition = enterRecord.transition || "";
            el.style[height] = "";
            el.style.overflow = enterRecord.overflow;
            el.style.boxSizing = enterRecord.boxSizing;
            enterStage = null;
            emitEvent(props.onEnterCancelled, $el);
          },
          onBeforeLeave($el) {
            if (leaveStage)
              return;
            leaveStage = "before";
            const el = $el;
            leaveRecord.paddingTop = el.style[paddingTop];
            leaveRecord.paddingBottom = el.style[paddingBottom];
            leaveRecord.marginTop = el.style[marginTop];
            leaveRecord.marginBottom = el.style[marginBottom];
            leaveRecord.overflow = el.style.overflow;
            leaveRecord.boxSizing = el.style.boxSizing;
            leaveRecord.opacity = el.style.opacity;
            el.style[height] = `${el[scrollHeight]}px`;
            el.style.overflow = "hidden";
            emitEvent(props.onBeforeLeave, $el);
          },
          onLeave($el) {
            if (leaveStage === "in")
              return;
            leaveStage = "in";
            const el = $el;
            if (el[scrollHeight] !== 0) {
              leaveRecord.transition = el.style.transition;
              el.style.transition = transition;
              el.style[height] = "0";
              el.style[paddingTop] = "0";
              el.style[paddingBottom] = "0";
              el.style[marginTop] = "0";
              el.style[marginBottom] = "0";
              if (props.fadeEffect) {
                el.style.opacity = "0";
              }
            }
            emitEvent(props.onLeave, $el);
          },
          onAfterLeave($el) {
            const el = $el;
            el.style[height] = "";
            el.style[paddingTop] = leaveRecord.paddingTop;
            el.style[paddingBottom] = leaveRecord.paddingBottom;
            el.style[marginTop] = leaveRecord.marginTop;
            el.style[marginBottom] = leaveRecord.marginBottom;
            el.style.overflow = leaveRecord.overflow;
            el.style.transition = leaveRecord.transition || "";
            el.style.boxSizing = leaveRecord.boxSizing;
            el.style.opacity = leaveRecord.opacity;
            leaveStage = null;
            emitEvent(props.onAfterLeave, $el);
          },
          onLeaveCancelled($el) {
            const el = $el;
            el.style[height] = "";
            el.style[paddingTop] = leaveRecord.paddingTop;
            el.style[paddingBottom] = leaveRecord.paddingBottom;
            el.style[marginTop] = leaveRecord.marginTop;
            el.style[marginBottom] = leaveRecord.marginBottom;
            el.style.overflow = leaveRecord.overflow;
            el.style.transition = leaveRecord.transition || "";
            el.style.boxSizing = leaveRecord.boxSizing;
            el.style.opacity = leaveRecord.opacity;
            leaveStage = null;
            emitEvent(props.onLeaveCancelled, $el);
          }
        },
        {
          default: () => slots.default && slots.default()
        }
      );
    };
  }
});
export { CollapseTransition as default };
