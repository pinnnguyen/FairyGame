import { defineComponent, inject, computed, toRef, resolveComponent, openBlock, createElementBlock, mergeProps, createBlock, normalizeClass, withModifiers, toDisplayString, Fragment, createVNode, withCtx, createCommentVNode, createTextVNode } from "vue";
import "../checkbox/index.mjs";
import "../ellipsis/index.mjs";
import "../icon/index.mjs";
import "../renderer/index.mjs";
import "../../common/config/src/index.mjs";
import { isFunction } from "@vexip-ui/utils";
import { AngleRight } from "@vexip-ui/icons";
import { TABLE_STORE, TABLE_ACTION } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Checkbox from "../checkbox/checkbox.mjs";
import Ellipsis from "../ellipsis/ellipsis.mjs";
import Icon from "../icon/icon.mjs";
import Renderer from "../renderer/renderer.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const columnTypes = ["order", "selection", "expand"];
const _sfc_main = defineComponent({
  name: "TableCell",
  components: {
    Checkbox,
    Ellipsis,
    Icon,
    Renderer,
    AngleRight
  },
  props: {
    row: {
      type: Object,
      default: () => ({})
    },
    rowIndex: {
      type: Number,
      default: -1
    },
    column: {
      type: Object,
      default: () => ({})
    },
    columnIndex: {
      type: Number,
      default: -1
    }
  },
  setup(props) {
    const { state, getters, mutations } = inject(TABLE_STORE);
    const tableAction = inject(TABLE_ACTION);
    const nh = useNameHelper("table");
    const className = computed(() => {
      let customClass = null;
      if (typeof state.cellClass === "function") {
        customClass = state.cellClass(
          props.row.data,
          props.column,
          props.rowIndex,
          props.columnIndex
        );
      } else {
        customClass = state.cellClass;
      }
      return [
        nh.be("cell"),
        {
          [nh.bem("cell", "center")]: columnTypes.includes(props.column.type),
          [nh.bem("cell", "wrap")]: props.column.noEllipsis
        },
        props.column.className || null,
        customClass
      ];
    });
    const style = computed(() => {
      var _a;
      const width = state.widths[props.column.key];
      let customStyle = "";
      if (typeof state.cellStyle === "function") {
        customStyle = state.cellStyle(
          props.row.data,
          props.column,
          props.rowIndex,
          props.columnIndex
        );
      } else {
        customStyle = state.cellStyle;
      }
      return [
        {
          flex: `${width} 0 auto`,
          width: `${(_a = props.column.width) != null ? _a : width}px`,
          maxWidth: `${props.column.width}px`
        },
        props.column.style || "",
        customStyle
      ];
    });
    const attrs = computed(() => {
      let customAttrs;
      if (typeof state.cellAttrs === "function") {
        customAttrs = state.cellAttrs(
          props.row.data,
          props.column,
          props.rowIndex,
          props.columnIndex
        );
      } else {
        customAttrs = state.cellAttrs;
      }
      return { ...props.column.attrs || {}, ...customAttrs || {} };
    });
    function isSelection(column) {
      return column.type === "selection";
    }
    function isOrder(column) {
      return column.type === "order";
    }
    function isExpand(column) {
      return column.type === "expand";
    }
    function isTypeColumn(column) {
      return isSelection(column) || isOrder(column) || isExpand(column);
    }
    function buildEventPayload(event) {
      return {
        row: props.row.data,
        key: props.row.key,
        rowIndex: props.rowIndex,
        column: props.column,
        columnIndex: props.columnIndex,
        event
      };
    }
    function handleMouseEnter(event) {
      if (tableAction) {
        tableAction.emitCellEnter(buildEventPayload(event));
      }
    }
    function handleMouseLeave(event) {
      if (tableAction) {
        tableAction.emitCellLeave(buildEventPayload(event));
      }
    }
    function handleClick(event) {
      if (tableAction) {
        tableAction.emitCellClick(buildEventPayload(event));
      }
    }
    function handleDblclick(event) {
      if (tableAction) {
        tableAction.emitCellDblclick(buildEventPayload(event));
      }
    }
    function handleContextmenu(event) {
      if (tableAction) {
        tableAction.emitCellContextmenu(buildEventPayload(event));
      }
    }
    function handleCheckRow(row) {
      if (!getters.disableCheckRows[row.key]) {
        const checked = !row.checked;
        const { data, key, index } = row;
        mutations.handleCheck(key, checked);
        tableAction.emitRowCheck({ row: data, key, index, checked });
      }
    }
    function handleExpandRow(row) {
      if (!getters.disableExpandRows[row.key]) {
        const expanded = !row.expanded;
        const { data, key, index } = row;
        mutations.handleExpand(key, expanded);
        tableAction.emitRowExpand({ row: data, key, index, expanded });
      }
    }
    return {
      nh,
      className,
      style,
      attrs,
      tooltipTheme: toRef(state, "tooltipTheme"),
      tooltipWidth: toRef(state, "tooltipWidth"),
      disableCheckRows: toRef(getters, "disableCheckRows"),
      disableExpandRows: toRef(getters, "disableExpandRows"),
      isFunction,
      isSelection,
      isOrder,
      isExpand,
      isTypeColumn,
      handleMouseEnter,
      handleMouseLeave,
      handleClick,
      handleDblclick,
      handleContextmenu,
      handleCheckRow,
      handleExpandRow
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Checkbox = resolveComponent("Checkbox");
  const _component_AngleRight = resolveComponent("AngleRight");
  const _component_Icon = resolveComponent("Icon");
  const _component_Renderer = resolveComponent("Renderer");
  const _component_Ellipsis = resolveComponent("Ellipsis");
  return _ctx.isTypeColumn(_ctx.column) ? (openBlock(), createElementBlock("div", mergeProps({
    key: 0,
    class: _ctx.className,
    role: "cell",
    style: _ctx.style
  }, _ctx.attrs, {
    onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),
    onMouseleave: _cache[3] || (_cache[3] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),
    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),
    onDblclick: _cache[5] || (_cache[5] = (...args) => _ctx.handleDblclick && _ctx.handleDblclick(...args)),
    onContextmenu: _cache[6] || (_cache[6] = (...args) => _ctx.handleContextmenu && _ctx.handleContextmenu(...args))
  }), [
    _ctx.isSelection(_ctx.column) ? (openBlock(), createBlock(_component_Checkbox, {
      key: 0,
      inherit: "",
      class: normalizeClass(_ctx.nh.be("selection")),
      checked: _ctx.row.checked,
      size: _ctx.column.checkboxSize || "default",
      disabled: _ctx.disableCheckRows[_ctx.row.key],
      onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.handleCheckRow(_ctx.row), ["prevent", "stop"]))
    }, null, 8, ["class", "checked", "size", "disabled"])) : _ctx.isOrder(_ctx.column) ? (openBlock(), createElementBlock("span", {
      key: 1,
      class: normalizeClass(_ctx.nh.be("order"))
    }, toDisplayString(_ctx.column.orderLabel && _ctx.column.orderLabel(_ctx.column.truthIndex ? _ctx.row.index : _ctx.rowIndex)), 3)) : _ctx.isExpand(_ctx.column) ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
      !_ctx.disableExpandRows[_ctx.row.key] ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass({
          [_ctx.nh.be("expand")]: true,
          [_ctx.nh.bem("expand", "active")]: _ctx.row.expanded
        }),
        onClick: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.handleExpandRow(_ctx.row), ["stop"]))
      }, [
        createVNode(_component_Icon, null, {
          default: withCtx(() => [
            createVNode(_component_AngleRight)
          ]),
          _: 1
        })
      ], 2)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true)
  ], 16)) : (openBlock(), createElementBlock("div", mergeProps({
    key: 1,
    class: _ctx.className,
    role: "cell",
    style: _ctx.style
  }, _ctx.attrs, {
    onMouseenter: _cache[7] || (_cache[7] = (...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args)),
    onMouseleave: _cache[8] || (_cache[8] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args)),
    onClick: _cache[9] || (_cache[9] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),
    onDblclick: _cache[10] || (_cache[10] = (...args) => _ctx.handleDblclick && _ctx.handleDblclick(...args)),
    onContextmenu: _cache[11] || (_cache[11] = (...args) => _ctx.handleContextmenu && _ctx.handleContextmenu(...args))
  }), [
    !_ctx.column.noEllipsis ? (openBlock(), createBlock(_component_Ellipsis, {
      key: 0,
      inherit: "",
      "tooltip-theme": _ctx.tooltipTheme,
      "tip-max-width": _ctx.tooltipWidth
    }, {
      default: withCtx(() => [
        _ctx.isFunction(_ctx.column.renderer) ? (openBlock(), createBlock(_component_Renderer, {
          key: 0,
          renderer: _ctx.column.renderer,
          data: { row: _ctx.row.data, rowIndex: _ctx.rowIndex, column: _ctx.column, columnIndex: _ctx.columnIndex }
        }, null, 8, ["renderer", "data"])) : _ctx.isFunction(_ctx.column.accessor) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString(_ctx.column.accessor(_ctx.row.data, _ctx.rowIndex)), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createTextVNode(toDisplayString(_ctx.row.data[_ctx.column.key]), 1)
        ], 64))
      ]),
      _: 1
    }, 8, ["tooltip-theme", "tip-max-width"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
      _ctx.isFunction(_ctx.column.renderer) ? (openBlock(), createBlock(_component_Renderer, {
        key: 0,
        renderer: _ctx.column.renderer,
        data: { row: _ctx.row.data, rowIndex: _ctx.rowIndex, column: _ctx.column, columnIndex: _ctx.columnIndex }
      }, null, 8, ["renderer", "data"])) : _ctx.isFunction(_ctx.column.accessor) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createTextVNode(toDisplayString(_ctx.column.accessor(_ctx.row.data, _ctx.rowIndex)), 1)
      ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
        createTextVNode(toDisplayString(_ctx.row.data[_ctx.column.key]), 1)
      ], 64))
    ], 64))
  ], 16));
}
var TableCell = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TableCell as default };
