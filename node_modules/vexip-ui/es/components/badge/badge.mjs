import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeStyle, createTextVNode, toDisplayString, vShow } from "vue";
import "../../common/config/src/index.mjs";
import { badgeProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const badgeTypes = Object.freeze([
  "error",
  "primary",
  "success",
  "warning",
  "info",
  "disabled"
]);
const _sfc_main = defineComponent({
  name: "Badge",
  props: badgeProps,
  emits: [],
  setup(_props, { slots }) {
    const props = useProps("badge", _props, {
      content: {
        default: null,
        static: true
      },
      max: 0,
      disabled: false,
      isDot: false,
      type: {
        default: "error",
        validator: (value) => badgeTypes.includes(value)
      },
      color: null
    });
    const nh = useNameHelper("badge");
    const hasSlot = computed(() => {
      return !!slots.default;
    });
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm("not-wrapper")]: !hasSlot.value,
        [nh.bm("is-dot")]: props.isDot
      };
    });
    const renderContent = computed(() => {
      if (props.isDot)
        return "";
      if (typeof props.content === "number" && props.max > 0) {
        return props.content > props.max ? `${props.max}+` : props.content;
      }
      return props.content;
    });
    const transitionName = computed(() => {
      return hasSlot.value ? nh.bs("badge-zoom") : nh.bs("zoom");
    });
    const title = computed(() => {
      return props.content || props.content === 0 ? props.content.toString() : void 0;
    });
    const showSub = computed(() => {
      return !props.disabled && (props.content || props.content === 0 || props.isDot);
    });
    function handleBadgeClick(event) {
      emitEvent(props.onBadgeClick, event);
    }
    return {
      props,
      nh,
      hasSlot,
      className,
      renderContent,
      transitionName,
      title,
      showSub,
      handleBadgeClick
    };
  }
});
const _hoisted_1 = ["title"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className)
  }, [
    renderSlot(_ctx.$slots, "default"),
    createVNode(Transition, { name: _ctx.transitionName }, {
      default: withCtx(() => [
        withDirectives(createElementVNode("sup", {
          class: normalizeClass({
            [_ctx.nh.be("content")]: true,
            [_ctx.nh.bem("content", "fixed")]: _ctx.hasSlot,
            [_ctx.nh.bem("content", _ctx.props.type)]: _ctx.props.type !== "error"
          }),
          style: normalizeStyle({ backgroundColor: _ctx.props.color }),
          title: _ctx.title,
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleBadgeClick && _ctx.handleBadgeClick(...args))
        }, [
          renderSlot(_ctx.$slots, "content", {}, () => [
            createTextVNode(toDisplayString(_ctx.renderContent), 1)
          ])
        ], 14, _hoisted_1), [
          [vShow, _ctx.showSub]
        ])
      ]),
      _: 3
    }, 8, ["name"])
  ], 2);
}
var Badge = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Badge as default };
