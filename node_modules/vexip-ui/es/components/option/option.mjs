import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, createTextVNode, toDisplayString } from "vue";
import "../../common/config/src/index.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { eventProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Option",
  props: {
    value: {
      type: [String, Number],
      default: null
    },
    label: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    divided: {
      type: Boolean,
      default: false
    },
    noTitle: {
      type: Boolean,
      default: false
    },
    hitting: {
      type: Boolean,
      default: false
    },
    noHover: {
      type: Boolean,
      default: false
    },
    selected: {
      type: Boolean,
      default: false
    },
    onSelect: eventProp()
  },
  emits: [],
  setup(props) {
    const nh = useNameHelper("option");
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("disabled")]: props.disabled,
        [nh.bm("selected")]: !props.disabled && props.selected,
        [nh.bm("divided")]: props.divided,
        [nh.bm("hitting")]: props.hitting,
        [nh.bm("no-hover")]: props.noHover
      };
    });
    function handleSelect() {
      if (props.disabled)
        return;
      emitEvent(props.onSelect);
    }
    return {
      className,
      handleSelect
    };
  }
});
const _hoisted_1 = ["title", "aria-disabled", "aria-selected"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", {
    ref: "wrapper",
    class: normalizeClass(_ctx.className),
    title: _ctx.noTitle ? void 0 : String(_ctx.value),
    role: "option",
    "aria-disabled": _ctx.disabled ? "true" : void 0,
    "aria-selected": _ctx.selected,
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleSelect && _ctx.handleSelect(...args))
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createTextVNode(toDisplayString(_ctx.label || _ctx.value), 1)
    ])
  ], 10, _hoisted_1);
}
var Option = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Option as default };
