import { markRaw, render, createVNode } from "vue";
import Component from "./confirm.mjs";
import { isClient, destroyObject } from "@vexip-ui/utils";
class ConfirmManager {
  constructor(options = {}) {
    this._mountedApp = null;
    this._instance = null;
    this._container = null;
    this.name = "Confirm";
    this.defaults = {};
    this.config(options);
  }
  open(options, title, type) {
    var _a;
    if (!isClient) {
      return;
    }
    if (typeof options === "string") {
      if (type) {
        options = { title, content: options, confirmType: type };
      } else {
        options = { content: options, confirmType: title };
      }
    }
    const item = { ...this.defaults, ...options };
    if (item.icon && typeof item.icon !== "function") {
      item.icon = markRaw(item.icon);
    }
    return (_a = this._getInstance()) == null ? void 0 : _a.openConfirm(item);
  }
  config(options) {
    this.defaults = { ...this.defaults, ...options };
  }
  clone() {
    return new ConfirmManager(this.defaults);
  }
  destroy() {
    this._container && render(null, this._container);
    destroyObject(this);
  }
  isDestroyed() {
    return false;
  }
  install(app, options = {}) {
    this.config(options);
    app.config.globalProperties.$confirm = this;
    this._mountedApp = app;
  }
  _getInstance() {
    if (!this._mountedApp) {
      console.warn("[vexip-ui:Confirm]: App missing, the plugin maybe not installed.");
      return null;
    }
    if (!this._instance) {
      const vnode = createVNode(Component, null, null);
      this._container = document.createElement("div");
      vnode.appContext = this._mountedApp._context;
      render(vnode, this._container, false);
      document.body.appendChild(this._container.firstElementChild);
      this._instance = vnode.component.proxy;
    }
    return this._instance;
  }
}
const Confirm = new ConfirmManager();
export { Confirm, ConfirmManager };
