import { defineComponent, inject, provide, computed, h } from "vue";
import "../../common/config/src/index.mjs";
import { columnProps } from "./props.mjs";
import { ROW_STATE, breakPoints } from "./symbol.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const colProps = ["span", "offset", "pull", "push", "order"];
var Column = defineComponent({
  name: "Column",
  props: columnProps,
  setup(_props, { slots }) {
    const props = useProps("column", _props, {
      tag: "div",
      span: 24,
      offset: null,
      push: null,
      pull: null,
      order: null,
      xs: null,
      sm: null,
      md: null,
      lg: null,
      xl: null,
      xxl: null,
      flex: null,
      useFlex: null
    });
    const rowState = inject(ROW_STATE, null);
    const nh = useNameHelper("column");
    provide(ROW_STATE, null);
    const className = computed(() => {
      const columnFlex = (props.useFlex || (rowState == null ? void 0 : rowState.columnFlex)) && {
        ...(rowState == null ? void 0 : rowState.columnFlex) || {},
        ...props.useFlex ? props.useFlex === true ? { justify: "start", align: "top" } : props.useFlex : {}
      };
      const className2 = [
        nh.b(),
        nh.bs("vars"),
        {
          [nh.bm("flex")]: columnFlex,
          [nh.bm("inherit")]: rowState || props.inherit
        }
      ];
      if (columnFlex) {
        columnFlex.justify && className2.push(nh.bm(columnFlex.justify));
        columnFlex.align && className2.push(nh.bm(columnFlex.align));
      }
      colProps.forEach((prop) => {
        if (typeof props[prop] === "number") {
          className2.push(prop === "span" ? nh.bm(props[prop]) : nh.bm(`${prop}-${props[prop]}`));
        }
      });
      breakPoints.forEach((size) => {
        const sizeProp = props[size];
        if (!sizeProp && sizeProp !== 0)
          return;
        if (typeof sizeProp === "number") {
          className2.push(nh.bm(`${size}-${sizeProp}`));
        } else if (typeof sizeProp === "object") {
          colProps.forEach((prop) => {
            const value = sizeProp[prop];
            if (!value && value !== 0)
              return;
            className2.push(prop === "span" ? nh.bm(value) : nh.bm(`${prop}-${value}`));
          });
        }
      });
      return className2;
    });
    const style = computed(() => {
      const flex = props.flex;
      const style2 = {};
      if (rowState) {
        if (typeof rowState.gap === "number") {
          style2.paddingRight = style2.paddingLeft = `${rowState.gap / 2}px`;
        } else if (Array.isArray(rowState.gap)) {
          style2.paddingRight = style2.paddingLeft = `${rowState.gap[0] / 2}px`;
        }
      }
      if (flex) {
        if (typeof flex === "number") {
          style2.flex = `${flex} ${flex} auto`;
        } else if (typeof flex === "string") {
          if (/^\d+\s\d+\s\d+(\w+)?$/.test(flex)) {
            style2.flex = flex;
          } else {
            style2.flex = flex === "auto" ? "1 1 auto" : `0 0 ${flex}`;
          }
        }
      }
      return style2;
    });
    return () => h(
      props.tag || "div",
      {
        class: className.value,
        style: style.value
      },
      {
        default: () => slots.default && slots.default()
      }
    );
  }
});
export { Column as default };
