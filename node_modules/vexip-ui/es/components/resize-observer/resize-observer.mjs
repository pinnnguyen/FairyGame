import { defineComponent, onMounted, getCurrentInstance, onBeforeUnmount, renderSlot } from "vue";
import "../../common/config/src/index.mjs";
import { useResize } from "@vexip-ui/hooks";
import { throttle } from "@vexip-ui/utils";
import { resizeObserverProps } from "./props.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
var ResizeObserver = defineComponent({
  name: "ResizeObserver",
  props: resizeObserverProps,
  setup(_props, { slots }) {
    const props = useProps("resizeObserver", _props, {
      throttle: {
        default: false,
        validator: (value) => typeof value === "boolean" || value > 0
      }
    });
    const { observeResize, unobserveResize } = useResize();
    let observed = false;
    function handleResize(entry) {
      emitEvent(props.onResize, entry);
    }
    const throttleResize = props.throttle ? throttle(handleResize, typeof props.throttle === "boolean" ? 16 : props.throttle) : handleResize;
    onMounted(() => {
      var _a, _b;
      const el = (_b = (_a = getCurrentInstance()) == null ? void 0 : _a.proxy) == null ? void 0 : _b.$el;
      if (el == null ? void 0 : el.nextElementSibling) {
        if (el.nextElementSibling !== el.nextSibling && el.nodeType === 3 && el.nodeValue !== "") {
          return;
        }
        observeResize(el.nextElementSibling, throttleResize);
        observed = true;
      }
    });
    onBeforeUnmount(() => {
      var _a, _b;
      if (observed) {
        const el = (_b = (_a = getCurrentInstance()) == null ? void 0 : _a.proxy) == null ? void 0 : _b.$el;
        if (el == null ? void 0 : el.nextElementSibling) {
          unobserveResize(el.nextElementSibling);
        }
      }
    });
    return () => renderSlot(slots, "default");
  }
});
export { ResizeObserver as default };
