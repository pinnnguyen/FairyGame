import { createApp } from "vue";
import Component from "./loading.mjs";
import { isClient, destroyObject } from "@vexip-ui/utils";
class LoadingManager {
  constructor(options = {}) {
    this._instance = null;
    this._innerApp = null;
    this._container = null;
    this.name = "Loading";
    this.defaults = {};
    this.config(options);
  }
  open(options) {
    if (!isClient)
      return;
    if (typeof options === "number") {
      options = { percent: options };
    }
    this._getInstance().startLoading({ ...this.defaults, ...options });
  }
  close() {
    this.open(100);
  }
  config(options) {
    this.defaults = { ...this.defaults, ...options };
  }
  destroy() {
    var _a;
    (_a = this._innerApp) == null ? void 0 : _a.unmount();
    destroyObject(this);
  }
  isDestroyed() {
    return false;
  }
  install(app, options = {}) {
    this.config(options);
    app.config.globalProperties.$loading = this;
  }
  _getInstance() {
    if (!this._instance) {
      this._container = document.createElement("div");
      this._innerApp = createApp(Component);
      this._instance = this._innerApp.mount(this._container);
      document.body.appendChild(this._container.firstElementChild);
    }
    return this._instance;
  }
}
const Loading = new LoadingManager();
export { Loading, LoadingManager };
