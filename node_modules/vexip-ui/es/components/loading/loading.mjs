import { defineComponent, ref, computed, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, vShow } from "vue";
import "../../common/config/src/index.mjs";
import { boundRange } from "@vexip-ui/utils";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Loading",
  setup() {
    const nh = useNameHelper("loading");
    const visible = ref(false);
    const strokeWidth = ref(2);
    const state = ref("default");
    const position = ref("top");
    const percent = ref(0);
    let maxPercent = 95;
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm(state.value)]: state.value !== "default"
      };
    });
    const style = computed(() => {
      return {
        [position.value]: "0",
        height: `${strokeWidth.value}px`
      };
    });
    const fillerStyle = computed(() => {
      return {
        transform: `translateX(${(percent.value - 100) / 2}%) scaleX(${percent.value / 100})`
      };
    });
    let timer;
    let interval;
    function startLoading(options) {
      if (percent.value === 100) {
        clearTimeout(timer);
        visible.value = false;
        percent.value = 0;
        state.value = "default";
        strokeWidth.value = 2;
        position.value = "top";
      }
      clearInterval(interval);
      const setLoading = () => {
        var _a, _b, _c, _d;
        percent.value = boundRange(options.percent, 0, 100);
        state.value = (_a = options.state) != null ? _a : "default";
        strokeWidth.value = boundRange((_b = options.strokeWidth) != null ? _b : 2, 1, 10);
        position.value = (_c = options.position) != null ? _c : "top";
        maxPercent = boundRange((_d = options.maxPercent) != null ? _d : 95, percent.value, 95);
        if (percent.value === 100) {
          timer = setTimeout(() => {
            visible.value = false;
          }, 500);
        } else {
          interval = setInterval(() => {
            percent.value += Math.floor(Math.random() * 3 + 1);
            if (percent.value >= maxPercent) {
              percent.value = maxPercent;
              clearInterval(interval);
            }
          }, 500);
        }
      };
      maxPercent = 95;
      requestAnimationFrame(() => {
        if (visible.value) {
          setLoading();
        } else {
          visible.value = true;
          requestAnimationFrame(setLoading);
        }
      });
    }
    return {
      nh,
      visible,
      percent,
      className,
      style,
      fillerStyle,
      startLoading
    };
  }
});
const _hoisted_1 = ["aria-valuenow"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: _ctx.nh.ns("fade"),
    appear: ""
  }, {
    default: withCtx(() => [
      withDirectives(createElementVNode("div", {
        class: normalizeClass(_ctx.className),
        role: "progressbar",
        style: normalizeStyle(_ctx.style),
        "aria-valuenow": _ctx.percent,
        "aria-valuemin": "0",
        "aria-valuemax": "100"
      }, [
        createElementVNode("div", {
          class: normalizeClass(_ctx.nh.be("filler")),
          style: normalizeStyle(_ctx.fillerStyle)
        }, null, 6)
      ], 14, _hoisted_1), [
        [vShow, _ctx.visible]
      ])
    ]),
    _: 1
  }, 8, ["name"]);
}
var Component = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Component as default };
