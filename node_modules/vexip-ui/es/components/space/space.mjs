import { defineComponent, computed, renderSlot, h, createVNode } from "vue";
import "../../common/config/src/index.mjs";
import { supportFlexGap } from "@vexip-ui/utils";
import { spaceProps } from "./props.mjs";
import { flatVNodes } from "./helper.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const justifyList = Object.freeze(["start", "end", "center", "space-around", "space-between", "space-evenly"]);
const alignList = Object.freeze(["start", "end", "center", "baseline", "stretch"]);
const useFlexGap = supportFlexGap();
function parseFlexStyle(value) {
  return value === "start" || value === "end" ? `flex-${value}` : value;
}
var Space = defineComponent({
  name: "Space",
  props: spaceProps,
  setup(_props, {
    slots
  }) {
    const props = useProps("space", _props, {
      vertical: false,
      inline: false,
      tag: "div",
      align: {
        default: "stretch",
        validator: (value) => alignList.includes(value)
      },
      justify: {
        default: "start",
        validator: (value) => justifyList.includes(value)
      },
      noWrap: false,
      size: "default",
      itemStyle: null,
      gapDisabled: !useFlexGap
    });
    const nh = useNameHelper("space");
    const varMap = {
      h: `var(${nh.cv("h-gap")})`,
      hh: `calc(var(${nh.cv("h-gap")}) * 0.5)`,
      mhh: `calc(var(${nh.cv("h-gap")}) * -0.5)`,
      v: `var(${nh.cv("v-gap")})`,
      hv: `calc(var(${nh.cv("v-gap")}) * 0.5)`,
      mhv: `calc(var(${nh.cv("v-gap")}) * -0.5)`
    };
    const className = computed(() => {
      const className2 = {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm("inline")]: props.inline,
        [nh.bm("vertical")]: props.vertical,
        [nh.bm("no-wrap")]: props.vertical || props.noWrap,
        [nh.bm("no-gap")]: props.gapDisabled
      };
      if (typeof props.size === "string" && props.size !== "default") {
        className2[nh.bm(props.size)] = true;
      }
      return className2;
    });
    const style = computed(() => {
      const {
        justify,
        align,
        size
      } = props;
      const style2 = {
        alignItems: parseFlexStyle(align),
        justifyContent: parseFlexStyle(justify)
      };
      if (typeof size !== "string") {
        const normalizedSize = Array.isArray(size) ? size : [size, size];
        style2[nh.cv("h-gap")] = `${normalizedSize[0]}px`;
        style2[nh.cv("v-gap")] = `${normalizedSize[1]}px`;
      }
      if (props.gapDisabled && !props.vertical) {
        style2.marginTop = varMap.mhv;
        style2.marginBottom = varMap.mhv;
      }
      return style2;
    });
    return () => {
      const children = renderSlot(slots, "default").children;
      if (!(children == null ? void 0 : children.length))
        return null;
      const vnodes = flatVNodes(children);
      const lastIndex = vnodes.length - 1;
      const justify = props.justify;
      const justifySpace = justify.startsWith("space");
      const notBetween = justify !== "space-between";
      return h(props.tag || "div", {
        class: className.value,
        style: style.value
      }, vnodes.map((vnode, index) => createVNode("div", {
        "class": nh.be("item"),
        "role": "none",
        "style": [props.itemStyle, !props.gapDisabled ? "" : props.vertical ? {
          marginBottom: index !== lastIndex ? varMap.v : void 0
        } : {
          paddingTop: varMap.hv,
          paddingBottom: varMap.hv,
          marginRight: justifySpace ? notBetween || index !== lastIndex ? varMap.hh : void 0 : index !== lastIndex ? varMap.h : void 0,
          marginLeft: justifySpace ? notBetween || index !== 0 ? varMap.hh : void 0 : void 0
        }]
      }, [vnode])));
    };
  }
});
export { Space as default };
