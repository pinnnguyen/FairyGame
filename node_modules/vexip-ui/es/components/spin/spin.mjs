import { defineComponent, ref, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, createVNode, Transition, withCtx, normalizeStyle, createCommentVNode, createElementVNode, createBlock, createTextVNode, toDisplayString } from "vue";
import "../icon/index.mjs";
import "../../common/config/src/index.mjs";
import { toNumber } from "@vexip-ui/utils";
import { Spinner } from "@vexip-ui/icons";
import { spinProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
const _sfc_main = defineComponent({
  name: "Spin",
  components: {
    Icon
  },
  props: spinProps,
  setup(_props, { slots }) {
    const nh = useNameHelper("spin");
    const props = useProps("spin", _props, {
      active: {
        default: false,
        static: true
      },
      icon: Spinner,
      spin: false,
      inner: false,
      delay: false,
      tip: "",
      hideMask: false,
      maskColor: "",
      maskClass: null,
      transitionName: () => nh.ns("fade")
    });
    const currentActive = ref(props.active);
    const hasTip = computed(() => !!(props.tip || slots.tip));
    const maskStyle = computed(() => {
      const style = {};
      if (props.maskColor) {
        style[nh.cv("mask-bg-color")] = props.maskColor;
      }
      return style;
    });
    const delayTime = computed(() => {
      if (props.delay) {
        if (props.delay === true) {
          return { enter: 500, leave: 500 };
        }
        if (typeof props.delay === "number") {
          return { enter: props.delay, leave: props.delay };
        }
        if (Array.isArray(props.delay)) {
          return { enter: toNumber(props.delay[0]), leave: toNumber(props.delay[1]) };
        }
      }
      return { enter: 0, leave: 0 };
    });
    let timer;
    watch(
      () => props.active,
      (value) => {
        clearTimeout(timer);
        const delay = value ? delayTime.value.enter : delayTime.value.leave;
        if (delay) {
          timer = setTimeout(() => {
            currentActive.value = value;
          }, delay);
        } else {
          currentActive.value = value;
        }
      }
    );
    function handleMaskClick(event) {
      emitEvent(props.onMaskClick, event);
    }
    function handleShow() {
      emitEvent(props.onShow);
    }
    function handleHide() {
      emitEvent(props.onHide);
    }
    return {
      props,
      nh,
      currentActive,
      hasTip,
      maskStyle,
      handleMaskClick,
      handleShow,
      handleHide
    };
  }
});
const _hoisted_1 = ["aria-busy"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Icon = resolveComponent("Icon");
  return !_ctx.props.inner ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass([_ctx.nh.b(), _ctx.nh.bs("vars"), _ctx.props.inherit && _ctx.nh.bm("inherit")]),
    "aria-busy": _ctx.currentActive ? "true" : void 0
  }, [
    renderSlot(_ctx.$slots, "default"),
    createVNode(Transition, {
      appear: "",
      name: _ctx.props.transitionName,
      onAfterEnter: _ctx.handleShow,
      onAfterLeave: _ctx.handleHide
    }, {
      default: withCtx(() => [
        _ctx.currentActive ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.nh.be("loading"))
        }, [
          !_ctx.props.hideMask ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass([_ctx.nh.be("mask"), _ctx.props.maskClass]),
            style: normalizeStyle(_ctx.maskStyle),
            onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleMaskClick && _ctx.handleMaskClick(...args))
          }, null, 6)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "content", {}, () => [
            createElementVNode("div", {
              class: normalizeClass(_ctx.nh.be("icon"))
            }, [
              renderSlot(_ctx.$slots, "icon", {}, () => [
                _ctx.props.spin ? (openBlock(), createBlock(_component_Icon, {
                  key: 0,
                  spin: "",
                  icon: _ctx.props.icon
                }, null, 8, ["icon"])) : (openBlock(), createBlock(_component_Icon, {
                  key: 1,
                  pulse: "",
                  icon: _ctx.props.icon
                }, null, 8, ["icon"]))
              ])
            ], 2),
            _ctx.hasTip ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.nh.be("tip"))
            }, [
              renderSlot(_ctx.$slots, "tip", {}, () => [
                createTextVNode(toDisplayString(_ctx.props.tip), 1)
              ])
            ], 2)) : createCommentVNode("", true)
          ])
        ], 2)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["name", "onAfterEnter", "onAfterLeave"])
  ], 10, _hoisted_1)) : (openBlock(), createBlock(Transition, {
    key: 1,
    appear: "",
    name: _ctx.props.transitionName,
    onAfterEnter: _ctx.handleShow,
    onAfterLeave: _ctx.handleHide
  }, {
    default: withCtx(() => [
      _ctx.currentActive ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass([_ctx.nh.b(), _ctx.nh.bs("vars"), _ctx.nh.bm("inner")])
      }, [
        !_ctx.props.hideMask ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass([_ctx.nh.be("mask"), _ctx.props.maskClass]),
          style: normalizeStyle(_ctx.maskStyle),
          onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleMaskClick && _ctx.handleMaskClick(...args))
        }, null, 6)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "content", {}, () => [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("icon"))
          }, [
            renderSlot(_ctx.$slots, "icon", {}, () => [
              _ctx.props.spin ? (openBlock(), createBlock(_component_Icon, {
                key: 0,
                spin: "",
                icon: _ctx.props.icon
              }, null, 8, ["icon"])) : (openBlock(), createBlock(_component_Icon, {
                key: 1,
                pulse: "",
                icon: _ctx.props.icon
              }, null, 8, ["icon"]))
            ])
          ], 2),
          _ctx.hasTip ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.nh.be("tip"))
          }, [
            renderSlot(_ctx.$slots, "tip", {}, () => [
              createTextVNode(toDisplayString(_ctx.props.tip), 1)
            ])
          ], 2)) : createCommentVNode("", true)
        ])
      ], 2)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["name", "onAfterEnter", "onAfterLeave"]));
}
var Spin = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Spin as default };
