import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, createCommentVNode } from "vue";
import "../../common/config/src/index.mjs";
import { dividerProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Divider",
  props: dividerProps,
  setup(_props, { slots }) {
    const props = useProps("divider", _props, {
      vertical: false,
      textPosition: {
        default: "center",
        validator: (value) => ["center", "left", "right"].includes(value)
      },
      primary: false,
      dashed: false
    });
    const nh = useNameHelper("divider");
    const hasText = computed(() => {
      return !!slots.default;
    });
    const className = computed(() => {
      return [
        nh.b(),
        nh.bs("vars"),
        nh.bm(props.vertical ? "vertical" : "horizontal"),
        {
          [nh.bm("inherit")]: props.inherit,
          [nh.bm("primary")]: !props.vertical && props.primary,
          [nh.bm("dashed")]: props.dashed,
          [nh.bm("with-text")]: !props.vertical && hasText.value,
          [nh.bm(`with-text-${props.textPosition}`)]: !props.vertical && hasText.value && props.textPosition !== "center"
        }
      ];
    });
    return {
      props,
      nh,
      hasText,
      className
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    role: "separator"
  }, [
    !_ctx.props.vertical && _ctx.hasText ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass(_ctx.nh.be("text"))
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2)) : createCommentVNode("", true)
  ], 2);
}
var Divider = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Divider as default };
