import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, withModifiers, createVNode, withCtx, createCommentVNode } from "vue";
import "../icon/index.mjs";
import "../../common/config/src/index.mjs";
import { Xmark } from "@vexip-ui/icons";
import { parseColorToRgba, adjustAlpha } from "@vexip-ui/utils";
import { tagProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import Icon from "../icon/icon.mjs";
import { useProps, createSizeProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const tagTypes = Object.freeze([
  "default",
  "primary",
  "info",
  "success",
  "error",
  "warning",
  "lime",
  "pink",
  "magenta",
  "tomato",
  "orange",
  "cyan",
  "navy",
  "gold",
  "purple"
]);
const _sfc_main = defineComponent({
  name: "Tag",
  components: {
    Icon,
    Xmark
  },
  props: tagProps,
  emits: [],
  setup(_props) {
    const props = useProps("tag", _props, {
      size: createSizeProp(),
      type: {
        default: "default",
        validator: (value) => tagTypes.includes(value)
      },
      border: false,
      closable: false,
      simple: false,
      circle: false
    });
    const nh = useNameHelper("tag");
    const className = computed(() => {
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: props.inherit,
        [nh.bm(props.size)]: props.size !== "default",
        [nh.bm(props.type)]: props.type !== "default",
        [nh.bm("border")]: props.border,
        [nh.bm("simple")]: props.simple,
        [nh.bm("circle")]: props.circle
      };
    });
    const style = computed(() => {
      if (props.color) {
        const baseColor = parseColorToRgba(props.color);
        const base = baseColor.toString();
        return nh.cvm({
          color: "var(--vxp-color-white)",
          "bg-color": base,
          "b-color": base,
          "close-color": "var(--vxp-color-white)",
          ...props.simple || props.border ? {
            color: base,
            "close-color": base
          } : {},
          ...props.simple ? {
            "bg-color": adjustAlpha(baseColor, 0.2).toString()
          } : {}
        });
      }
      return {};
    });
    function handleClose() {
      if (props.closable) {
        emitEvent(props.onClose);
      }
    }
    return {
      props,
      nh,
      className,
      style,
      handleClose
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Xmark = resolveComponent("Xmark");
  const _component_Icon = resolveComponent("Icon");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.className),
    style: normalizeStyle(_ctx.style)
  }, [
    createElementVNode("span", null, [
      renderSlot(_ctx.$slots, "default")
    ]),
    _ctx.props.closable ? (openBlock(), createElementBlock("button", {
      key: 0,
      class: normalizeClass(_ctx.nh.be("close")),
      onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.handleClose && _ctx.handleClose(...args), ["left", "stop"]))
    }, [
      createVNode(_component_Icon, { label: "close" }, {
        default: withCtx(() => [
          createVNode(_component_Xmark)
        ]),
        _: 1
      })
    ], 2)) : createCommentVNode("", true)
  ], 6);
}
var Tag = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Tag as default };
