import { defineComponent, inject, ref, reactive, computed, watch, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import "../form/index.mjs";
import "../../common/config/src/index.mjs";
import { isDefined, isFunction } from "@vexip-ui/utils";
import { checkboxProps } from "./props.mjs";
import { GROUP_STATE } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useFieldStore } from "../form/helper.mjs";
import { useProps, createSizeProp, createStateProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "Checkbox",
  props: checkboxProps,
  emits: ["update:checked"],
  setup(_props, { slots, emit }) {
    const { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } = useFieldStore(() => {
      var _a;
      return (_a = input.value) == null ? void 0 : _a.focus();
    });
    const props = useProps("checkbox", _props, {
      size: createSizeProp(size),
      state: createStateProp(state),
      checked: {
        default: () => getFieldValue(false),
        static: true
      },
      label: null,
      value: {
        default: null,
        static: true
      },
      labelClass: null,
      disabled: () => disabled.value,
      border: false,
      control: false,
      partial: false,
      tabIndex: 0,
      loading: () => loading.value,
      loadingLock: false
    });
    const groupState = inject(GROUP_STATE, null);
    const nh = useNameHelper("checkbox");
    const currentChecked = ref(props.checked);
    const currentPartial = ref(props.partial);
    const input = ref();
    const controlState = reactive({
      checked: currentChecked,
      partial: currentPartial
    });
    const computedSize = computed(() => (groupState == null ? void 0 : groupState.size) || props.size);
    const computedState = computed(() => (groupState == null ? void 0 : groupState.state) || props.state);
    const isDisabled = computed(() => (groupState == null ? void 0 : groupState.disabled) || props.disabled);
    const isLoading = computed(() => (groupState == null ? void 0 : groupState.loading) || props.loading);
    const isLoadingLock = computed(() => (groupState == null ? void 0 : groupState.loadingLock) || props.loadingLock);
    const className = computed(() => {
      return [
        nh.b(),
        nh.bs("vars"),
        {
          [nh.bm("inherit")]: props.inherit,
          [nh.bm("checked")]: currentChecked.value,
          [nh.bm("disabled")]: isDisabled.value,
          [nh.bm("loading")]: isLoading.value && isLoadingLock.value,
          [nh.bm(computedSize.value)]: computedSize.value !== "default",
          [nh.bm("border")]: props.border,
          [nh.bm("partial")]: props.control && currentPartial.value,
          [nh.bm(computedState.value)]: computedState.value !== "default"
        }
      ];
    });
    const hasLabel = computed(() => {
      return isDefined(props.label) && props.label !== "";
    });
    const hasSlot = computed(() => {
      return !!slots.default;
    });
    const currentValue = computed(() => {
      var _a;
      return (_a = props.value) != null ? _a : props.label;
    });
    watch(
      () => props.checked,
      (value) => {
        setCurrentChecked(value);
      }
    );
    watch(
      () => props.partial,
      (value) => {
        currentPartial.value = value;
      }
    );
    watch(currentChecked, (checked) => {
      setFieldValue(checked);
      emitEvent(props.onChange, checked);
      emit("update:checked", checked);
    });
    if (groupState) {
      let increased = false;
      watch(currentValue, (value, prevValue) => {
        if (isFunction(groupState.replaceValue)) {
          groupState.replaceValue(prevValue, value);
        }
      });
      watch(
        () => props.control,
        (value) => {
          if (value) {
            if (increased) {
              groupState.decreaseItem(currentValue.value, input);
              increased = false;
            }
            groupState.increaseControl(controlState);
          } else {
            groupState.decreaseControl(controlState);
          }
        },
        { immediate: true }
      );
      watch(
        () => groupState.currentValues,
        (value) => {
          if (!props.control) {
            setCurrentChecked(value.includes(currentValue.value));
          }
        },
        { immediate: true }
      );
      onMounted(() => {
        if (!props.control) {
          groupState.increaseItem(currentValue.value, currentChecked.value, input);
          increased = true;
        }
      });
      onBeforeUnmount(() => {
        if (!props.control) {
          groupState.decreaseItem(currentValue.value, input);
        } else {
          groupState.decreaseControl(controlState);
        }
      });
    }
    function setCurrentChecked(checked) {
      if (props.control && isFunction(groupState == null ? void 0 : groupState.handleControlChange)) {
        groupState.handleControlChange();
      } else {
        currentChecked.value = checked;
      }
    }
    function handleChange(checked) {
      if (isDisabled.value || isLoading.value && isLoadingLock.value) {
        return;
      }
      setCurrentChecked(checked);
      if (!props.control && groupState) {
        isFunction(groupState.setItemChecked) && groupState.setItemChecked(currentValue.value, checked);
      }
      if (!groupState) {
        validateField();
      }
    }
    function handleClick(event) {
      emitEvent(props.onClick, event);
    }
    return {
      props,
      nh,
      idFor,
      currentChecked,
      isDisabled,
      className,
      hasLabel,
      hasSlot,
      isLoading,
      input,
      handleChange,
      handleClick
    };
  }
});
const _hoisted_1 = ["aria-disabled"];
const _hoisted_2 = ["checked", "disabled", "tabindex"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("label", {
    class: normalizeClass(_ctx.className),
    "aria-disabled": _ctx.isDisabled,
    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    createElementVNode("span", {
      class: normalizeClass([_ctx.nh.be("signal"), _ctx.isLoading && _ctx.nh.bem("signal", "active")])
    }, null, 2),
    _ctx.hasLabel || _ctx.hasSlot ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass([_ctx.nh.be("label"), _ctx.props.labelClass])
    }, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.props.label), 1)
      ])
    ], 2)) : createCommentVNode("", true),
    createElementVNode("input", {
      ref: "input",
      type: "checkbox",
      class: normalizeClass(_ctx.nh.be("input")),
      checked: _ctx.currentChecked,
      disabled: _ctx.isDisabled,
      tabindex: _ctx.props.tabIndex,
      onChange: _cache[0] || (_cache[0] = ($event) => _ctx.handleChange(!_ctx.currentChecked))
    }, null, 42, _hoisted_2)
  ], 10, _hoisted_1);
}
var Checkbox = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Checkbox as default };
