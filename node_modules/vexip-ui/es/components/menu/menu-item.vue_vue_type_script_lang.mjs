import { defineAsyncComponent, defineComponent, inject, ref, computed, reactive, toRef, provide, watch, nextTick, onMounted, onBeforeUnmount, createVNode } from "vue";
import "../collapse-transition/index.mjs";
import "../icon/index.mjs";
import "../portal/index.mjs";
import "../tooltip/index.mjs";
import "../renderer/index.mjs";
import { ChevronDown } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { useClickOutside, usePopper, useSetTimeout } from "@vexip-ui/hooks";
import { callIfFunc } from "@vexip-ui/utils";
import { menuItemProps } from "./props.mjs";
import { MENU_STATE, MENU_ITEM_STATE, MENU_GROUP_STATE, baseIndentWidth } from "./symbol.mjs";
import CollapseTransition from "../collapse/collapse-transition.mjs";
import Icon from "../icon/icon.mjs";
import Tooltip from "../tooltip/tooltip.mjs";
import Portal from "../portal/portal.mjs";
import Renderer from "../renderer/renderer.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const MenuGroup = defineAsyncComponent(() => import("./menu-group.mjs"));
const MenuItem = defineComponent({
  name: "MenuItem",
  components: {
    CollapseTransition,
    Icon,
    Tooltip,
    Portal,
    Renderer,
    ChevronDown
  },
  props: menuItemProps,
  emits: [],
  setup(_props, {
    slots
  }) {
    const props = useProps("menuItem", _props, {
      label: {
        default: null,
        static: true
      },
      icon: {
        isFunc: true,
        default: null
      },
      iconProps: null,
      disabled: false,
      transfer: null,
      trigger: null,
      transitionName: null,
      meta: null,
      children: {
        default: () => [],
        static: true
      },
      route: null
    });
    const menuState = inject(MENU_STATE, null);
    const parentItemState = inject(MENU_ITEM_STATE, null);
    const groupState = inject(MENU_GROUP_STATE, null);
    const nh = useNameHelper("menu");
    const baseClass = nh.be("item");
    const placement = ref("right-start");
    const groupExpanded = ref(false);
    const selected = ref(false);
    const sonSelected = ref(false);
    const popperShow = ref(false);
    const indent = computed(() => {
      var _a;
      return ((_a = parentItemState == null ? void 0 : parentItemState.indent) != null ? _a : 0) + 1;
    });
    const propTransfer = computed(() => {
      var _a, _b;
      return (_b = (_a = props.transfer) != null ? _a : menuState == null ? void 0 : menuState.transfer) != null ? _b : false;
    });
    const inTransfer = computed(() => parentItemState ? parentItemState.transfer : false);
    const transfer = computed(() => !inTransfer.value && propTransfer.value);
    const markerType = computed(() => (menuState == null ? void 0 : menuState.markerType) || "right");
    const wrapper = useClickOutside(handleClickOutside);
    const {
      reference,
      popper,
      transferTo,
      updatePopper
    } = usePopper({
      placement,
      transfer,
      wrapper
    });
    const className = computed(() => {
      return {
        [baseClass]: true,
        [`${baseClass}--disabled`]: props.disabled,
        [`${baseClass}--group-visible`]: isGroup.value && groupExpanded.value,
        [`${baseClass}--selected`]: selected.value,
        [`${baseClass}--no-icon`]: !props.icon,
        [`${baseClass}--son-selected`]: sonSelected.value
      };
    });
    const labelStyle = computed(() => {
      var _a;
      if ((menuState == null ? void 0 : menuState.horizontal) || (parentItemState == null ? void 0 : parentItemState.isUsePopper)) {
        return {};
      }
      return {
        paddingLeft: parentItemState && parentItemState.isUsePopper ? void 0 : `${indent.value * baseIndentWidth + ((menuState == null ? void 0 : menuState.isReduced) ? 0 : (_a = groupState == null ? void 0 : groupState.indent) != null ? _a : 0) * 0.25 * baseIndentWidth}px`
      };
    });
    const isGroup = computed(() => {
      var _a;
      return !!(slots.group || ((_a = props.children) == null ? void 0 : _a.length));
    });
    const showGroup = computed(() => isGroup.value && groupExpanded.value);
    const isUsePopper = computed(() => {
      return menuState && (menuState.horizontal || menuState.groupType === "dropdown") || isGroup.value && (menuState == null ? void 0 : menuState.isReduced) && !parentItemState || !!(parentItemState == null ? void 0 : parentItemState.isUsePopper);
    });
    const tooltipDisabled = computed(() => {
      return isGroup.value || !!((parentItemState == null ? void 0 : parentItemState.isUsePopper) || menuState && !menuState.isReduced);
    });
    const tooltipReverse = computed(() => !!(menuState == null ? void 0 : menuState.tooltipReverse));
    const isHorizontal = computed(() => (menuState == null ? void 0 : menuState.horizontal) && !parentItemState);
    const transition = computed(() => {
      var _a;
      return ((_a = props.transitionName) != null ? _a : isHorizontal.value) ? nh.ns("drop") : nh.ns("zoom");
    });
    const dropTrigger = computed(() => props.trigger || (menuState == null ? void 0 : menuState.trigger) || "hover");
    const itemState = reactive({
      el: wrapper,
      label: toRef(props, "label"),
      indent,
      groupExpanded,
      showGroup,
      isUsePopper,
      parentState: parentItemState,
      transfer: computed(() => inTransfer.value || propTransfer.value),
      cachedExpanded: groupExpanded.value,
      updateSonSelected,
      toggleGroupExpanded,
      handleMouseEnter,
      handleMouseLeave
    });
    provide(MENU_ITEM_STATE, itemState);
    watch(showGroup, (value) => {
      if (value && isUsePopper.value) {
        popperShow.value = true;
        updatePopper();
      }
    });
    watch(selected, (value) => {
      if (value) {
        emitEvent(props.onSelect);
        nextTick(() => {
          parentItemState == null ? void 0 : parentItemState.updateSonSelected(value);
        });
      } else {
        parentItemState == null ? void 0 : parentItemState.updateSonSelected(value);
      }
    });
    watch(groupExpanded, (expanded) => {
      if (typeof (menuState == null ? void 0 : menuState.handleExpand) === "function") {
        menuState.handleExpand(props.label, expanded, props.meta || {});
      }
    });
    watch(isHorizontal, (value) => {
      placement.value = value ? "bottom" : "right-start";
    }, {
      immediate: true
    });
    if (menuState) {
      watch(() => [props.label, menuState.currentActive], () => {
        selected.value = props.label === menuState.currentActive;
      }, {
        immediate: true
      });
    }
    onMounted(() => {
      if (typeof (menuState == null ? void 0 : menuState.increaseItem) === "function") {
        menuState.increaseItem(itemState);
      }
    });
    onBeforeUnmount(() => {
      if (typeof (menuState == null ? void 0 : menuState.decreaseItem) === "function") {
        menuState.decreaseItem(itemState);
      }
    });
    function updateSonSelected(selected2) {
      sonSelected.value = selected2;
      parentItemState == null ? void 0 : parentItemState.updateSonSelected(selected2);
    }
    const {
      timer
    } = useSetTimeout();
    function handleSelect() {
      clearTimeout(timer.hover);
      if (props.disabled)
        return;
      if (isGroup.value) {
        if (isUsePopper.value && dropTrigger.value !== "click")
          return;
        menuState == null ? void 0 : menuState.beforeExpand();
        groupExpanded.value = !groupExpanded.value;
      } else {
        if (isUsePopper.value) {
          toggleGroupExpanded(false, true);
        }
        if (menuState) {
          menuState.handleSelect(props.label, props.meta || {}, props.route);
        }
        selected.value = true;
      }
    }
    function toggleGroupExpanded(expanded, upwrad = false) {
      clearTimeout(timer.hover);
      menuState == null ? void 0 : menuState.beforeExpand();
      groupExpanded.value = expanded;
      if (upwrad && typeof (parentItemState == null ? void 0 : parentItemState.toggleGroupExpanded) === "function") {
        parentItemState.toggleGroupExpanded(expanded, upwrad);
      }
    }
    function handleMouseEnter() {
      clearTimeout(timer.hover);
      if (props.disabled || !isUsePopper.value || dropTrigger.value !== "hover")
        return;
      if (typeof (parentItemState == null ? void 0 : parentItemState.handleMouseEnter) === "function") {
        parentItemState.handleMouseEnter();
      }
      if (!isGroup.value)
        return;
      timer.hover = setTimeout(() => {
        groupExpanded.value = true;
      }, 250);
    }
    function handleMouseLeave() {
      clearTimeout(timer.hover);
      if (props.disabled || !isUsePopper.value || dropTrigger.value !== "hover")
        return;
      if (typeof (parentItemState == null ? void 0 : parentItemState.handleMouseLeave) === "function") {
        parentItemState.handleMouseLeave();
      }
      if (!isGroup.value)
        return;
      timer.hover = setTimeout(() => {
        groupExpanded.value = false;
      }, 250);
    }
    function handleClickOutside() {
      if (dropTrigger.value === "click") {
        nextTick(() => {
          groupExpanded.value = false;
        });
      }
    }
    function renderChildren() {
      var _a;
      if (!((_a = props.children) == null ? void 0 : _a.length)) {
        return null;
      }
      const renderItem = (item) => createVNode(MenuItem, {
        "label": item.label,
        "icon": item.icon,
        "icon-props": item.iconProps,
        "disabled": item.disabled,
        "children": item.children,
        "route": item.route
      }, {
        default: () => [item.name ? callIfFunc(item.name) : item.label]
      });
      return props.children.map((child) => {
        if (child.group) {
          return createVNode(MenuGroup, {
            "label": child.name ? callIfFunc(child.name) : child.label
          }, {
            default: () => {
              var _a2;
              return [(_a2 = child.children) == null ? void 0 : _a2.map(renderItem)];
            }
          });
        }
        return renderItem(child);
      });
    }
    return {
      props,
      nh,
      groupExpanded,
      transferTo,
      popperShow,
      className,
      labelStyle,
      isGroup,
      showGroup,
      isUsePopper,
      tooltipDisabled,
      markerType,
      tooltipReverse,
      isHorizontal,
      transition,
      dropTrigger,
      wrapper,
      reference,
      popper,
      handleSelect,
      handleMouseEnter,
      handleMouseLeave,
      renderChildren
    };
  }
});
export { MenuItem as default };
