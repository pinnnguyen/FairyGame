import { defineComponent, inject, ref, computed, provide, reactive, createVNode } from "vue";
import "../menu-item/index.mjs";
import "../../common/config/src/index.mjs";
import { callIfFunc } from "@vexip-ui/utils";
import { MENU_STATE, MENU_ITEM_STATE, baseIndentWidth, MENU_GROUP_STATE } from "./symbol.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import MenuItem from "./menu-item.mjs";
const MenuGroup = defineComponent({
  name: "MenuGroup",
  props: {
    label: String,
    children: Array
  },
  setup(_props, {
    slots
  }) {
    const props = useProps("menuGroup", _props, {
      label: {
        default: "",
        static: true
      },
      children: {
        default: () => [],
        static: true
      }
    });
    const menuState = inject(MENU_STATE, null);
    const parentItemState = inject(MENU_ITEM_STATE, null);
    const nh = useNameHelper("menu-group");
    const indent = ref(1);
    if (parentItemState) {
      indent.value = parentItemState.indent + 1;
    }
    const titleStyle = computed(() => {
      return {
        paddingLeft: (parentItemState == null ? void 0 : parentItemState.isUsePopper) ? void 0 : `${indent.value * baseIndentWidth}px`
      };
    });
    const onlyShowSlot = computed(() => {
      return (menuState == null ? void 0 : menuState.horizontal) && !parentItemState;
    });
    provide(MENU_GROUP_STATE, reactive({
      indent
    }));
    function renderChildren() {
      var _a, _b;
      if (slots.default) {
        return slots.default();
      }
      if (!((_a = props.children) == null ? void 0 : _a.length)) {
        return null;
      }
      if (!((_b = props.children) == null ? void 0 : _b.length)) {
        return null;
      }
      const renderItem = (item) => createVNode(MenuItem, {
        "label": item.label,
        "icon": item.icon,
        "icon-props": item.iconProps,
        "disabled": item.disabled,
        "children": item.children,
        "route": item.route
      }, {
        default: () => [item.name ? callIfFunc(item.name) : item.label]
      });
      return props.children.map((child) => {
        if (child.group) {
          return createVNode(MenuGroup, {
            "label": child.name ? callIfFunc(child.name) : child.label
          }, {
            default: () => {
              var _a2;
              return [(_a2 = child.children) == null ? void 0 : _a2.map(renderItem)];
            }
          });
        }
        return renderItem(child);
      });
    }
    return () => {
      var _a;
      if (onlyShowSlot.value) {
        return (_a = slots.default) == null ? void 0 : _a.call(slots);
      }
      return createVNode("li", {
        "class": nh.b()
      }, [createVNode("div", {
        "class": nh.be("label")
      }, [createVNode("span", {
        "class": nh.be("title"),
        "style": titleStyle.value
      }, [slots.label ? slots.label() : props.label])]), createVNode("ul", {
        "class": nh.be("list")
      }, [renderChildren()])]);
    };
  }
});
export { MenuGroup as default };
