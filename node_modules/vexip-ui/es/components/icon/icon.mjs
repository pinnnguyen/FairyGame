import { defineComponent, computed, createVNode, h } from "vue";
import "../../common/config/src/index.mjs";
import { iconProps } from "./props.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
var Icon = defineComponent({
  name: "Icon",
  props: iconProps,
  setup(_props, {
    attrs,
    slots
  }) {
    const props = useProps("icon", _props, {
      icon: {
        default: null,
        static: true
      },
      scale: 1,
      title: null,
      label: null,
      spin: {
        default: false,
        validator: (value) => typeof value === "boolean" || value === "in" || value === "out"
      },
      pulse: {
        default: false,
        validator: (value) => typeof value === "boolean" || value === "in" || value === "out"
      },
      flip: {
        default: null,
        validator: (value) => ["horizontal", "vertical", "both"].includes(value)
      }
    });
    const nh = useNameHelper("icon");
    const className = computed(() => {
      const spin = props.spin === true || props.spin === "in" ? "in" : "out";
      const pulse = props.pulse === true || props.pulse === "in" ? "in" : "out";
      return {
        [nh.b()]: true,
        [nh.bm(`spin-${spin}`)]: props.spin,
        [nh.bm(`pulse-${pulse}`)]: props.pulse,
        [nh.bm(`flip-${props.flip}`)]: props.flip
      };
    });
    const computedScale = computed(() => {
      return Number(props.scale) || 1;
    });
    const style = computed(() => {
      return computedScale.value === 1 ? {} : {
        fontSize: `${computedScale.value}em`
      };
    });
    return () => {
      const iAttrs = {
        class: className.value,
        style: style.value,
        title: props.title,
        role: attrs.role || (props.label || props.title ? "img" : void 0),
        "aria-label": props.label,
        "aria-hidden": !(props.label || props.title)
      };
      if (slots.default) {
        return createVNode("i", iAttrs, [createVNode("g", null, [slots.default()])]);
      }
      if (props.icon) {
        return createVNode("i", iAttrs, [createVNode("g", null, [h(props.icon)])]);
      }
      return createVNode("i", iAttrs, null);
    };
  }
});
export { Icon as default };
