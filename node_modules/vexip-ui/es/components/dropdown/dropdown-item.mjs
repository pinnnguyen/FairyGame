import { defineComponent, inject, ref, toRef, computed, openBlock, createElementBlock, normalizeClass, renderSlot } from "vue";
import "../../common/config/src/index.mjs";
import { useLabel } from "./hooks.mjs";
import { SELECT_HANDLER } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { eventProp, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
const _sfc_main = defineComponent({
  name: "DropdownItem",
  props: {
    label: {
      type: [String, Number],
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    selected: {
      type: Boolean,
      default: false
    },
    divided: {
      type: Boolean,
      default: false
    },
    reference: {
      type: Boolean,
      default: false
    },
    meta: {
      type: Object,
      default: () => ({})
    },
    onSelect: eventProp()
  },
  emits: [],
  setup(props) {
    const parentSelectHandler = inject(SELECT_HANDLER, null);
    const nh = useNameHelper("dropdown");
    const wrapper = ref(null);
    const label = toRef(props, "label");
    const isReference = ref(props.reference);
    const currentLabel = useLabel(label, wrapper);
    const className = computed(() => {
      const baseClass = nh.be("item");
      return {
        [baseClass]: true,
        [`${baseClass}--disabled`]: props.disabled,
        [`${baseClass}--selected`]: !props.disabled && props.selected,
        [`${baseClass}--divided`]: props.divided
      };
    });
    function handleSelect() {
      if (props.disabled || isReference.value) {
        return;
      }
      if (typeof parentSelectHandler === "function") {
        parentSelectHandler([currentLabel.value], [props.meta || {}]);
      }
      emitEvent(props.onSelect, currentLabel.value);
    }
    return {
      wrapper,
      className,
      handleSelect
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", {
    ref: "wrapper",
    class: normalizeClass(_ctx.className),
    role: "menuitem",
    tabindex: "0",
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleSelect && _ctx.handleSelect(...args))
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 2);
}
var DropdownItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { DropdownItem as default };
