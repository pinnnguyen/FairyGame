import { defineComponent, ref, toRef, computed, watch, createVNode, mergeProps } from "vue";
import "../icon/index.mjs";
import "../menu/index.mjs";
import "../native-scroll/index.mjs";
import { Indent, Outdent, CaretRight } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { layoutAsideProps } from "./props.mjs";
import { useLayoutState, useMediaQuery, useUpdateCounter } from "./helper.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import NativeScroll from "../native-scroll/native-scroll.mjs";
import Menu from "../menu/menu.mjs";
import Icon from "../icon/icon.mjs";
var LayoutAside = defineComponent({
  name: "LayoutAside",
  props: layoutAsideProps,
  emits: ["update:reduced", "update:expanded"],
  setup(_props, {
    slots,
    emit,
    expose
  }) {
    const props = useProps("layout", _props, {
      tag: "aside",
      reduced: false,
      menus: {
        default: () => [],
        static: true
      },
      menuProps: null,
      logo: "",
      signName: "",
      fixed: "lg",
      onReducedChange: null,
      onExpandedChange: null,
      onSignClick: null,
      onMenuSelect: null
    });
    const nh = useNameHelper("layout");
    const layoutState = useLayoutState();
    const currentReduced = ref(props.reduced);
    const currentExpanded = ref(props.expanded);
    const scrollHeight = ref("100%");
    const matched = useMediaQuery(toRef(props, "fixed"));
    const counter = useUpdateCounter();
    const top = ref();
    const bottom = ref();
    const menu = ref(null);
    const className = computed(() => {
      return [nh.be("aside"), {
        [nh.bs("vars")]: !layoutState.isLayout,
        [nh.bem("aside", "inherit")]: layoutState.isLayout || props.inherit,
        [nh.bem("aside", "fixed")]: matched.value,
        [nh.bem("aside", "expanded")]: currentExpanded.value,
        [nh.bem("aside", "reduced")]: currentReduced.value
      }];
    });
    const hasTop = computed(() => {
      return !!(props.logo || props.signName || slots.top);
    });
    const hasMenu = computed(() => {
      var _a, _b;
      return !!(((_a = props.menus) == null ? void 0 : _a.length) || ((_b = props.menuProps) == null ? void 0 : _b.router));
    });
    expose({
      menu,
      expandMenuByLabel
    });
    watch(() => props.reduced, (value) => {
      currentReduced.value = value;
    });
    watch(() => props.expanded, (value) => {
      currentExpanded.value = value;
    });
    watch(matched, (value) => {
      layoutState.expanded = !value;
    }, {
      immediate: true
    });
    watch(counter, () => computeScrollHeight);
    function computeScrollHeight() {
      let topHeight = 0;
      let bottomHeight = 0;
      if (top.value) {
        topHeight = top.value.offsetHeight;
      }
      if (bottom.value) {
        bottomHeight = bottom.value.offsetHeight;
      }
      if (topHeight || bottomHeight) {
        scrollHeight.value = `calc(100% - ${topHeight + bottomHeight}px)`;
      } else {
        scrollHeight.value = "100%";
      }
    }
    function toggleReduce(target = !currentReduced.value) {
      currentReduced.value = target;
      emitEvent(props.onReducedChange, target);
      emit("update:reduced", target);
    }
    function toggleExpand(target = !currentExpanded.value) {
      currentExpanded.value = target;
      emitEvent(props.onExpandedChange, target);
      emit("update:expanded", target);
    }
    function handleSignClick(event) {
      emitEvent(props.onSignClick, event);
    }
    function handleMenuSelect(label, meta) {
      emitEvent(props.onMenuSelect, label, meta);
    }
    function expandMenuByLabel(label) {
      var _a;
      (_a = menu.value) == null ? void 0 : _a.expandItemByLabel(label);
    }
    function getSlotParams() {
      return {
        reduced: currentReduced.value,
        toggleReduce,
        toggleExpand
      };
    }
    return () => {
      const CustomTag = props.tag || "aside";
      return createVNode(CustomTag, {
        "class": className.value
      }, {
        default: () => [hasTop.value && createVNode("div", {
          "ref": top,
          "class": nh.be("aside-top")
        }, [slots.top ? slots.top(getSlotParams()) : createVNode("div", {
          "class": nh.be("sign"),
          "onClick": handleSignClick
        }, [props.logo && createVNode("div", {
          "class": nh.be("logo")
        }, [createVNode("img", {
          "src": props.logo,
          "alt": "Logo"
        }, null)]), props.signName && createVNode("span", {
          "class": nh.be("sign-name")
        }, [props.signName])])]), createVNode(NativeScroll, {
          "class": nh.be("aside-main"),
          "height": scrollHeight.value
        }, {
          default: () => [slots.default ? slots.default(getSlotParams()) : hasMenu.value ? createVNode(Menu, mergeProps({
            "ref": menu
          }, props.menuProps || {}, {
            "transfer": true,
            "options": props.menus,
            "reduced": currentReduced.value,
            "onSelect": handleMenuSelect
          }), null) : null]
        }), createVNode("div", {
          "ref": bottom,
          "class": nh.be("aside-bottom")
        }, [slots.bottom ? slots.bottom(getSlotParams()) : createVNode("div", {
          "class": nh.be("reduce-handler"),
          "onClick": () => toggleReduce()
        }, [createVNode(Icon, {
          "icon": currentReduced.value ? Indent : Outdent
        }, null)])]), createVNode("div", {
          "class": nh.be("expand-handler"),
          "onClick": () => toggleExpand()
        }, [slots.expand ? slots.expand(getSlotParams()) : createVNode(Icon, null, {
          default: () => [createVNode(CaretRight, null, null)]
        })])]
      });
    };
  }
});
export { LayoutAside as default };
