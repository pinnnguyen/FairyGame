import { has, isDefined } from "@vexip-ui/utils";
function getError(url, xhr) {
  const message = `fail to post ${url} ${xhr.status}'`;
  const error = new Error(message);
  error.response = getBody(xhr);
  error.url = url;
  error.status = xhr.status;
  error.method = "POST";
  return error;
}
function getBody(xhr) {
  const text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}
function upload(options) {
  var _a;
  if (typeof XMLHttpRequest === "undefined") {
    return null;
  }
  const xhr = new XMLHttpRequest();
  const url = options.url;
  if (xhr.upload && options.onProgress) {
    xhr.upload.onprogress = (event) => {
      let percent = 0;
      if (event.total > 0) {
        percent = event.loaded / event.total * 100;
      }
      options.onProgress(percent);
    };
  }
  const formData = new FormData();
  if (options.data) {
    const data = options.data;
    Object.keys(data).forEach((key) => {
      formData.append(key, data[key]);
    });
  }
  formData.append(options.field || "file", options.file);
  options.file.path && formData.append(options.pathField || "path", options.file.path);
  if (options.onError) {
    xhr.onerror = () => {
      options.onError(getError(url, xhr));
    };
  }
  xhr.onload = () => {
    var _a2;
    if (xhr.status < 200 || xhr.status >= 300) {
      if (options.onError) {
        options.onError(getError(url, xhr));
      }
      return;
    }
    const body = getBody(xhr);
    (_a2 = options.onSuccess) == null ? void 0 : _a2.call(options, body);
  };
  if (options.onAbort) {
    xhr.onabort = () => {
      options.onAbort();
    };
  }
  xhr.open("POST", url, true);
  if (options.withCredentials && "withCredentials" in xhr) {
    xhr.withCredentials = true;
  }
  const headers = (_a = options.headers) != null ? _a : {};
  Object.keys(headers).forEach((header) => {
    if (has(headers, header) && isDefined(headers[header])) {
      xhr.setRequestHeader(header, headers[header]);
    }
  });
  xhr.send(formData);
  return xhr;
}
export { upload };
