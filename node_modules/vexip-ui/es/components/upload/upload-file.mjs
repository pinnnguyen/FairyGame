import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, createElementVNode, createBlock, toDisplayString, createCommentVNode, createVNode, withCtx, createTextVNode } from "vue";
import "../collapse-transition/index.mjs";
import "../icon/index.mjs";
import "../progress/index.mjs";
import "../renderer/index.mjs";
import { CircleCheck, CircleExclamation, Spinner, EyeR, TrashCanR } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { toFixed } from "@vexip-ui/utils";
import { uploadFileProps } from "./props.mjs";
import { iconMaps } from "./file-icon.mjs";
import { uploadListTypes, StatusType } from "./symbol.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import CollapseTransition from "../collapse/collapse-transition.mjs";
import Icon from "../icon/icon.mjs";
import Progress from "../progress/progress.mjs";
import Renderer from "../renderer/renderer.mjs";
import { useProps, emitEvent } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const imageExtRE = /\.(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i;
const imageBase64RE = /^data:image\//;
function isImage(file) {
  if (file.type) {
    return file.type.startsWith("image/");
  }
  const { name, url, base64 } = file;
  return !!(imageExtRE.test(name) || url && (imageExtRE.test(url) || imageBase64RE.test(url)) || base64 && imageBase64RE.test(base64));
}
const _sfc_main = defineComponent({
  name: "UploadFile",
  components: {
    CollapseTransition,
    Icon,
    Progress,
    Renderer,
    CircleCheck,
    CircleExclamation,
    Spinner,
    EyeR,
    TrashCanR
  },
  props: uploadFileProps,
  emits: [],
  setup(_props) {
    const props = useProps("uploadFile", _props, {
      file: {
        default: () => ({}),
        static: true
      },
      iconRenderer: {
        default: null,
        isFunc: true
      },
      listType: {
        default: "name",
        validator: (value) => uploadListTypes.includes(value)
      },
      loadingText: null,
      selectToAdd: false,
      precision: 2,
      canPreview: {
        default: isImage,
        isFunc: true
      }
    });
    const nh = useNameHelper("upload");
    const useIconRenderer = computed(() => typeof props.iconRenderer === "function");
    const fileName = computed(() => props.file.path || props.file.name);
    const percentage = computed(() => toFixed(props.file.percentage, props.precision));
    const showThumb = computed(() => isImage(props.file) && (props.file.url || props.file.base64));
    function getFileExtension(file) {
      return file.name.split(".").pop().toLocaleLowerCase();
    }
    function getFileIcon(file) {
      const extension = getFileExtension(file);
      if (extension) {
        return iconMaps[extension] || iconMaps.default;
      }
      return iconMaps.default;
    }
    function handleDelete(file) {
      emitEvent(props.onDelete, file);
    }
    function handlePreview(file) {
      emitEvent(props.onPreview, file);
    }
    function transformfileToBase64(file) {
      if (!file.source)
        return;
      const reader = new FileReader();
      reader.readAsDataURL(file.source);
      reader.onload = () => {
        var _a, _b;
        if (file.status !== StatusType.DELETE) {
          file.base64 = (_b = (_a = reader.result) == null ? void 0 : _a.toString()) != null ? _b : null;
        }
      };
    }
    return {
      props,
      nh,
      locale: useLocale("upload"),
      useIconRenderer,
      fileName,
      percentage,
      showThumb,
      getFileIcon,
      handleDelete,
      handlePreview,
      transformfileToBase64
    };
  }
});
const _hoisted_1 = ["title"];
const _hoisted_2 = { style: { "margin-bottom": "0.3em" } };
const _hoisted_3 = ["src", "alt"];
const _hoisted_4 = ["disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Renderer = resolveComponent("Renderer");
  const _component_Icon = resolveComponent("Icon");
  const _component_CircleCheck = resolveComponent("CircleCheck");
  const _component_CircleExclamation = resolveComponent("CircleExclamation");
  const _component_Spinner = resolveComponent("Spinner");
  const _component_TrashCanR = resolveComponent("TrashCanR");
  const _component_Progress = resolveComponent("Progress");
  const _component_CollapseTransition = resolveComponent("CollapseTransition");
  const _component_EyeR = resolveComponent("EyeR");
  return openBlock(), createElementBlock("li", {
    class: normalizeClass([
      _ctx.nh.be("file"),
      _ctx.nh.bem("file", _ctx.props.listType),
      _ctx.nh.bem("file", _ctx.props.file.status),
      _ctx.props.inherit && _ctx.nh.bem("file", "inherit")
    ]),
    title: _ctx.fileName,
    tabindex: "-1"
  }, [
    renderSlot(_ctx.$slots, "default", {
      file: _ctx.props.file,
      status: _ctx.props.file.status,
      percentage: _ctx.percentage
    }, () => {
      var _a;
      return [
        _ctx.props.listType === "name" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("label"))
          }, [
            createElementVNode("div", {
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("file-icon")])
            }, [
              renderSlot(_ctx.$slots, "icon", {
                file: _ctx.props.file
              }, () => [
                _ctx.useIconRenderer ? (openBlock(), createBlock(_component_Renderer, {
                  key: 0,
                  renderer: _ctx.props.iconRenderer,
                  data: { file: _ctx.props.file }
                }, null, 8, ["renderer", "data"])) : (openBlock(), createBlock(_component_Icon, {
                  key: 1,
                  icon: _ctx.getFileIcon(_ctx.props.file)
                }, null, 8, ["icon"]))
              ])
            ], 2),
            createElementVNode("span", {
              class: normalizeClass(_ctx.nh.be("filename"))
            }, toDisplayString(_ctx.fileName), 3)
          ], 2),
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("actions"))
          }, [
            _ctx.props.file.status === "uploading" ? (openBlock(), createElementBlock("span", {
              key: 0,
              style: { "margin-right": "0.5em" },
              class: normalizeClass(_ctx.nh.be("percentage"))
            }, toDisplayString(`${_ctx.percentage}%`), 3)) : createCommentVNode("", true),
            _ctx.props.file.status === "success" ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("success")])
            }, [
              createVNode(_component_Icon, null, {
                default: withCtx(() => [
                  createVNode(_component_CircleCheck)
                ]),
                _: 1
              })
            ], 2)) : _ctx.props.file.status === "fail" ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("fail")])
            }, [
              createVNode(_component_Icon, null, {
                default: withCtx(() => [
                  createVNode(_component_CircleExclamation)
                ]),
                _: 1
              })
            ], 2)) : _ctx.props.file.status === "uploading" ? (openBlock(), createElementBlock("div", {
              key: 3,
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("loading")])
            }, [
              createVNode(_component_Icon, { pulse: "" }, {
                default: withCtx(() => [
                  createVNode(_component_Spinner)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true),
            createElementVNode("button", {
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("close")]),
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleDelete(_ctx.props.file))
            }, [
              createVNode(_component_Icon, null, {
                default: withCtx(() => [
                  createVNode(_component_TrashCanR)
                ]),
                _: 1
              })
            ], 2)
          ], 2),
          _ctx.props.file.status === "uploading" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.nh.be("progress"))
          }, [
            createVNode(_component_Progress, {
              inherit: "",
              "info-type": "none",
              "stroke-width": 2,
              percentage: _ctx.props.file.percentage,
              precision: _ctx.props.precision
            }, null, 8, ["percentage", "precision"])
          ], 2)) : createCommentVNode("", true)
        ], 64)) : _ctx.props.listType === "thumbnail" || _ctx.props.listType === "card" ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(_ctx.nh.be("card"))
        }, [
          createElementVNode("div", {
            class: normalizeClass(_ctx.nh.be("thumbnail"))
          }, [
            _ctx.props.file.status === "uploading" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _ctx.props.listType === "thumbnail" ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(_ctx.nh.be("progress"))
              }, [
                createElementVNode("span", _hoisted_2, toDisplayString((_a = _ctx.props.loadingText) != null ? _a : _ctx.locale.uploading), 1),
                createVNode(_component_Progress, {
                  inherit: "",
                  "info-type": "none",
                  "stroke-width": 2,
                  percentage: _ctx.props.file.percentage,
                  precision: _ctx.props.precision
                }, null, 8, ["percentage", "precision"]),
                createElementVNode("span", {
                  style: { "margin-top": "3px" },
                  class: normalizeClass(_ctx.nh.be("percentage"))
                }, toDisplayString(`${_ctx.percentage}%`), 3)
              ], 2)) : (openBlock(), createBlock(_component_Icon, {
                key: 1,
                pulse: "",
                scale: 1.8
              }, {
                default: withCtx(() => [
                  createVNode(_component_Spinner)
                ]),
                _: 1
              }, 8, ["scale"]))
            ], 64)) : _ctx.showThumb ? (openBlock(), createElementBlock("img", {
              key: 1,
              class: normalizeClass(_ctx.nh.be("image")),
              src: _ctx.props.file.url || _ctx.props.file.base64 || "",
              alt: _ctx.fileName
            }, null, 10, _hoisted_3)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              createTextVNode(toDisplayString(_ctx.transformfileToBase64(_ctx.props.file)) + " ", 1),
              renderSlot(_ctx.$slots, "icon", {
                file: _ctx.props.file
              }, () => [
                _ctx.useIconRenderer ? (openBlock(), createBlock(_component_Renderer, {
                  key: 0,
                  renderer: _ctx.props.iconRenderer,
                  data: { file: _ctx.props.file }
                }, null, 8, ["renderer", "data"])) : (openBlock(), createBlock(_component_Icon, {
                  key: 1,
                  icon: _ctx.getFileIcon(_ctx.props.file),
                  scale: 2.8
                }, null, 8, ["icon", "scale"]))
              ])
            ], 64))
          ], 2),
          _ctx.props.listType === "card" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.nh.be("info"))
          }, [
            createElementVNode("span", {
              class: normalizeClass(_ctx.nh.be("filename"))
            }, toDisplayString(_ctx.fileName), 3),
            createVNode(_component_CollapseTransition, null, {
              default: withCtx(() => [
                _ctx.props.file.status === "uploading" ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(_ctx.nh.be("progress"))
                }, [
                  createVNode(_component_Progress, {
                    inherit: "",
                    "info-type": "none",
                    "stroke-width": 4,
                    percentage: _ctx.props.file.percentage,
                    precision: _ctx.props.precision
                  }, null, 8, ["percentage", "precision"])
                ], 2)) : createCommentVNode("", true)
              ]),
              _: 1
            })
          ], 2)) : createCommentVNode("", true),
          _ctx.props.listType === "card" || _ctx.props.file.status !== "uploading" ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(_ctx.nh.be("actions"))
          }, [
            _ctx.props.listType === "thumbnail" ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.nh.be("mask"))
            }, null, 2)) : createCommentVNode("", true),
            createElementVNode("button", {
              class: normalizeClass([
                _ctx.nh.be("icon"),
                _ctx.nh.be("action"),
                {
                  [_ctx.nh.bem("action", "disabled")]: !_ctx.props.canPreview(_ctx.props.file)
                }
              ]),
              disabled: !_ctx.props.canPreview(_ctx.props.file),
              onClick: _cache[1] || (_cache[1] = ($event) => _ctx.handlePreview(_ctx.props.file))
            }, [
              createVNode(_component_Icon, { scale: 1.4 }, {
                default: withCtx(() => [
                  createVNode(_component_EyeR)
                ]),
                _: 1
              }, 8, ["scale"])
            ], 10, _hoisted_4),
            createElementVNode("button", {
              class: normalizeClass([_ctx.nh.be("icon"), _ctx.nh.be("action")]),
              onClick: _cache[2] || (_cache[2] = ($event) => _ctx.handleDelete(_ctx.props.file))
            }, [
              createVNode(_component_Icon, { scale: 1.4 }, {
                default: withCtx(() => [
                  createVNode(_component_TrashCanR)
                ]),
                _: 1
              }, 8, ["scale"])
            ], 2)
          ], 2)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true)
      ];
    })
  ], 10, _hoisted_1);
}
var UploadFile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { UploadFile as default };
