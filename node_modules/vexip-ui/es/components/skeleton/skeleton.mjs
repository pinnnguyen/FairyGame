import { defineComponent, inject, computed, renderSlot, h, createVNode } from "vue";
import "../icon/index.mjs";
import { ImageR } from "@vexip-ui/icons";
import "../../common/config/src/index.mjs";
import { skeletonProps } from "./props.mjs";
import { GROUP_STATE } from "./symbol.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import Icon from "../icon/icon.mjs";
var Skeleton = defineComponent({
  name: "Skeleton",
  inheritAttrs: false,
  props: skeletonProps,
  setup(_props, {
    attrs,
    slots
  }) {
    const props = useProps("skeleton", _props, {
      size: null,
      width: null,
      height: null,
      repeat: {
        default: 1,
        validator: (value) => value > 0
      },
      tag: "div",
      activated: null,
      image: false,
      imageIcon: null,
      iconScale: 4,
      round: null,
      circle: null,
      block: null,
      spread: 0,
      loading: null
    });
    const groupState = inject(GROUP_STATE, {});
    const nh = useNameHelper("skeleton");
    const activated = computed(() => {
      var _a, _b;
      return (_b = (_a = props.activated) != null ? _a : groupState.activated) != null ? _b : false;
    });
    const round = computed(() => {
      var _a, _b;
      return (_b = (_a = props.round) != null ? _a : groupState.round) != null ? _b : false;
    });
    const circle = computed(() => {
      var _a, _b;
      return (_b = (_a = props.circle) != null ? _a : groupState.circle) != null ? _b : false;
    });
    const block = computed(() => {
      var _a, _b;
      return (_b = (_a = props.block) != null ? _a : groupState.block) != null ? _b : false;
    });
    const loading = computed(() => {
      var _a, _b;
      return (_b = (_a = props.loading) != null ? _a : groupState.loading) != null ? _b : true;
    });
    const tag = computed(() => {
      return props.tag || groupState.itemTag || "div";
    });
    const className = computed(() => {
      var _a;
      return {
        [nh.b()]: true,
        [nh.bs("vars")]: true,
        [nh.bm("inherit")]: Object.keys(groupState).length || props.inherit,
        [nh.bm(props.size)]: (_a = props.size) != null ? _a : groupState == null ? void 0 : groupState.size,
        [nh.bm("block")]: block.value,
        [nh.bm("image")]: props.image,
        [nh.bm("round")]: round.value && !circle.value,
        [nh.bm("circle")]: circle.value,
        [nh.bm("activated")]: activated.value
      };
    });
    const style = computed(() => {
      const style2 = {};
      if (props.width !== null) {
        style2[nh.cv("width")] = parseSize(props.width);
      }
      if (props.height !== null) {
        style2[nh.cv("height")] = parseSize(props.height);
      }
      if (props.spread) {
        style2[nh.cv("spread")] = parseSize(props.spread);
      }
      return style2;
    });
    function parseSize(value) {
      if (typeof value === "number") {
        return `${value}px`;
      }
      value = value.trim();
      if (/\d$/.test(value)) {
        return `${value}px`;
      }
      return value;
    }
    function renderSkeleton() {
      if (!loading.value) {
        return renderSlot(slots, "default");
      }
      return h(tag.value || "div", {
        ...attrs,
        class: [className.value, attrs.class],
        style: [style.value, attrs.style]
      }, props.image ? [createVNode(Icon, {
        "icon": props.imageIcon || ImageR,
        "scale": props.iconScale
      }, null)] : []);
    }
    return () => {
      if (props.repeat > 1) {
        return Array.from({
          length: props.repeat
        }, () => renderSkeleton());
      }
      return renderSkeleton();
    };
  }
});
export { Skeleton as default };
