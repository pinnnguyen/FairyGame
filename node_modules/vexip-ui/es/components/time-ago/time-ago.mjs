import { defineComponent, computed, ref, watch, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, toDisplayString } from "vue";
import "../../common/config/src/index.mjs";
import { format, toDate } from "@vexip-ui/utils";
import { computeTimeAgo, getId, subscribe, unsubscribe } from "./helper.mjs";
import { timeAgoProps } from "./props.mjs";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.mjs";
import { useProps } from "../../common/config/src/props.mjs";
import { useNameHelper } from "../../common/config/src/namespace.mjs";
import { useLocale } from "../../common/config/src/locale/index.mjs";
const _sfc_main = defineComponent({
  name: "TimeAgo",
  props: timeAgoProps,
  setup(_props) {
    const props = useProps("timeAgo", _props, {
      datetime: {
        default: () => Date.now(),
        static: true
      },
      interval: {
        default: false,
        validator: (value) => value && value >= 5
      },
      title: false,
      titleFormat: "yyyy-MM-dd HH:mm:ss"
    });
    const nh = useNameHelper("time-ago");
    const datetime = toDateValue(props.datetime);
    const locale = useLocale("timeAgo");
    const wordSpace = computed(() => {
      var _a;
      return ((_a = useLocale()) == null ? void 0 : _a.value.wordSpace) || false;
    });
    const timeAgo = ref(computeTimeAgo(datetime, Date.now(), locale.value, wordSpace.value));
    const id = getId();
    const record = {
      datetime,
      timeAgo,
      locale,
      wordSpace,
      interval: parseInterval(props.interval),
      updated: Date.now()
    };
    const currentTitle = computed(() => {
      if (!props.title)
        return void 0;
      if (typeof props.title === "string")
        return props.title;
      return format(props.datetime, props.titleFormat);
    });
    subscribe(id, record);
    watch(
      () => props.datetime,
      (value) => {
        record.datetime = toDateValue(value);
        timeAgo.value = computeTimeAgo(datetime, Date.now(), locale.value, wordSpace.value);
      }
    );
    watch(
      () => props.interval,
      (value) => {
        record.interval = parseInterval(value);
      }
    );
    onBeforeUnmount(() => {
      unsubscribe(id);
    });
    function parseInterval(interval) {
      return interval && (interval === true ? 1e4 : interval * 1e3);
    }
    function toDateValue(value) {
      if (typeof value === "string") {
        value = value.replace(/-/g, "/");
      }
      return toDate(value);
    }
    return {
      nh,
      props,
      timeAgo,
      currentTitle
    };
  }
});
const _hoisted_1 = ["title"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("span", {
    class: normalizeClass([_ctx.nh.b(), _ctx.props.inherit && _ctx.nh.bm("inherit")]),
    title: _ctx.currentTitle
  }, toDisplayString(_ctx.timeAgo), 11, _hoisted_1);
}
var TimeAgo = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { TimeAgo as default };
