import { computed, unref, inject, provide, getCurrentInstance } from "vue";
import { isClient } from "@vexip-ui/utils";
const PROVIDED_Z_INDEX = "___vxp-provided-z-index";
let counter = 0;
let initZIndex = 2e3;
if (isClient) {
  const rootStyle = getComputedStyle(document.documentElement);
  const cssZIndex = parseFloat(rootStyle.getPropertyValue("--vxp-z-index-popup").trim());
  if (!Number.isNaN(cssZIndex)) {
    initZIndex = cssZIndex;
  }
}
const globalZIndex = computed(() => initZIndex);
function getOrDefault(num, def) {
  return !Number.isNaN(num) ? num : def;
}
function configZIndex(sourceZIndex, app) {
  if (app) {
    const zIndex = computed(() => {
      const zIndex2 = unref(sourceZIndex);
      return getOrDefault(zIndex2, globalZIndex.value);
    });
    app.provide(PROVIDED_Z_INDEX, zIndex);
  } else {
    const upstreamZIndex = inject(PROVIDED_Z_INDEX, null);
    const zIndex = computed(() => {
      const zIndex2 = unref(sourceZIndex);
      return getOrDefault(
        zIndex2,
        upstreamZIndex ? getOrDefault(upstreamZIndex.value, globalZIndex.value) : globalZIndex.value
      );
    });
    provide(PROVIDED_Z_INDEX, zIndex);
  }
}
function useZIndex() {
  const zIndex = getCurrentInstance() ? inject(PROVIDED_Z_INDEX, globalZIndex) : globalZIndex;
  return computed(() => zIndex.value + counter++);
}
export { PROVIDED_Z_INDEX, configZIndex, useZIndex };
